// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Sample
{
    public enum E2A6324B8E10DEE2666A6A5498DFC667B
    {
        XLAT_SERVER = 1,
        XLAT_CLIENT = 2
    }

    [Flags]
    public enum TI_flags
    {
        TI_IsConst = 1,
        TI_IsVolatile = 2,
        TI_IsUnaligned = 4,
        TI_IsPure = 8,
        TI_IsWinRT = 16
    }

    [Flags]
    public enum CT_flags
    {
        CT_IsSimpleType = 1,
        CT_ByReferenceOnly = 2,
        CT_HasVirtualBase = 4,
        CT_IsWinRTHandle = 8,
        CT_IsStdBadAlloc = 16
    }

    public enum EFA310B393AFE23AC619E684616706237
    {
        eInvalid = 65535
    }

    public enum CreateGUID
    {
        CreateGUID = 0
    }

    public enum ISerializeType
    {
        ISerializeOnlyISerializeType = 0,
        ISerializeOrNullISerializeType = 1,
        AnyInterfaceOrNullISerializeType = 2
    }

    public enum Formatted
    {
        Formatted = 0
    }

    public enum VAFormatted
    {
        VAFormatted = 0
    }

    public enum WidthConvert
    {
        WidthConvert = 0
    }

    public enum TriState
    {
        UndefTriState = 255,
        FalseTriState = 0,
        TrueTriState = 1
    }

    public enum NodeNameType
    {
        NullNAMETYPE = 255,
        PStringNAMETYPE = 0,
        UInt32NAMETYPE = 1,
        Int32NAMETYPE = 2,
        DoubleNAMETYPE = 3,
        FloatNAMETYPE = 4,
        CellID_NAMETYPE = 5,
        InstanceID_NAMETYPE = 6,
        BoolNAMETYPE = 7,
        HexNAMETYPE = 8,
        BinaryNAMETYPE = 9,
        BlockID_NAMETYPE = 10,
        UInt64NAMETYPE = 11,
        Int64NAMETYPE = 12,
        LongHexNAMETYPE = 13,
        GuidNAMETYPE = 14,
        NUM_NAMETYPES = 15
    }

    public enum StdUninitialized
    {
        Noinit = 0
    }

    public enum LoggerLoggingSeverity
    {
        SevCriticalError = 0,
        SevError = 1,
        SevWarning = 2,
        SevInformational = 3,
        SevRuntime = 4,
        SevImportant = 5,
        NumSeverities = 6
    }

    public enum LoggerLoggerWriteResult
    {
        ResWriteFailed = 0,
        ResWriteSucceeded = 1,
        ResNotHandled = 2
    }

    public enum EEC0927712136DE5862219D5137417E39
    {
        RcfNotThreadSafe = 1,
        RcfDontDeleteThis = 2
    }

    public enum E36752B0DF727C5E0FFFA2F7FF25C1741
    {
        STARTING_BUFFER_SIZE = 8,
        DOUBLING_THRESHHOLD = 16384,
        DEALLOCATE_FLAG = -2147483648
    }

    [Flags]
    public enum DebugFlagBits
    {
        DbgOutputToDebugger = 1,
        DbgOutputToFile = 2,
        DbgOutputToUser = 4,
        DbgOutputAssertDlgs = 8,
        DbgPrintfEnabled = 16,
        DbgDbgAssertsAssert = 32,
        DbgAssertsAssert = 64,
        DbgWslAssertsAssert = 128,
        DbgPerfAssertsAssert = 256,
        DbgEnableExceptionHandler = 512,
        DbgEnableFloatingPointExceptions = 1024,
        DbgPlaceLogsInAppDir = 2048,
        DbgNoAutomaticStackTrace = 4096,
        DbgNeedToInitialize = 8192,
        DbgEnableMemoryExceptions = 16384
    }

    [Flags]
    public enum HashFlags
    {
        HfAutoGrow = 1,
        HfAutoShrink = 2,
        HfMultiHash = 4,
        HfDefaults = 0
    }

    public enum E341FA4C9185E29046C91672D1ABB5D58
    {
        DEFAULT_NUM_BUCKETS = 23
    }

    public enum E33C41BA57DC16690B6E3FDC5542FDC25
    {
        ALIGN = 8,
        ALIGN_SHIFT = 3,
        MAX_BYTES = 128
    }

    [Flags]
    public enum TurbineDebugAssertionControlBits
    {
        AssertionDefaultAction = 1,
        AssertionIgnored = 2,
        AssertionLogOnly = 4,
        AssertionIsFatal = 8
    }

    public enum TurbineDebugDebugResponse
    {
        DebugResponseAbort = 0,
        DebugResponseDebug = 1,
        DebugResponseIgnoreThis = 2,
        DebugResponseIgnoreAll = 3,
        DebugResponseFatalError = 4,
        DebugResponseCrashReport = 5
    }

    public enum TurbineDebugOutputStringType
    {
        OutputStringFile = 0,
        OutputStringUser = 1,
        OutputStringUserAndFile = 2,
        OutputStringAssertionFailed = 3
    }

    public enum E75059E45244953B5438D7A6F7EC57CFC
    {
        LowMax = 30,
        HighMax = 1000
    }

    public enum E868DCEC625B9F0FC46FB2B9F49221D92
    {
        Ret = 0
    }

    public enum Archive_tagUnpacking
    {
        Unpacking = 0
    }

    public enum Archive_tagPacking
    {
        Packing = 0
    }

    public enum E3143A7E76DC998FE4865D06FD624AE89
    {
        Value = 1
    }

    public enum E007C44C25078E730DB8F1804981277BF
    {
        HashFlags = 1
    }

    [Flags]
    public enum E385D86B23BF77ACADD05090CF54C676F
    {
        SbrGrowExponentially = 1,
        SbrWindowOnSuppliedSize = 2,
        SbrPreventFurtherGrowth = 4,
        SbrAllocateFromFreelist = 8
    }

    public enum ECAA48E7F3BEA6FCDA467FCCDDE1E335C
    {
        NoParameter = 1,
        RequiredParameter = 2,
        OptionalParameter = 3,
        AutoSetInt = 17,
        AutoParseInt = 34,
        AutoParsePString = 50,
        AutoParseWPString = 58,
        AutoParseFloat = 66,
        AutoParseDouble = 82,
        AutoParseShort = 98,
        AutoSetBool = 113,
        AutoParseBool = 130,
        ArgumentParserMask = 255
    }

    public enum ArgumentParserOutputTextType
    {
        OttNormal = 0,
        OttErrorText = 1,
        OttShortVersion = 2,
        OttLongVersion = 3,
        OttDescription = 4
    }

    public enum Heading_unit_type
    {
        DEGREES = 0,
        RADIANS = 1
    }

    public enum E2F6AFB67AFFE6DA62DE1CBEBE240B9D2
    {
        Npos = -1
    }

    [Flags]
    public enum IosIoState
    {
        Goodbit = 0,
        Eofbit = 1,
        Failbit = 2,
        Badbit = 4
    }

    [Flags]
    public enum IosOpenMode
    {
        In = 1,
        Out = 2,
        Ate = 4,
        App = 8,
        Trunc = 16,
        Nocreate = 32,
        Noreplace = 64,
        Binary = 128
    }

    [Flags]
    public enum E483FBD717E21178E87106497493A638C
    {
        Skipws = 1,
        Left = 2,
        Right = 4,
        Internal = 8,
        Dec = 16,
        Oct = 32,
        Hex = 64,
        Showbase = 128,
        Showpoint = 256,
        Uppercase = 512,
        Showpos = 1024,
        Scientific = 2048,
        Fixed = 4096,
        Unitbuf = 8192,
        Stdio = 16384
    }

    public enum STL_localeCategory
    {
        None = 0,
        Collate = 16,
        Ctype = 32,
        Monetary = 64,
        Numeric = 256,
        Time = 512,
        Messages = 1024,
        All = 1904
    }

    public enum STL_ctypeBaseMask
    {
        Space = 8,
        Print = 343,
        Cntrl = 32,
        Upper = 1,
        Lower = 2,
        Alpha = 256,
        Digit = 4,
        Punct = 16,
        Xdigit = 128,
        Alnum = 260,
        Graph = 276
    }

    public enum IosSeekDir
    {
        Beg = 0,
        Cur = 1,
        End = 2
    }

    public enum E33534C82092764B28C02037197983D22
    {
        Skipping = 0,
        Tied = 1
    }

    public enum EE787915F5035F3690E728927C602C3BC
    {
        INITIAL = 0,
        READY = 1,
        STOPPING = 2,
        STOPPED = 3
    }

    public enum HttpClientWinHttpImplementationType
    {
        WinHttpImplementationType = 0
    }

    public enum HttpClientWinInetImplementationType
    {
        WinInetImplementationType = 0
    }

    public enum EAllegianceHouseAction
    {
        UndefAllegianceHouseAction = 0,
        CheckStatusAllegianceHouseAction = 1,
        GuestOpenAllegianceHouseAction = 2,
        GuestCloseAllegianceHouseAction = 3,
        StorageOpenAllegianceHouseAction = 4,
        StorageCloseAllegianceHouseAction = 5,
        NumberOfActionsAllegianceHouseAction = 5,
        FORCE_AllegianceHouseAction32BIT = 2147483647
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate int WNDPROC(global::System.IntPtr _0, uint _1, uint _2, int _3);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate global::System.IntPtr GENERIC_BINDING_ROUTINE(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate void GENERIC_UNBIND_ROUTINE(global::System.IntPtr _0, byte* _1);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate void NDR_RUNDOWN(global::System.IntPtr context);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate void EXPR_EVAL(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate void XMIT_HELPER_ROUTINE(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate uint USER_MARSHAL_SIZING_ROUTINE(uint* _0, uint _1, global::System.IntPtr _2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate byte* USER_MARSHAL_MARSHALLING_ROUTINE(uint* _0, byte* _1, global::System.IntPtr _2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate byte* USER_MARSHAL_UNMARSHALLING_ROUTINE(uint* _0, byte* _1, global::System.IntPtr _2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
    public unsafe delegate void USER_MARSHAL_FREEING_ROUTINE(uint* _0, global::System.IntPtr _1);

    public unsafe partial class GUID : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Data1;

            [FieldOffset(4)]
            internal ushort Data2;

            [FieldOffset(6)]
            internal ushort Data3;

            [FieldOffset(8)]
            internal fixed byte Data4[8];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_GUID@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GUID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GUID>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GUID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GUID(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GUID __CreateInstance(global::Sample.GUID.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GUID(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GUID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GUID.__Internal));
            *(global::Sample.GUID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GUID(global::Sample.GUID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public GUID(global::Sample.GUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.GUID.__Internal*) __Instance) = *((global::Sample.GUID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.GUID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Data1
        {
            get
            {
                return ((global::Sample.GUID.__Internal*) __Instance)->Data1;
            }

            set
            {
                ((global::Sample.GUID.__Internal*)__Instance)->Data1 = value;
            }
        }

        public ushort Data2
        {
            get
            {
                return ((global::Sample.GUID.__Internal*) __Instance)->Data2;
            }

            set
            {
                ((global::Sample.GUID.__Internal*)__Instance)->Data2 = value;
            }
        }

        public ushort Data3
        {
            get
            {
                return ((global::Sample.GUID.__Internal*) __Instance)->Data3;
            }

            set
            {
                ((global::Sample.GUID.__Internal*)__Instance)->Data3 = value;
            }
        }

        public byte[] Data4
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.GUID.__Internal*) __Instance)->Data4 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.GUID.__Internal*) __Instance)->Data4[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.GUID.__Internal*)__Instance)->Data4[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ArchiveInitializer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveInitializer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveInitializer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArchiveInitializer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveInitializer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArchiveInitializer __CreateInstance(global::Sample.ArchiveInitializer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveInitializer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArchiveInitializer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArchiveInitializer.__Internal));
            *(global::Sample.ArchiveInitializer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArchiveInitializer(global::Sample.ArchiveInitializer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArchiveInitializer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArchiveInitializerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveInitializerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveInitializerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArchiveInitializerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveInitializerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArchiveInitializerVtbl __CreateInstance(global::Sample.ArchiveInitializerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveInitializerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArchiveInitializerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArchiveInitializerVtbl.__Internal));
            *(global::Sample.ArchiveInitializerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArchiveInitializerVtbl(global::Sample.ArchiveInitializerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArchiveInitializerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ReferenceCountTemplate1048576_0Vtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ReferenceCountTemplate1048576_0Vtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ReferenceCountTemplate1048576_0Vtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ReferenceCountTemplate1048576_0Vtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ReferenceCountTemplate1048576_0Vtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ReferenceCountTemplate1048576_0Vtbl __CreateInstance(global::Sample.ReferenceCountTemplate1048576_0Vtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ReferenceCountTemplate1048576_0Vtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ReferenceCountTemplate1048576_0Vtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ReferenceCountTemplate1048576_0Vtbl.__Internal));
            *(global::Sample.ReferenceCountTemplate1048576_0Vtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ReferenceCountTemplate1048576_0Vtbl(global::Sample.ReferenceCountTemplate1048576_0Vtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ReferenceCountTemplate1048576_0Vtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GrowBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GrowBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GrowBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GrowBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GrowBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GrowBuffer __CreateInstance(global::Sample.GrowBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GrowBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GrowBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GrowBuffer.__Internal));
            *(global::Sample.GrowBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GrowBuffer(global::Sample.GrowBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GrowBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArchiveVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArchiveVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArchiveVtbl __CreateInstance(global::Sample.ArchiveVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArchiveVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArchiveVtbl.__Internal));
            *(global::Sample.ArchiveVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArchiveVtbl(global::Sample.ArchiveVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArchiveVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class InterfaceVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InterfaceVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InterfaceVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.InterfaceVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.InterfaceVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.InterfaceVtbl __CreateInstance(global::Sample.InterfaceVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.InterfaceVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.InterfaceVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.InterfaceVtbl.__Internal));
            *(global::Sample.InterfaceVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private InterfaceVtbl(global::Sample.InterfaceVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InterfaceVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IArchiveVersionStack
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IArchiveVersionStack> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IArchiveVersionStack>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IArchiveVersionStack __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IArchiveVersionStack(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IArchiveVersionStack __CreateInstance(global::Sample.IArchiveVersionStack.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IArchiveVersionStack(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IArchiveVersionStack.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IArchiveVersionStack.__Internal));
            *(global::Sample.IArchiveVersionStack.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IArchiveVersionStack(global::Sample.IArchiveVersionStack.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IArchiveVersionStack(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IFileNodeNameVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IFileNodeNameVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IFileNodeNameVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IFileNodeNameVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IFileNodeNameVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IFileNodeNameVtbl __CreateInstance(global::Sample.IFileNodeNameVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IFileNodeNameVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IFileNodeNameVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IFileNodeNameVtbl.__Internal));
            *(global::Sample.IFileNodeNameVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IFileNodeNameVtbl(global::Sample.IFileNodeNameVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IFileNodeNameVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PFileNode
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PFileNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PFileNode>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PFileNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PFileNode(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PFileNode __CreateInstance(global::Sample.PFileNode.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PFileNode(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PFileNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PFileNode.__Internal));
            *(global::Sample.PFileNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PFileNode(global::Sample.PFileNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PFileNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FileNodeFileInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FileNodeFileInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FileNodeFileInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FileNodeFileInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FileNodeFileInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FileNodeFileInfo __CreateInstance(global::Sample.FileNodeFileInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FileNodeFileInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FileNodeFileInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FileNodeFileInfo.__Internal));
            *(global::Sample.FileNodeFileInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FileNodeFileInfo(global::Sample.FileNodeFileInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FileNodeFileInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IUnknownVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IUnknownVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IUnknownVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IUnknownVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IUnknownVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IUnknownVtbl __CreateInstance(global::Sample.IUnknownVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IUnknownVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IUnknownVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IUnknownVtbl.__Internal));
            *(global::Sample.IUnknownVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IUnknownVtbl(global::Sample.IUnknownVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IUnknownVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RPC_ASYNC_STATE
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_ASYNC_STATE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_ASYNC_STATE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RPC_ASYNC_STATE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RPC_ASYNC_STATE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RPC_ASYNC_STATE __CreateInstance(global::Sample.RPC_ASYNC_STATE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RPC_ASYNC_STATE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RPC_ASYNC_STATE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_ASYNC_STATE.__Internal));
            *(global::Sample.RPC_ASYNC_STATE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RPC_ASYNC_STATE(global::Sample.RPC_ASYNC_STATE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RPC_ASYNC_STATE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OVERLAPPED
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OVERLAPPED> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OVERLAPPED>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OVERLAPPED __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OVERLAPPED(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OVERLAPPED __CreateInstance(global::Sample.OVERLAPPED.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OVERLAPPED(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OVERLAPPED.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OVERLAPPED.__Internal));
            *(global::Sample.OVERLAPPED.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OVERLAPPED(global::Sample.OVERLAPPED.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OVERLAPPED(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagFORMATETC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagFORMATETC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagFORMATETC>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagFORMATETC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagFORMATETC(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagFORMATETC __CreateInstance(global::Sample.TagFORMATETC.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagFORMATETC(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagFORMATETC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagFORMATETC.__Internal));
            *(global::Sample.TagFORMATETC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagFORMATETC(global::Sample.TagFORMATETC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagFORMATETC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IStream
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IStream> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IStream>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IStream(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IStream __CreateInstance(global::Sample.IStream.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IStream(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IStream.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IStream.__Internal));
            *(global::Sample.IStream.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IStream(global::Sample.IStream.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IStream(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IStorage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IStorage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IStorage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IStorage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IStorage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IStorage __CreateInstance(global::Sample.IStorage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IStorage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IStorage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IStorage.__Internal));
            *(global::Sample.IStorage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IStorage(global::Sample.IStorage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IStorage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagSTGMEDIUM
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSTGMEDIUM> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSTGMEDIUM>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagSTGMEDIUM __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagSTGMEDIUM(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagSTGMEDIUM __CreateInstance(global::Sample.TagSTGMEDIUM.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagSTGMEDIUM(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagSTGMEDIUM.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagSTGMEDIUM.__Internal));
            *(global::Sample.TagSTGMEDIUM.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagSTGMEDIUM(global::Sample.TagSTGMEDIUM.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagSTGMEDIUM(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumFORMATETC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumFORMATETC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumFORMATETC>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumFORMATETC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumFORMATETC(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumFORMATETC __CreateInstance(global::Sample.IEnumFORMATETC.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumFORMATETC(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumFORMATETC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumFORMATETC.__Internal));
            *(global::Sample.IEnumFORMATETC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumFORMATETC(global::Sample.IEnumFORMATETC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumFORMATETC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumFORMATETCVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumFORMATETCVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumFORMATETCVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumFORMATETCVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumFORMATETCVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumFORMATETCVtbl __CreateInstance(global::Sample.IEnumFORMATETCVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumFORMATETCVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumFORMATETCVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumFORMATETCVtbl.__Internal));
            *(global::Sample.IEnumFORMATETCVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumFORMATETCVtbl(global::Sample.IEnumFORMATETCVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumFORMATETCVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IAdviseSink
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAdviseSink> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAdviseSink>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IAdviseSink __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IAdviseSink(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IAdviseSink __CreateInstance(global::Sample.IAdviseSink.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IAdviseSink(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IAdviseSink.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IAdviseSink.__Internal));
            *(global::Sample.IAdviseSink.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IAdviseSink(global::Sample.IAdviseSink.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IAdviseSink(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMoniker
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMoniker> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMoniker>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMoniker __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMoniker(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMoniker __CreateInstance(global::Sample.IMoniker.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMoniker(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMoniker.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMoniker.__Internal));
            *(global::Sample.IMoniker.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMoniker(global::Sample.IMoniker.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMoniker(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ULARGE_INTEGER
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ULARGE_INTEGER> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ULARGE_INTEGER>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ULARGE_INTEGER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ULARGE_INTEGER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ULARGE_INTEGER __CreateInstance(global::Sample.ULARGE_INTEGER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ULARGE_INTEGER(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ULARGE_INTEGER.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ULARGE_INTEGER.__Internal));
            *(global::Sample.ULARGE_INTEGER.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ULARGE_INTEGER(global::Sample.ULARGE_INTEGER.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ULARGE_INTEGER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IBindCtx
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBindCtx> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBindCtx>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IBindCtx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IBindCtx(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IBindCtx __CreateInstance(global::Sample.IBindCtx.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IBindCtx(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IBindCtx.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IBindCtx.__Internal));
            *(global::Sample.IBindCtx.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IBindCtx(global::Sample.IBindCtx.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IBindCtx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IRunningObjectTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRunningObjectTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRunningObjectTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IRunningObjectTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IRunningObjectTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IRunningObjectTable __CreateInstance(global::Sample.IRunningObjectTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IRunningObjectTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IRunningObjectTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IRunningObjectTable.__Internal));
            *(global::Sample.IRunningObjectTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IRunningObjectTable(global::Sample.IRunningObjectTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IRunningObjectTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumMoniker
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumMoniker> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumMoniker>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumMoniker __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumMoniker(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumMoniker __CreateInstance(global::Sample.IEnumMoniker.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumMoniker(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumMoniker.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumMoniker.__Internal));
            *(global::Sample.IEnumMoniker.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumMoniker(global::Sample.IEnumMoniker.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumMoniker(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumMonikerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumMonikerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumMonikerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumMonikerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumMonikerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumMonikerVtbl __CreateInstance(global::Sample.IEnumMonikerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumMonikerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumMonikerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumMonikerVtbl.__Internal));
            *(global::Sample.IEnumMonikerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumMonikerVtbl(global::Sample.IEnumMonikerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumMonikerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IRunningObjectTableVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRunningObjectTableVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRunningObjectTableVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IRunningObjectTableVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IRunningObjectTableVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IRunningObjectTableVtbl __CreateInstance(global::Sample.IRunningObjectTableVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IRunningObjectTableVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IRunningObjectTableVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IRunningObjectTableVtbl.__Internal));
            *(global::Sample.IRunningObjectTableVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IRunningObjectTableVtbl(global::Sample.IRunningObjectTableVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IRunningObjectTableVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumString
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumString>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumString(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumString __CreateInstance(global::Sample.IEnumString.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumString(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumString.__Internal));
            *(global::Sample.IEnumString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumString(global::Sample.IEnumString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumStringVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumStringVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumStringVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumStringVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumStringVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumStringVtbl __CreateInstance(global::Sample.IEnumStringVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumStringVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumStringVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumStringVtbl.__Internal));
            *(global::Sample.IEnumStringVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumStringVtbl(global::Sample.IEnumStringVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumStringVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IBindCtxVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBindCtxVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBindCtxVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IBindCtxVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IBindCtxVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IBindCtxVtbl __CreateInstance(global::Sample.IBindCtxVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IBindCtxVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IBindCtxVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IBindCtxVtbl.__Internal));
            *(global::Sample.IBindCtxVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IBindCtxVtbl(global::Sample.IBindCtxVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IBindCtxVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMonikerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMonikerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMonikerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMonikerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMonikerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMonikerVtbl __CreateInstance(global::Sample.IMonikerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMonikerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMonikerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMonikerVtbl.__Internal));
            *(global::Sample.IMonikerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMonikerVtbl(global::Sample.IMonikerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMonikerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IAdviseSinkVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAdviseSinkVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAdviseSinkVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IAdviseSinkVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IAdviseSinkVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IAdviseSinkVtbl __CreateInstance(global::Sample.IAdviseSinkVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IAdviseSinkVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IAdviseSinkVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IAdviseSinkVtbl.__Internal));
            *(global::Sample.IAdviseSinkVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IAdviseSinkVtbl(global::Sample.IAdviseSinkVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IAdviseSinkVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumSTATDATA
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumSTATDATA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumSTATDATA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumSTATDATA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumSTATDATA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumSTATDATA __CreateInstance(global::Sample.IEnumSTATDATA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumSTATDATA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumSTATDATA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumSTATDATA.__Internal));
            *(global::Sample.IEnumSTATDATA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumSTATDATA(global::Sample.IEnumSTATDATA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumSTATDATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagSTATDATA
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSTATDATA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSTATDATA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagSTATDATA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagSTATDATA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagSTATDATA __CreateInstance(global::Sample.TagSTATDATA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagSTATDATA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagSTATDATA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagSTATDATA.__Internal));
            *(global::Sample.TagSTATDATA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagSTATDATA(global::Sample.TagSTATDATA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagSTATDATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumSTATDATAVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumSTATDATAVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumSTATDATAVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumSTATDATAVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumSTATDATAVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumSTATDATAVtbl __CreateInstance(global::Sample.IEnumSTATDATAVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumSTATDATAVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumSTATDATAVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumSTATDATAVtbl.__Internal));
            *(global::Sample.IEnumSTATDATAVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumSTATDATAVtbl(global::Sample.IEnumSTATDATAVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumSTATDATAVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDataObjectVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDataObjectVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDataObjectVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDataObjectVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDataObjectVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDataObjectVtbl __CreateInstance(global::Sample.IDataObjectVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDataObjectVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDataObjectVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDataObjectVtbl.__Internal));
            *(global::Sample.IDataObjectVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDataObjectVtbl(global::Sample.IDataObjectVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDataObjectVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagVARIANT
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagVARIANT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagVARIANT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagVARIANT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagVARIANT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagVARIANT __CreateInstance(global::Sample.TagVARIANT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagVARIANT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagVARIANT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagVARIANT.__Internal));
            *(global::Sample.TagVARIANT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagVARIANT(global::Sample.TagVARIANT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagVARIANT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagTYPEDESC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTYPEDESC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTYPEDESC>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagTYPEDESC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagTYPEDESC(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagTYPEDESC __CreateInstance(global::Sample.TagTYPEDESC.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagTYPEDESC(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagTYPEDESC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagTYPEDESC.__Internal));
            *(global::Sample.TagTYPEDESC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagTYPEDESC(global::Sample.TagTYPEDESC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagTYPEDESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagARRAYDESC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagARRAYDESC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagARRAYDESC>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagARRAYDESC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagARRAYDESC(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagARRAYDESC __CreateInstance(global::Sample.TagARRAYDESC.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagARRAYDESC(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagARRAYDESC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagARRAYDESC.__Internal));
            *(global::Sample.TagARRAYDESC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagARRAYDESC(global::Sample.TagARRAYDESC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagARRAYDESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OLESTREAMVTBL
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OLESTREAMVTBL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OLESTREAMVTBL>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OLESTREAMVTBL __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OLESTREAMVTBL(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OLESTREAMVTBL __CreateInstance(global::Sample.OLESTREAMVTBL.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OLESTREAMVTBL(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OLESTREAMVTBL.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OLESTREAMVTBL.__Internal));
            *(global::Sample.OLESTREAMVTBL.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OLESTREAMVTBL(global::Sample.OLESTREAMVTBL.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OLESTREAMVTBL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ExceptionVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ExceptionVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ExceptionVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ExceptionVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ExceptionVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ExceptionVtbl __CreateInstance(global::Sample.ExceptionVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ExceptionVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ExceptionVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ExceptionVtbl.__Internal));
            *(global::Sample.ExceptionVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ExceptionVtbl(global::Sample.ExceptionVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ExceptionVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumUnknown
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumUnknown> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumUnknown>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumUnknown __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumUnknown(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumUnknown __CreateInstance(global::Sample.IEnumUnknown.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumUnknown(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumUnknown.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumUnknown.__Internal));
            *(global::Sample.IEnumUnknown.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumUnknown(global::Sample.IEnumUnknown.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumUnknown(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumUnknownVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumUnknownVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumUnknownVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumUnknownVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumUnknownVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumUnknownVtbl __CreateInstance(global::Sample.IEnumUnknownVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumUnknownVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumUnknownVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumUnknownVtbl.__Internal));
            *(global::Sample.IEnumUnknownVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumUnknownVtbl(global::Sample.IEnumUnknownVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumUnknownVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleContainerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleContainerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleContainerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleContainerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleContainerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleContainerVtbl __CreateInstance(global::Sample.IOleContainerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleContainerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleContainerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleContainerVtbl.__Internal));
            *(global::Sample.IOleContainerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleContainerVtbl(global::Sample.IOleContainerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleContainerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagPROPVARIANT
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPROPVARIANT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPROPVARIANT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPROPVARIANT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPROPVARIANT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPROPVARIANT __CreateInstance(global::Sample.TagPROPVARIANT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPROPVARIANT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPROPVARIANT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPROPVARIANT.__Internal));
            *(global::Sample.TagPROPVARIANT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPROPVARIANT(global::Sample.TagPROPVARIANT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPROPVARIANT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RTL_CRITICAL_SECTION_DEBUG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RTL_CRITICAL_SECTION_DEBUG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RTL_CRITICAL_SECTION_DEBUG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RTL_CRITICAL_SECTION_DEBUG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RTL_CRITICAL_SECTION_DEBUG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RTL_CRITICAL_SECTION_DEBUG __CreateInstance(global::Sample.RTL_CRITICAL_SECTION_DEBUG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RTL_CRITICAL_SECTION_DEBUG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RTL_CRITICAL_SECTION_DEBUG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RTL_CRITICAL_SECTION_DEBUG.__Internal));
            *(global::Sample.RTL_CRITICAL_SECTION_DEBUG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RTL_CRITICAL_SECTION_DEBUG(global::Sample.RTL_CRITICAL_SECTION_DEBUG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RTL_CRITICAL_SECTION_DEBUG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TurbineDebugVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TurbineDebugVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TurbineDebugVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TurbineDebugVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TurbineDebugVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TurbineDebugVtbl __CreateInstance(global::Sample.TurbineDebugVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TurbineDebugVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TurbineDebugVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TurbineDebugVtbl.__Internal));
            *(global::Sample.TurbineDebugVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TurbineDebugVtbl(global::Sample.TurbineDebugVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TurbineDebugVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WireSAFEARRAY
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WireSAFEARRAY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WireSAFEARRAY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.WireSAFEARRAY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.WireSAFEARRAY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.WireSAFEARRAY __CreateInstance(global::Sample.WireSAFEARRAY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.WireSAFEARRAY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.WireSAFEARRAY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.WireSAFEARRAY.__Internal));
            *(global::Sample.WireSAFEARRAY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WireSAFEARRAY(global::Sample.WireSAFEARRAY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WireSAFEARRAY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WireVARIANT
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WireVARIANT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WireVARIANT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.WireVARIANT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.WireVARIANT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.WireVARIANT __CreateInstance(global::Sample.WireVARIANT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.WireVARIANT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.WireVARIANT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.WireVARIANT.__Internal));
            *(global::Sample.WireVARIANT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WireVARIANT(global::Sample.WireVARIANT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WireVARIANT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleClientSite
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleClientSite> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleClientSite>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleClientSite __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleClientSite(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleClientSite __CreateInstance(global::Sample.IOleClientSite.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleClientSite(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleClientSite.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleClientSite.__Internal));
            *(global::Sample.IOleClientSite.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleClientSite(global::Sample.IOleClientSite.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleClientSite(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleClientSiteVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleClientSiteVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleClientSiteVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleClientSiteVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleClientSiteVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleClientSiteVtbl __CreateInstance(global::Sample.IOleClientSiteVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleClientSiteVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleClientSiteVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleClientSiteVtbl.__Internal));
            *(global::Sample.IOleClientSiteVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleClientSiteVtbl(global::Sample.IOleClientSiteVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleClientSiteVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumOLEVERB
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumOLEVERB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumOLEVERB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumOLEVERB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumOLEVERB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumOLEVERB __CreateInstance(global::Sample.IEnumOLEVERB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumOLEVERB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumOLEVERB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumOLEVERB.__Internal));
            *(global::Sample.IEnumOLEVERB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumOLEVERB(global::Sample.IEnumOLEVERB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumOLEVERB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IEnumOLEVERBVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumOLEVERBVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IEnumOLEVERBVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IEnumOLEVERBVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IEnumOLEVERBVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IEnumOLEVERBVtbl __CreateInstance(global::Sample.IEnumOLEVERBVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IEnumOLEVERBVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IEnumOLEVERBVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IEnumOLEVERBVtbl.__Internal));
            *(global::Sample.IEnumOLEVERBVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IEnumOLEVERBVtbl(global::Sample.IEnumOLEVERBVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IEnumOLEVERBVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleObjectVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleObjectVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleObjectVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleObjectVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleObjectVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleObjectVtbl __CreateInstance(global::Sample.IOleObjectVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleObjectVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleObjectVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleObjectVtbl.__Internal));
            *(global::Sample.IOleObjectVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleObjectVtbl(global::Sample.IOleObjectVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleObjectVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArchiveVersionRowVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveVersionRowVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArchiveVersionRowVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArchiveVersionRowVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveVersionRowVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArchiveVersionRowVtbl __CreateInstance(global::Sample.ArchiveVersionRowVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArchiveVersionRowVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArchiveVersionRowVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArchiveVersionRowVtbl.__Internal));
            *(global::Sample.ArchiveVersionRowVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArchiveVersionRowVtbl(global::Sample.ArchiveVersionRowVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArchiveVersionRowVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CStopWatchVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CStopWatchVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CStopWatchVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CStopWatchVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CStopWatchVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CStopWatchVtbl __CreateInstance(global::Sample.CStopWatchVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CStopWatchVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CStopWatchVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CStopWatchVtbl.__Internal));
            *(global::Sample.CStopWatchVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CStopWatchVtbl(global::Sample.CStopWatchVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CStopWatchVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PackObjVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PackObjVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PackObjVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PackObjVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PackObjVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PackObjVtbl __CreateInstance(global::Sample.PackObjVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PackObjVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PackObjVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PackObjVtbl.__Internal));
            *(global::Sample.PackObjVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PackObjVtbl(global::Sample.PackObjVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PackObjVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArgumentParserCommandLineArgList
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArgumentParserCommandLineArgList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArgumentParserCommandLineArgList>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArgumentParserCommandLineArgList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArgumentParserCommandLineArgList(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArgumentParserCommandLineArgList __CreateInstance(global::Sample.ArgumentParserCommandLineArgList.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArgumentParserCommandLineArgList(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArgumentParserCommandLineArgList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArgumentParserCommandLineArgList.__Internal));
            *(global::Sample.ArgumentParserCommandLineArgList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArgumentParserCommandLineArgList(global::Sample.ArgumentParserCommandLineArgList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArgumentParserCommandLineArgList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArgumentParserVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArgumentParserVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArgumentParserVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArgumentParserVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArgumentParserVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArgumentParserVtbl __CreateInstance(global::Sample.ArgumentParserVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArgumentParserVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArgumentParserVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArgumentParserVtbl.__Internal));
            *(global::Sample.ArgumentParserVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArgumentParserVtbl(global::Sample.ArgumentParserVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArgumentParserVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IAsyncHttpClientListenerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAsyncHttpClientListenerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAsyncHttpClientListenerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IAsyncHttpClientListenerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IAsyncHttpClientListenerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IAsyncHttpClientListenerVtbl __CreateInstance(global::Sample.IAsyncHttpClientListenerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IAsyncHttpClientListenerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IAsyncHttpClientListenerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IAsyncHttpClientListenerVtbl.__Internal));
            *(global::Sample.IAsyncHttpClientListenerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IAsyncHttpClientListenerVtbl(global::Sample.IAsyncHttpClientListenerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IAsyncHttpClientListenerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CRT_CRITICAL_SECTION
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRT_CRITICAL_SECTION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRT_CRITICAL_SECTION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRT_CRITICAL_SECTION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRT_CRITICAL_SECTION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRT_CRITICAL_SECTION __CreateInstance(global::Sample.CRT_CRITICAL_SECTION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRT_CRITICAL_SECTION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRT_CRITICAL_SECTION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRT_CRITICAL_SECTION.__Internal));
            *(global::Sample.CRT_CRITICAL_SECTION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRT_CRITICAL_SECTION(global::Sample.CRT_CRITICAL_SECTION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRT_CRITICAL_SECTION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IosVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IosVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IosVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IosVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IosVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IosVtbl __CreateInstance(global::Sample.IosVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IosVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IosVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IosVtbl.__Internal));
            *(global::Sample.IosVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IosVtbl(global::Sample.IosVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IosVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Streambuf
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Streambuf> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Streambuf>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Streambuf __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Streambuf(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Streambuf __CreateInstance(global::Sample.Streambuf.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Streambuf(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Streambuf.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Streambuf.__Internal));
            *(global::Sample.Streambuf.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Streambuf(global::Sample.Streambuf.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Streambuf(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StreambufVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StreambufVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StreambufVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StreambufVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StreambufVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StreambufVtbl __CreateInstance(global::Sample.StreambufVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StreambufVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StreambufVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StreambufVtbl.__Internal));
            *(global::Sample.StreambufVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StreambufVtbl(global::Sample.StreambufVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StreambufVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Ostream
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ostream> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ostream>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Ostream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Ostream(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Ostream __CreateInstance(global::Sample.Ostream.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Ostream(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Ostream.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Ostream.__Internal));
            *(global::Sample.Ostream.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Ostream(global::Sample.Ostream.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Ostream(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class STL_localeFacetVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STL_localeFacetVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STL_localeFacetVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.STL_localeFacetVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.STL_localeFacetVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.STL_localeFacetVtbl __CreateInstance(global::Sample.STL_localeFacetVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.STL_localeFacetVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.STL_localeFacetVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.STL_localeFacetVtbl.__Internal));
            *(global::Sample.STL_localeFacetVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private STL_localeFacetVtbl(global::Sample.STL_localeFacetVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected STL_localeFacetVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HttpClientImplementationVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HttpClientImplementationVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HttpClientImplementationVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HttpClientImplementationVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HttpClientImplementationVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HttpClientImplementationVtbl __CreateInstance(global::Sample.HttpClientImplementationVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HttpClientImplementationVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HttpClientImplementationVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HttpClientImplementationVtbl.__Internal));
            *(global::Sample.HttpClientImplementationVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HttpClientImplementationVtbl(global::Sample.HttpClientImplementationVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HttpClientImplementationVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PortalThreadVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalThreadVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalThreadVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PortalThreadVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PortalThreadVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PortalThreadVtbl __CreateInstance(global::Sample.PortalThreadVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PortalThreadVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PortalThreadVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PortalThreadVtbl.__Internal));
            *(global::Sample.PortalThreadVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PortalThreadVtbl(global::Sample.PortalThreadVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PortalThreadVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SharedCriticalSectionVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SharedCriticalSectionVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SharedCriticalSectionVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SharedCriticalSectionVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SharedCriticalSectionVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SharedCriticalSectionVtbl __CreateInstance(global::Sample.SharedCriticalSectionVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SharedCriticalSectionVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SharedCriticalSectionVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SharedCriticalSectionVtbl.__Internal));
            *(global::Sample.SharedCriticalSectionVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SharedCriticalSectionVtbl(global::Sample.SharedCriticalSectionVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SharedCriticalSectionVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IAsyncHttpClientVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAsyncHttpClientVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAsyncHttpClientVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IAsyncHttpClientVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IAsyncHttpClientVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IAsyncHttpClientVtbl __CreateInstance(global::Sample.IAsyncHttpClientVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IAsyncHttpClientVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IAsyncHttpClientVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IAsyncHttpClientVtbl.__Internal));
            *(global::Sample.IAsyncHttpClientVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IAsyncHttpClientVtbl(global::Sample.IAsyncHttpClientVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IAsyncHttpClientVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HttpClientVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HttpClientVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HttpClientVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HttpClientVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HttpClientVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HttpClientVtbl __CreateInstance(global::Sample.HttpClientVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HttpClientVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HttpClientVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HttpClientVtbl.__Internal));
            *(global::Sample.HttpClientVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HttpClientVtbl(global::Sample.HttpClientVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HttpClientVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPCommand
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPCommand>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPCommand(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPCommand __CreateInstance(global::Sample.GRPCommand.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPCommand(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPCommand.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPCommand.__Internal));
            *(global::Sample.GRPCommand.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPCommand(global::Sample.GRPCommand.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPCommand(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPNoArgsCommand
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPNoArgsCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPNoArgsCommand>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPNoArgsCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPNoArgsCommand(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPNoArgsCommand __CreateInstance(global::Sample.GRPNoArgsCommand.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPNoArgsCommand(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPNoArgsCommand.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPNoArgsCommand.__Internal));
            *(global::Sample.GRPNoArgsCommand.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPNoArgsCommand(global::Sample.GRPNoArgsCommand.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPNoArgsCommand(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPWithArgsCommand
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPWithArgsCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPWithArgsCommand>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPWithArgsCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPWithArgsCommand(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPWithArgsCommand __CreateInstance(global::Sample.GRPWithArgsCommand.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPWithArgsCommand(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPWithArgsCommand.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPWithArgsCommand.__Internal));
            *(global::Sample.GRPWithArgsCommand.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPWithArgsCommand(global::Sample.GRPWithArgsCommand.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPWithArgsCommand(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPObject __CreateInstance(global::Sample.GRPObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPObject.__Internal));
            *(global::Sample.GRPObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPObject(global::Sample.GRPObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPMetaDataObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPMetaDataObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPMetaDataObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPMetaDataObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPMetaDataObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPMetaDataObject __CreateInstance(global::Sample.GRPMetaDataObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPMetaDataObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPMetaDataObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPMetaDataObject.__Internal));
            *(global::Sample.GRPMetaDataObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPMetaDataObject(global::Sample.GRPMetaDataObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPMetaDataObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPVariableObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPVariableObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPVariableObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPVariableObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPVariableObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPVariableObject __CreateInstance(global::Sample.GRPVariableObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPVariableObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPVariableObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPVariableObject.__Internal));
            *(global::Sample.GRPVariableObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPVariableObject(global::Sample.GRPVariableObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPVariableObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPShadowVariableObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPShadowVariableObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPShadowVariableObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPShadowVariableObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPShadowVariableObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPShadowVariableObject __CreateInstance(global::Sample.GRPShadowVariableObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPShadowVariableObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPShadowVariableObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPShadowVariableObject.__Internal));
            *(global::Sample.GRPShadowVariableObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPShadowVariableObject(global::Sample.GRPShadowVariableObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPShadowVariableObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPTypedVariableObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPTypedVariableObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPTypedVariableObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPTypedVariableObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPTypedVariableObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPTypedVariableObject __CreateInstance(global::Sample.GRPTypedVariableObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPTypedVariableObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPTypedVariableObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPTypedVariableObject.__Internal));
            *(global::Sample.GRPTypedVariableObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPTypedVariableObject(global::Sample.GRPTypedVariableObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPTypedVariableObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GRPGenericVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPGenericVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GRPGenericVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GRPGenericVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GRPGenericVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GRPGenericVtbl __CreateInstance(global::Sample.GRPGenericVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GRPGenericVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GRPGenericVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GRPGenericVtbl.__Internal));
            *(global::Sample.GRPGenericVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GRPGenericVtbl(global::Sample.GRPGenericVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GRPGenericVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IConsoleCallbackObjectVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IConsoleCallbackObjectVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IConsoleCallbackObjectVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IConsoleCallbackObjectVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IConsoleCallbackObjectVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IConsoleCallbackObjectVtbl __CreateInstance(global::Sample.IConsoleCallbackObjectVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IConsoleCallbackObjectVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IConsoleCallbackObjectVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IConsoleCallbackObjectVtbl.__Internal));
            *(global::Sample.IConsoleCallbackObjectVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IConsoleCallbackObjectVtbl(global::Sample.IConsoleCallbackObjectVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IConsoleCallbackObjectVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IInputActionCallback
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IInputActionCallback> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IInputActionCallback>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IInputActionCallback __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IInputActionCallback(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IInputActionCallback __CreateInstance(global::Sample.IInputActionCallback.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IInputActionCallback(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IInputActionCallback.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IInputActionCallback.__Internal));
            *(global::Sample.IInputActionCallback.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IInputActionCallback(global::Sample.IInputActionCallback.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IInputActionCallback(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class QualifiedControl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualifiedControl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualifiedControl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.QualifiedControl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.QualifiedControl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.QualifiedControl __CreateInstance(global::Sample.QualifiedControl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.QualifiedControl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.QualifiedControl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.QualifiedControl.__Internal));
            *(global::Sample.QualifiedControl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QualifiedControl(global::Sample.QualifiedControl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QualifiedControl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class InputEvent
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InputEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InputEvent>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.InputEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.InputEvent(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.InputEvent __CreateInstance(global::Sample.InputEvent.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.InputEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.InputEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.InputEvent.__Internal));
            *(global::Sample.InputEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private InputEvent(global::Sample.InputEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InputEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IInputActionCallbackVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IInputActionCallbackVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IInputActionCallbackVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IInputActionCallbackVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IInputActionCallbackVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IInputActionCallbackVtbl __CreateInstance(global::Sample.IInputActionCallbackVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IInputActionCallbackVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IInputActionCallbackVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IInputActionCallbackVtbl.__Internal));
            *(global::Sample.IInputActionCallbackVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IInputActionCallbackVtbl(global::Sample.IInputActionCallbackVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IInputActionCallbackVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DBOCache
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBOCache> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBOCache>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DBOCache __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DBOCache(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DBOCache __CreateInstance(global::Sample.DBOCache.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DBOCache(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DBOCache.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DBOCache.__Internal));
            *(global::Sample.DBOCache.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DBOCache(global::Sample.DBOCache.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DBOCache(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PreprocHeader
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PreprocHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PreprocHeader>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PreprocHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PreprocHeader(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PreprocHeader __CreateInstance(global::Sample.PreprocHeader.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PreprocHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PreprocHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PreprocHeader.__Internal));
            *(global::Sample.PreprocHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PreprocHeader(global::Sample.PreprocHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PreprocHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DBOCacheVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBOCacheVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBOCacheVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DBOCacheVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DBOCacheVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DBOCacheVtbl __CreateInstance(global::Sample.DBOCacheVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DBOCacheVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DBOCacheVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DBOCacheVtbl.__Internal));
            *(global::Sample.DBOCacheVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DBOCacheVtbl(global::Sample.DBOCacheVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DBOCacheVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ActionMap
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionMap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionMap>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ActionMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ActionMap(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ActionMap __CreateInstance(global::Sample.ActionMap.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ActionMap(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ActionMap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ActionMap.__Internal));
            *(global::Sample.ActionMap.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ActionMap(global::Sample.ActionMap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ActionMap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CInputHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CInputHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CInputHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CInputHandler __CreateInstance(global::Sample.CInputHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CInputHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CInputHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CInputHandler.__Internal));
            *(global::Sample.CInputHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CInputHandler(global::Sample.CInputHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CInputHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CInputHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CInputHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CInputHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CInputHandlerVtbl __CreateInstance(global::Sample.CInputHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CInputHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CInputHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CInputHandlerVtbl.__Internal));
            *(global::Sample.CInputHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CInputHandlerVtbl(global::Sample.CInputHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CInputHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ICIDMVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ICIDMVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ICIDMVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ICIDMVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ICIDMVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ICIDMVtbl __CreateInstance(global::Sample.ICIDMVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ICIDMVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ICIDMVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ICIDMVtbl.__Internal));
            *(global::Sample.ICIDMVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ICIDMVtbl(global::Sample.ICIDMVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ICIDMVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DBObjSaveInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBObjSaveInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBObjSaveInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DBObjSaveInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DBObjSaveInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DBObjSaveInfo __CreateInstance(global::Sample.DBObjSaveInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DBObjSaveInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DBObjSaveInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DBObjSaveInfo.__Internal));
            *(global::Sample.DBObjSaveInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DBObjSaveInfo(global::Sample.DBObjSaveInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DBObjSaveInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDataGraphVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDataGraphVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDataGraphVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDataGraphVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDataGraphVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDataGraphVtbl __CreateInstance(global::Sample.IDataGraphVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDataGraphVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDataGraphVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDataGraphVtbl.__Internal));
            *(global::Sample.IDataGraphVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDataGraphVtbl(global::Sample.IDataGraphVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDataGraphVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AsyncCacheCallbackVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCallbackVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCallbackVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncCacheCallbackVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCallbackVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncCacheCallbackVtbl __CreateInstance(global::Sample.AsyncCacheCallbackVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCallbackVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncCacheCallbackVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncCacheCallbackVtbl.__Internal));
            *(global::Sample.AsyncCacheCallbackVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncCacheCallbackVtbl(global::Sample.AsyncCacheCallbackVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncCacheCallbackVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CachePack_t
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CachePack_t> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CachePack_t>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CachePack_t __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CachePack_t(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CachePack_t __CreateInstance(global::Sample.CachePack_t.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CachePack_t(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CachePack_t.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CachePack_t.__Internal));
            *(global::Sample.CachePack_t.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CachePack_t(global::Sample.CachePack_t.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CachePack_t(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AsyncCacheCAsyncRequest
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCAsyncRequest> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCAsyncRequest>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncCacheCAsyncRequest __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCAsyncRequest(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncCacheCAsyncRequest __CreateInstance(global::Sample.AsyncCacheCAsyncRequest.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCAsyncRequest(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncCacheCAsyncRequest.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncCacheCAsyncRequest.__Internal));
            *(global::Sample.AsyncCacheCAsyncRequest.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncCacheCAsyncRequest(global::Sample.AsyncCacheCAsyncRequest.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncCacheCAsyncRequest(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AsyncCacheCCallbackHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCCallbackHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCCallbackHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncCacheCCallbackHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCCallbackHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncCacheCCallbackHandler __CreateInstance(global::Sample.AsyncCacheCCallbackHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCCallbackHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncCacheCCallbackHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncCacheCCallbackHandler.__Internal));
            *(global::Sample.AsyncCacheCCallbackHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncCacheCCallbackHandler(global::Sample.AsyncCacheCCallbackHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncCacheCCallbackHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AsyncCacheCAsyncRequestCCallbackWrapper
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper __CreateInstance(global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper.__Internal));
            *(global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncCacheCAsyncRequestCCallbackWrapper(global::Sample.AsyncCacheCAsyncRequestCCallbackWrapper.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncCacheCAsyncRequestCCallbackWrapper(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncGetRequest
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncGetRequest> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncGetRequest>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncGetRequest __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncGetRequest(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncGetRequest __CreateInstance(global::Sample.CAsyncGetRequest.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncGetRequest(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncGetRequest.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncGetRequest.__Internal));
            *(global::Sample.CAsyncGetRequest.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncGetRequest(global::Sample.CAsyncGetRequest.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncGetRequest(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMostlyConsecutiveIntSet
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMostlyConsecutiveIntSet> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMostlyConsecutiveIntSet>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMostlyConsecutiveIntSet __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMostlyConsecutiveIntSet(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMostlyConsecutiveIntSet __CreateInstance(global::Sample.CMostlyConsecutiveIntSet.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMostlyConsecutiveIntSet(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMostlyConsecutiveIntSet.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMostlyConsecutiveIntSet.__Internal));
            *(global::Sample.CMostlyConsecutiveIntSet.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMostlyConsecutiveIntSet(global::Sample.CMostlyConsecutiveIntSet.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMostlyConsecutiveIntSet(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMostlyConsecutiveIntSetVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMostlyConsecutiveIntSetVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMostlyConsecutiveIntSetVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMostlyConsecutiveIntSetVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMostlyConsecutiveIntSetVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMostlyConsecutiveIntSetVtbl __CreateInstance(global::Sample.CMostlyConsecutiveIntSetVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMostlyConsecutiveIntSetVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMostlyConsecutiveIntSetVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMostlyConsecutiveIntSetVtbl.__Internal));
            *(global::Sample.CMostlyConsecutiveIntSetVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMostlyConsecutiveIntSetVtbl(global::Sample.CMostlyConsecutiveIntSetVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMostlyConsecutiveIntSetVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DiskConBaseVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskConBaseVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskConBaseVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DiskConBaseVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DiskConBaseVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DiskConBaseVtbl __CreateInstance(global::Sample.DiskConBaseVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DiskConBaseVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DiskConBaseVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DiskConBaseVtbl.__Internal));
            *(global::Sample.DiskConBaseVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DiskConBaseVtbl(global::Sample.DiskConBaseVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DiskConBaseVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LRUB_Info_t
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUB_Info_t> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUB_Info_t>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LRUB_Info_t __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LRUB_Info_t(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LRUB_Info_t __CreateInstance(global::Sample.LRUB_Info_t.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LRUB_Info_t(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LRUB_Info_t.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LRUB_Info_t.__Internal));
            *(global::Sample.LRUB_Info_t.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LRUB_Info_t(global::Sample.LRUB_Info_t.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LRUB_Info_t(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LRUB_Mem_t
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUB_Mem_t> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUB_Mem_t>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LRUB_Mem_t __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LRUB_Mem_t(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LRUB_Mem_t __CreateInstance(global::Sample.LRUB_Mem_t.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LRUB_Mem_t(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LRUB_Mem_t.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LRUB_Mem_t.__Internal));
            *(global::Sample.LRUB_Mem_t.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LRUB_Mem_t(global::Sample.LRUB_Mem_t.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LRUB_Mem_t(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LRU_List
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRU_List> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRU_List>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LRU_List __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LRU_List(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LRU_List __CreateInstance(global::Sample.LRU_List.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LRU_List(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LRU_List.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LRU_List.__Internal));
            *(global::Sample.LRU_List.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LRU_List(global::Sample.LRU_List.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LRU_List(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DiskController
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskController> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskController>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DiskController __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DiskController(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DiskController __CreateInstance(global::Sample.DiskController.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DiskController(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DiskController.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DiskController.__Internal));
            *(global::Sample.DiskController.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DiskController(global::Sample.DiskController.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DiskController(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncSaveRequest
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncSaveRequest> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncSaveRequest>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncSaveRequest __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncSaveRequest(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncSaveRequest __CreateInstance(global::Sample.CAsyncSaveRequest.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncSaveRequest(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncSaveRequest.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncSaveRequest.__Internal));
            *(global::Sample.CAsyncSaveRequest.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncSaveRequest(global::Sample.CAsyncSaveRequest.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncSaveRequest(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncPurgeRequest
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncPurgeRequest> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncPurgeRequest>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncPurgeRequest __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncPurgeRequest(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncPurgeRequest __CreateInstance(global::Sample.CAsyncPurgeRequest.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncPurgeRequest(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncPurgeRequest.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncPurgeRequest.__Internal));
            *(global::Sample.CAsyncPurgeRequest.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncPurgeRequest(global::Sample.CAsyncPurgeRequest.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncPurgeRequest(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AsyncCacheVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncCacheVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncCacheVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncCacheVtbl __CreateInstance(global::Sample.AsyncCacheVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncCacheVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncCacheVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncCacheVtbl.__Internal));
            *(global::Sample.AsyncCacheVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncCacheVtbl(global::Sample.AsyncCacheVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncCacheVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DeleteLeafTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DeleteLeafTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DeleteLeafTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DeleteLeafTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DeleteLeafTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DeleteLeafTransactInfo __CreateInstance(global::Sample.DeleteLeafTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DeleteLeafTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DeleteLeafTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DeleteLeafTransactInfo.__Internal));
            *(global::Sample.DeleteLeafTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DeleteLeafTransactInfo(global::Sample.DeleteLeafTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DeleteLeafTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DeleteInternalTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DeleteInternalTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DeleteInternalTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DeleteInternalTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DeleteInternalTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DeleteInternalTransactInfo __CreateInstance(global::Sample.DeleteInternalTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DeleteInternalTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DeleteInternalTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DeleteInternalTransactInfo.__Internal));
            *(global::Sample.DeleteInternalTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DeleteInternalTransactInfo(global::Sample.DeleteInternalTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DeleteInternalTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MergeNodesTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MergeNodesTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MergeNodesTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MergeNodesTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MergeNodesTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MergeNodesTransactInfo __CreateInstance(global::Sample.MergeNodesTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MergeNodesTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MergeNodesTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MergeNodesTransactInfo.__Internal));
            *(global::Sample.MergeNodesTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MergeNodesTransactInfo(global::Sample.MergeNodesTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MergeNodesTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UpdateObjectTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UpdateObjectTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UpdateObjectTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UpdateObjectTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UpdateObjectTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UpdateObjectTransactInfo __CreateInstance(global::Sample.UpdateObjectTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UpdateObjectTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UpdateObjectTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UpdateObjectTransactInfo.__Internal));
            *(global::Sample.UpdateObjectTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UpdateObjectTransactInfo(global::Sample.UpdateObjectTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UpdateObjectTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SplitNodeTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SplitNodeTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SplitNodeTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SplitNodeTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SplitNodeTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SplitNodeTransactInfo __CreateInstance(global::Sample.SplitNodeTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SplitNodeTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SplitNodeTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SplitNodeTransactInfo.__Internal));
            *(global::Sample.SplitNodeTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SplitNodeTransactInfo(global::Sample.SplitNodeTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SplitNodeTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RotateEntryTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RotateEntryTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RotateEntryTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RotateEntryTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RotateEntryTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RotateEntryTransactInfo __CreateInstance(global::Sample.RotateEntryTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RotateEntryTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RotateEntryTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RotateEntryTransactInfo.__Internal));
            *(global::Sample.RotateEntryTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RotateEntryTransactInfo(global::Sample.RotateEntryTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RotateEntryTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LRUExpandTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUExpandTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUExpandTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LRUExpandTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LRUExpandTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LRUExpandTransactInfo __CreateInstance(global::Sample.LRUExpandTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LRUExpandTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LRUExpandTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LRUExpandTransactInfo.__Internal));
            *(global::Sample.LRUExpandTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LRUExpandTransactInfo(global::Sample.LRUExpandTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LRUExpandTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LRUDeleteTransactInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUDeleteTransactInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LRUDeleteTransactInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LRUDeleteTransactInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LRUDeleteTransactInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LRUDeleteTransactInfo __CreateInstance(global::Sample.LRUDeleteTransactInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LRUDeleteTransactInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LRUDeleteTransactInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LRUDeleteTransactInfo.__Internal));
            *(global::Sample.LRUDeleteTransactInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LRUDeleteTransactInfo(global::Sample.LRUDeleteTransactInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LRUDeleteTransactInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DiskTransactInfoVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskTransactInfoVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DiskTransactInfoVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DiskTransactInfoVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DiskTransactInfoVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DiskTransactInfoVtbl __CreateInstance(global::Sample.DiskTransactInfoVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DiskTransactInfoVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DiskTransactInfoVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DiskTransactInfoVtbl.__Internal));
            *(global::Sample.DiskTransactInfoVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DiskTransactInfoVtbl(global::Sample.DiskTransactInfoVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DiskTransactInfoVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CryptoKey
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CryptoKey> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CryptoKey>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CryptoKey __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CryptoKey(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CryptoKey __CreateInstance(global::Sample.CryptoKey.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CryptoKey(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CryptoKey.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CryptoKey.__Internal));
            *(global::Sample.CryptoKey.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CryptoKey(global::Sample.CryptoKey.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CryptoKey(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MissingIterationVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MissingIterationVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MissingIterationVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MissingIterationVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MissingIterationVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MissingIterationVtbl __CreateInstance(global::Sample.MissingIterationVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MissingIterationVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MissingIterationVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MissingIterationVtbl.__Internal));
            *(global::Sample.MissingIterationVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MissingIterationVtbl(global::Sample.MissingIterationVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MissingIterationVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPluginManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPluginManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPluginManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPluginManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPluginManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPluginManager __CreateInstance(global::Sample.CPluginManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPluginManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPluginManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPluginManager.__Internal));
            *(global::Sample.CPluginManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPluginManager(global::Sample.CPluginManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPluginManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPluginPrototypeVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPluginPrototypeVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPluginPrototypeVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPluginPrototypeVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPluginPrototypeVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPluginPrototypeVtbl __CreateInstance(global::Sample.CPluginPrototypeVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPluginPrototypeVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPluginPrototypeVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPluginPrototypeVtbl.__Internal));
            *(global::Sample.CPluginPrototypeVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPluginPrototypeVtbl(global::Sample.CPluginPrototypeVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPluginPrototypeVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FakeMessageDataVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FakeMessageDataVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FakeMessageDataVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FakeMessageDataVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FakeMessageDataVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FakeMessageDataVtbl __CreateInstance(global::Sample.FakeMessageDataVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FakeMessageDataVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FakeMessageDataVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FakeMessageDataVtbl.__Internal));
            *(global::Sample.FakeMessageDataVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FakeMessageDataVtbl(global::Sample.FakeMessageDataVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FakeMessageDataVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMasterInputMap
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMasterInputMap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMasterInputMap>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMasterInputMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMasterInputMap(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMasterInputMap __CreateInstance(global::Sample.CMasterInputMap.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMasterInputMap(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMasterInputMap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMasterInputMap.__Internal));
            *(global::Sample.CMasterInputMap.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMasterInputMap(global::Sample.CMasterInputMap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMasterInputMap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CInputMap
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputMap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CInputMap>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CInputMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CInputMap(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CInputMap __CreateInstance(global::Sample.CInputMap.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CInputMap(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CInputMap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CInputMap.__Internal));
            *(global::Sample.CInputMap.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CInputMap(global::Sample.CInputMap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CInputMap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ActionState
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionState>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ActionState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ActionState(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ActionState __CreateInstance(global::Sample.ActionState.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ActionState(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ActionState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ActionState.__Internal));
            *(global::Sample.ActionState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ActionState(global::Sample.ActionState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ActionState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ActionStateSingleKeyInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionStateSingleKeyInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ActionStateSingleKeyInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ActionStateSingleKeyInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ActionStateSingleKeyInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ActionStateSingleKeyInfo __CreateInstance(global::Sample.ActionStateSingleKeyInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ActionStateSingleKeyInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ActionStateSingleKeyInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ActionStateSingleKeyInfo.__Internal));
            *(global::Sample.ActionStateSingleKeyInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ActionStateSingleKeyInfo(global::Sample.ActionStateSingleKeyInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ActionStateSingleKeyInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NoticeHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NoticeHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NoticeHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NoticeHandler __CreateInstance(global::Sample.NoticeHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NoticeHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NoticeHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NoticeHandler.__Internal));
            *(global::Sample.NoticeHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NoticeHandler(global::Sample.NoticeHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NoticeHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NoticeRegistrarVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeRegistrarVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeRegistrarVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NoticeRegistrarVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NoticeRegistrarVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NoticeRegistrarVtbl __CreateInstance(global::Sample.NoticeRegistrarVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NoticeRegistrarVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NoticeRegistrarVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NoticeRegistrarVtbl.__Internal));
            *(global::Sample.NoticeRegistrarVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NoticeRegistrarVtbl(global::Sample.NoticeRegistrarVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NoticeRegistrarVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CWeenieObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CWeenieObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CWeenieObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CWeenieObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CWeenieObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CWeenieObject __CreateInstance(global::Sample.CWeenieObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CWeenieObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CWeenieObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CWeenieObject.__Internal));
            *(global::Sample.CWeenieObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CWeenieObject(global::Sample.CWeenieObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CWeenieObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PropertyCollection
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PropertyCollection> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PropertyCollection>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PropertyCollection __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PropertyCollection(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PropertyCollection __CreateInstance(global::Sample.PropertyCollection.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PropertyCollection(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PropertyCollection.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PropertyCollection.__Internal));
            *(global::Sample.PropertyCollection.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PropertyCollection(global::Sample.PropertyCollection.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PropertyCollection(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PropertyCollectionVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PropertyCollectionVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PropertyCollectionVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PropertyCollectionVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PropertyCollectionVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PropertyCollectionVtbl __CreateInstance(global::Sample.PropertyCollectionVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PropertyCollectionVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PropertyCollectionVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PropertyCollectionVtbl.__Internal));
            *(global::Sample.PropertyCollectionVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PropertyCollectionVtbl(global::Sample.PropertyCollectionVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PropertyCollectionVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BasePropertyValue
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BasePropertyValue> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BasePropertyValue>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BasePropertyValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BasePropertyValue(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BasePropertyValue __CreateInstance(global::Sample.BasePropertyValue.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BasePropertyValue(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BasePropertyValue.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BasePropertyValue.__Internal));
            *(global::Sample.BasePropertyValue.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BasePropertyValue(global::Sample.BasePropertyValue.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BasePropertyValue(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BasePropertyDesc
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BasePropertyDesc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BasePropertyDesc>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BasePropertyDesc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BasePropertyDesc(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BasePropertyDesc __CreateInstance(global::Sample.BasePropertyDesc.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BasePropertyDesc(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BasePropertyDesc.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BasePropertyDesc.__Internal));
            *(global::Sample.BasePropertyDesc.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BasePropertyDesc(global::Sample.BasePropertyDesc.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BasePropertyDesc(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringInfoData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfoData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfoData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringInfoData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringInfoData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringInfoData __CreateInstance(global::Sample.StringInfoData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringInfoData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringInfoData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringInfoData.__Internal));
            *(global::Sample.StringInfoData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringInfoData(global::Sample.StringInfoData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringInfoData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringInfoDataVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfoDataVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfoDataVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringInfoDataVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringInfoDataVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringInfoDataVtbl __CreateInstance(global::Sample.StringInfoDataVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringInfoDataVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringInfoDataVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringInfoDataVtbl.__Internal));
            *(global::Sample.StringInfoDataVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringInfoDataVtbl(global::Sample.StringInfoDataVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringInfoDataVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringInfo __CreateInstance(global::Sample.StringInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringInfo.__Internal));
            *(global::Sample.StringInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringInfo(global::Sample.StringInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NoticeHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NoticeHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NoticeHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NoticeHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NoticeHandlerVtbl __CreateInstance(global::Sample.NoticeHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NoticeHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NoticeHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NoticeHandlerVtbl.__Internal));
            *(global::Sample.NoticeHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NoticeHandlerVtbl(global::Sample.NoticeHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NoticeHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CLostCell
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLostCell> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLostCell>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CLostCell __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CLostCell(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CLostCell __CreateInstance(global::Sample.CLostCell.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CLostCell(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CLostCell.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CLostCell.__Internal));
            *(global::Sample.CLostCell.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CLostCell(global::Sample.CLostCell.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CLostCell(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPhysicsObj
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysicsObj> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysicsObj>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPhysicsObj __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPhysicsObj(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPhysicsObj __CreateInstance(global::Sample.CPhysicsObj.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPhysicsObj(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPhysicsObj.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPhysicsObj.__Internal));
            *(global::Sample.CPhysicsObj.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPhysicsObj(global::Sample.CPhysicsObj.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPhysicsObj(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AFrame
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AFrame> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AFrame>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AFrame __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AFrame(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AFrame __CreateInstance(global::Sample.AFrame.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AFrame(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AFrame.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AFrame.__Internal));
            *(global::Sample.AFrame.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AFrame(global::Sample.AFrame.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AFrame(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAnimHook
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimHook> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimHook>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAnimHook __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAnimHook(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAnimHook __CreateInstance(global::Sample.CAnimHook.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAnimHook(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAnimHook.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAnimHook.__Internal));
            *(global::Sample.CAnimHook.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAnimHook(global::Sample.CAnimHook.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAnimHook(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAnimHookVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimHookVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimHookVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAnimHookVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAnimHookVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAnimHookVtbl __CreateInstance(global::Sample.CAnimHookVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAnimHookVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAnimHookVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAnimHookVtbl.__Internal));
            *(global::Sample.CAnimHookVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAnimHookVtbl(global::Sample.CAnimHookVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAnimHookVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AnimFrame
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AnimFrame> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AnimFrame>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AnimFrame __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AnimFrame(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AnimFrame __CreateInstance(global::Sample.AnimFrame.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AnimFrame(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AnimFrame.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AnimFrame.__Internal));
            *(global::Sample.AnimFrame.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AnimFrame(global::Sample.AnimFrame.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AnimFrame(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAnimation
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAnimation>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAnimation __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAnimation(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAnimation __CreateInstance(global::Sample.CAnimation.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAnimation(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAnimation.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAnimation.__Internal));
            *(global::Sample.CAnimation.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAnimation(global::Sample.CAnimation.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAnimation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AnimSequenceNode
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AnimSequenceNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AnimSequenceNode>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AnimSequenceNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AnimSequenceNode(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AnimSequenceNode __CreateInstance(global::Sample.AnimSequenceNode.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AnimSequenceNode(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AnimSequenceNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AnimSequenceNode.__Internal));
            *(global::Sample.AnimSequenceNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AnimSequenceNode(global::Sample.AnimSequenceNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AnimSequenceNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMotionTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMotionTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMotionTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMotionTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMotionTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMotionTable __CreateInstance(global::Sample.CMotionTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMotionTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMotionTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMotionTable.__Internal));
            *(global::Sample.CMotionTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMotionTable(global::Sample.CMotionTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMotionTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MotionList
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MotionList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MotionList>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MotionList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MotionList(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MotionList __CreateInstance(global::Sample.MotionList.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MotionList(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MotionList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MotionList.__Internal));
            *(global::Sample.MotionList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MotionList(global::Sample.MotionList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MotionList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MotionTableManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MotionTableManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MotionTableManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MotionTableManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MotionTableManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MotionTableManager __CreateInstance(global::Sample.MotionTableManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MotionTableManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MotionTableManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MotionTableManager.__Internal));
            *(global::Sample.MotionTableManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MotionTableManager(global::Sample.MotionTableManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MotionTableManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCylSphere
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCylSphere> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCylSphere>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCylSphere __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCylSphere(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCylSphere __CreateInstance(global::Sample.CCylSphere.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCylSphere(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCylSphere.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCylSphere.__Internal));
            *(global::Sample.CCylSphere.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCylSphere(global::Sample.CCylSphere.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCylSphere(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CSphere
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSphere> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSphere>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CSphere __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CSphere(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CSphere __CreateInstance(global::Sample.CSphere.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CSphere(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CSphere.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CSphere.__Internal));
            *(global::Sample.CSphere.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CSphere(global::Sample.CSphere.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSphere(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RGBColor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RGBColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RGBColor>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RGBColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RGBColor(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RGBColor __CreateInstance(global::Sample.RGBColor.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RGBColor(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RGBColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RGBColor.__Internal));
            *(global::Sample.RGBColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RGBColor(global::Sample.RGBColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RGBColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LIGHTINFO
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LIGHTINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LIGHTINFO __CreateInstance(global::Sample.LIGHTINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LIGHTINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LIGHTINFO.__Internal));
            *(global::Sample.LIGHTINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LIGHTINFO(global::Sample.LIGHTINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LIGHTINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CSetup
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSetup> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSetup>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CSetup __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CSetup(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CSetup __CreateInstance(global::Sample.CSetup.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CSetup(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CSetup.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CSetup.__Internal));
            *(global::Sample.CSetup.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CSetup(global::Sample.CSetup.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSetup(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GfxObjInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GfxObjInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GfxObjInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GfxObjInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GfxObjInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GfxObjInfo __CreateInstance(global::Sample.GfxObjInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GfxObjInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GfxObjInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GfxObjInfo.__Internal));
            *(global::Sample.GfxObjInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GfxObjInfo(global::Sample.GfxObjInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GfxObjInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GfxObjDegradeInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GfxObjDegradeInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GfxObjDegradeInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GfxObjDegradeInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GfxObjDegradeInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GfxObjDegradeInfo __CreateInstance(global::Sample.GfxObjDegradeInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GfxObjDegradeInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GfxObjDegradeInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GfxObjDegradeInfo.__Internal));
            *(global::Sample.GfxObjDegradeInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GfxObjDegradeInfo(global::Sample.GfxObjDegradeInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GfxObjDegradeInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMaterial
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMaterial> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMaterial>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMaterial __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMaterial(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMaterial __CreateInstance(global::Sample.CMaterial.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMaterial(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMaterial.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMaterial.__Internal));
            *(global::Sample.CMaterial.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMaterial(global::Sample.CMaterial.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMaterial(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsResourceVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GraphicsResourceVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GraphicsResourceVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GraphicsResourceVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GraphicsResourceVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GraphicsResourceVtbl __CreateInstance(global::Sample.GraphicsResourceVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GraphicsResourceVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GraphicsResourceVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GraphicsResourceVtbl.__Internal));
            *(global::Sample.GraphicsResourceVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsResourceVtbl(global::Sample.GraphicsResourceVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsResourceVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SurfaceWindowVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SurfaceWindowVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SurfaceWindowVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SurfaceWindowVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SurfaceWindowVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SurfaceWindowVtbl __CreateInstance(global::Sample.SurfaceWindowVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SurfaceWindowVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SurfaceWindowVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SurfaceWindowVtbl.__Internal));
            *(global::Sample.SurfaceWindowVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SurfaceWindowVtbl(global::Sample.SurfaceWindowVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SurfaceWindowVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderSurface
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderSurface> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderSurface>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderSurface __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderSurface(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderSurface __CreateInstance(global::Sample.RenderSurface.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderSurface(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderSurface.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderSurface.__Internal));
            *(global::Sample.RenderSurface.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderSurface(global::Sample.RenderSurface.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderSurface(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Palette
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Palette> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Palette>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Palette __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Palette(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Palette __CreateInstance(global::Sample.Palette.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Palette(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Palette.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Palette.__Internal));
            *(global::Sample.Palette.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Palette(global::Sample.Palette.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Palette(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDirect3DTexture9
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirect3DTexture9> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirect3DTexture9>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDirect3DTexture9 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDirect3DTexture9(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDirect3DTexture9 __CreateInstance(global::Sample.IDirect3DTexture9.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDirect3DTexture9(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDirect3DTexture9.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDirect3DTexture9.__Internal));
            *(global::Sample.IDirect3DTexture9.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDirect3DTexture9(global::Sample.IDirect3DTexture9.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDirect3DTexture9(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DBLevelInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBLevelInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DBLevelInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DBLevelInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DBLevelInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DBLevelInfo __CreateInstance(global::Sample.DBLevelInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DBLevelInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DBLevelInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DBLevelInfo.__Internal));
            *(global::Sample.DBLevelInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DBLevelInfo(global::Sample.DBLevelInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DBLevelInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderTexture
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderTexture> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderTexture>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderTexture __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderTexture(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderTexture __CreateInstance(global::Sample.RenderTexture.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderTexture(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderTexture.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderTexture.__Internal));
            *(global::Sample.RenderTexture.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderTexture(global::Sample.RenderTexture.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderTexture(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ImgTex
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ImgTex> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ImgTex>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ImgTex __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ImgTex(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ImgTex __CreateInstance(global::Sample.ImgTex.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ImgTex(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ImgTex.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ImgTex.__Internal));
            *(global::Sample.ImgTex.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImgTex(global::Sample.ImgTex.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImgTex(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CSurface
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSurface> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSurface>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CSurface __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CSurface(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CSurface __CreateInstance(global::Sample.CSurface.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CSurface(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CSurface.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CSurface.__Internal));
            *(global::Sample.CSurface.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CSurface(global::Sample.CSurface.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSurface(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CVertex
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CVertex> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CVertex>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CVertex __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CVertex(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CVertex __CreateInstance(global::Sample.CVertex.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CVertex(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CVertex.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CVertex.__Internal));
            *(global::Sample.CVertex.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CVertex(global::Sample.CVertex.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVertex(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Vec2Dscreen
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Vec2Dscreen> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Vec2Dscreen>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Vec2Dscreen __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Vec2Dscreen(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Vec2Dscreen __CreateInstance(global::Sample.Vec2Dscreen.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Vec2Dscreen(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Vec2Dscreen.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Vec2Dscreen.__Internal));
            *(global::Sample.Vec2Dscreen.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Vec2Dscreen(global::Sample.Vec2Dscreen.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Vec2Dscreen(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPolygon
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPolygon> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPolygon>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPolygon __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPolygon(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPolygon __CreateInstance(global::Sample.CPolygon.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPolygon(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPolygon.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPolygon.__Internal));
            *(global::Sample.CPolygon.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPolygon(global::Sample.CPolygon.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPolygon(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ID3DXMesh
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ID3DXMesh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ID3DXMesh>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ID3DXMesh __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ID3DXMesh(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ID3DXMesh __CreateInstance(global::Sample.ID3DXMesh.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ID3DXMesh(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ID3DXMesh.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ID3DXMesh.__Internal));
            *(global::Sample.ID3DXMesh.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ID3DXMesh(global::Sample.ID3DXMesh.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ID3DXMesh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ModifierRef
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ModifierRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ModifierRef>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ModifierRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ModifierRef(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ModifierRef __CreateInstance(global::Sample.ModifierRef.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ModifierRef(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ModifierRef.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ModifierRef.__Internal));
            *(global::Sample.ModifierRef.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ModifierRef(global::Sample.ModifierRef.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ModifierRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialField
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialField> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialField>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialField(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialField __CreateInstance(global::Sample.MaterialField.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialField(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialField.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialField.__Internal));
            *(global::Sample.MaterialField.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialField(global::Sample.MaterialField.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialField(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialProperty
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialProperty> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialProperty>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialProperty __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialProperty(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialProperty __CreateInstance(global::Sample.MaterialProperty.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialProperty(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialProperty.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialProperty.__Internal));
            *(global::Sample.MaterialProperty.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialProperty(global::Sample.MaterialProperty.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialProperty(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialModifier
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialModifier> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialModifier>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialModifier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialModifier(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialModifier __CreateInstance(global::Sample.MaterialModifier.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialModifier(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialModifier.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialModifier.__Internal));
            *(global::Sample.MaterialModifier.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialModifier(global::Sample.MaterialModifier.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialModifier(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ShaderResourceType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ShaderResourceType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ShaderResourceType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ShaderResourceType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ShaderResourceType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ShaderResourceType __CreateInstance(global::Sample.ShaderResourceType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ShaderResourceType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ShaderResourceType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ShaderResourceType.__Internal));
            *(global::Sample.ShaderResourceType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ShaderResourceType(global::Sample.ShaderResourceType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ShaderResourceType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LayerStage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerStage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerStage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LayerStage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LayerStage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LayerStage __CreateInstance(global::Sample.LayerStage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LayerStage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LayerStage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LayerStage.__Internal));
            *(global::Sample.LayerStage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LayerStage(global::Sample.LayerStage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LayerStage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LayerModifier
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerModifier> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerModifier>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LayerModifier __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LayerModifier(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LayerModifier __CreateInstance(global::Sample.LayerModifier.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LayerModifier(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LayerModifier.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LayerModifier.__Internal));
            *(global::Sample.LayerModifier.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LayerModifier(global::Sample.LayerModifier.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LayerModifier(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMaterial
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMaterial> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMaterial>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMaterial __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMaterial(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMaterial __CreateInstance(global::Sample.RenderMaterial.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMaterial(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMaterial.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMaterial.__Internal));
            *(global::Sample.RenderMaterial.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMaterial(global::Sample.RenderMaterial.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMaterial(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LayerModifierVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerModifierVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayerModifierVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LayerModifierVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LayerModifierVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LayerModifierVtbl __CreateInstance(global::Sample.LayerModifierVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LayerModifierVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LayerModifierVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LayerModifierVtbl.__Internal));
            *(global::Sample.LayerModifierVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LayerModifierVtbl(global::Sample.LayerModifierVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LayerModifierVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialLayer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialLayer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialLayer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialLayer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialLayer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialLayer __CreateInstance(global::Sample.MaterialLayer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialLayer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialLayer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialLayer.__Internal));
            *(global::Sample.MaterialLayer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialLayer(global::Sample.MaterialLayer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialLayer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialShaderConstant
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialShaderConstant> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialShaderConstant>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialShaderConstant __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialShaderConstant(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialShaderConstant __CreateInstance(global::Sample.MaterialShaderConstant.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialShaderConstant(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialShaderConstant.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialShaderConstant.__Internal));
            *(global::Sample.MaterialShaderConstant.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialShaderConstant(global::Sample.MaterialShaderConstant.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialShaderConstant(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MaterialInstance
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialInstance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MaterialInstance>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MaterialInstance __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MaterialInstance(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MaterialInstance __CreateInstance(global::Sample.MaterialInstance.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MaterialInstance(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MaterialInstance.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MaterialInstance.__Internal));
            *(global::Sample.MaterialInstance.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MaterialInstance(global::Sample.MaterialInstance.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaterialInstance(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshMaterialArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshMaterialArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshMaterialArray>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshMaterialArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshMaterialArray(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshMaterialArray __CreateInstance(global::Sample.RenderMeshMaterialArray.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshMaterialArray(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshMaterialArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshMaterialArray.__Internal));
            *(global::Sample.RenderMeshMaterialArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshMaterialArray(global::Sample.RenderMeshMaterialArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshMaterialArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderVertexBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderVertexBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderVertexBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderVertexBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderVertexBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderVertexBuffer __CreateInstance(global::Sample.RenderVertexBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderVertexBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderVertexBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderVertexBuffer.__Internal));
            *(global::Sample.RenderVertexBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderVertexBuffer(global::Sample.RenderVertexBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderVertexBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshVerticesArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshVerticesArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshVerticesArray>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshVerticesArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshVerticesArray(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshVerticesArray __CreateInstance(global::Sample.RenderMeshVerticesArray.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshVerticesArray(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshVerticesArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshVerticesArray.__Internal));
            *(global::Sample.RenderMeshVerticesArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshVerticesArray(global::Sample.RenderMeshVerticesArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshVerticesArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderIndexBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderIndexBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderIndexBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderIndexBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderIndexBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderIndexBuffer __CreateInstance(global::Sample.RenderIndexBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderIndexBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderIndexBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderIndexBuffer.__Internal));
            *(global::Sample.RenderIndexBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderIndexBuffer(global::Sample.RenderIndexBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderIndexBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderIndexBufferVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderIndexBufferVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderIndexBufferVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderIndexBufferVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderIndexBufferVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderIndexBufferVtbl __CreateInstance(global::Sample.RenderIndexBufferVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderIndexBufferVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderIndexBufferVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderIndexBufferVtbl.__Internal));
            *(global::Sample.RenderIndexBufferVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderIndexBufferVtbl(global::Sample.RenderIndexBufferVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderIndexBufferVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshIndicesArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshIndicesArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshIndicesArray>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshIndicesArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshIndicesArray(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshIndicesArray __CreateInstance(global::Sample.RenderMeshIndicesArray.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshIndicesArray(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshIndicesArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshIndicesArray.__Internal));
            *(global::Sample.RenderMeshIndicesArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshIndicesArray(global::Sample.RenderMeshIndicesArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshIndicesArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMesh
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMesh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMesh>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMesh __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMesh(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMesh __CreateInstance(global::Sample.RenderMesh.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMesh(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMesh.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMesh.__Internal));
            *(global::Sample.RenderMesh.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMesh(global::Sample.RenderMesh.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMesh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshBatch
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshBatch> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshBatch>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshBatch __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshBatch(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshBatch __CreateInstance(global::Sample.RenderMeshBatch.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshBatch(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshBatch.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshBatch.__Internal));
            *(global::Sample.RenderMeshBatch.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshBatch(global::Sample.RenderMeshBatch.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshBatch(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshFragmentTopologyTopVertexType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopVertexType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopVertexType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshFragmentTopologyTopVertexType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopVertexType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshFragmentTopologyTopVertexType __CreateInstance(global::Sample.RenderMeshFragmentTopologyTopVertexType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopVertexType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshFragmentTopologyTopVertexType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshFragmentTopologyTopVertexType.__Internal));
            *(global::Sample.RenderMeshFragmentTopologyTopVertexType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshFragmentTopologyTopVertexType(global::Sample.RenderMeshFragmentTopologyTopVertexType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshFragmentTopologyTopVertexType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshFragmentTopologyTopTriangleType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopTriangleType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopTriangleType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshFragmentTopologyTopTriangleType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopTriangleType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshFragmentTopologyTopTriangleType __CreateInstance(global::Sample.RenderMeshFragmentTopologyTopTriangleType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopTriangleType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshFragmentTopologyTopTriangleType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshFragmentTopologyTopTriangleType.__Internal));
            *(global::Sample.RenderMeshFragmentTopologyTopTriangleType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshFragmentTopologyTopTriangleType(global::Sample.RenderMeshFragmentTopologyTopTriangleType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshFragmentTopologyTopTriangleType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshFragmentTopologyTopEdgeType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopEdgeType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopologyTopEdgeType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshFragmentTopologyTopEdgeType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopEdgeType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshFragmentTopologyTopEdgeType __CreateInstance(global::Sample.RenderMeshFragmentTopologyTopEdgeType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopologyTopEdgeType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshFragmentTopologyTopEdgeType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshFragmentTopologyTopEdgeType.__Internal));
            *(global::Sample.RenderMeshFragmentTopologyTopEdgeType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshFragmentTopologyTopEdgeType(global::Sample.RenderMeshFragmentTopologyTopEdgeType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshFragmentTopologyTopEdgeType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshFragmentTopology
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopology> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragmentTopology>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshFragmentTopology __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopology(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshFragmentTopology __CreateInstance(global::Sample.RenderMeshFragmentTopology.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragmentTopology(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshFragmentTopology.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshFragmentTopology.__Internal));
            *(global::Sample.RenderMeshFragmentTopology.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshFragmentTopology(global::Sample.RenderMeshFragmentTopology.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshFragmentTopology(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderMeshFragment
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragment> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderMeshFragment>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderMeshFragment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragment(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderMeshFragment __CreateInstance(global::Sample.RenderMeshFragment.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderMeshFragment(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderMeshFragment.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderMeshFragment.__Internal));
            *(global::Sample.RenderMeshFragment.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderMeshFragment(global::Sample.RenderMeshFragment.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderMeshFragment(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MeshBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MeshBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MeshBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MeshBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MeshBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MeshBuffer __CreateInstance(global::Sample.MeshBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MeshBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MeshBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MeshBuffer.__Internal));
            *(global::Sample.MeshBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MeshBuffer(global::Sample.MeshBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MeshBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BSPNODE
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPNODE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPNODE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BSPNODE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BSPNODE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BSPNODE __CreateInstance(global::Sample.BSPNODE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BSPNODE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BSPNODE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BSPNODE.__Internal));
            *(global::Sample.BSPNODE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BSPNODE(global::Sample.BSPNODE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BSPNODE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Ray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ray>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Ray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Ray(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Ray __CreateInstance(global::Sample.Ray.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Ray(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Ray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Ray.__Internal));
            *(global::Sample.Ray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Ray(global::Sample.Ray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Ray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPhysicsPart
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysicsPart> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysicsPart>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPhysicsPart __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPhysicsPart(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPhysicsPart __CreateInstance(global::Sample.CPhysicsPart.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPhysicsPart(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPhysicsPart.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPhysicsPart.__Internal));
            *(global::Sample.CPhysicsPart.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPhysicsPart(global::Sample.CPhysicsPart.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPhysicsPart(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ClipPlane
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClipPlane> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClipPlane>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ClipPlane __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ClipPlane(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ClipPlane __CreateInstance(global::Sample.ClipPlane.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ClipPlane(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ClipPlane.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ClipPlane.__Internal));
            *(global::Sample.ClipPlane.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClipPlane(global::Sample.ClipPlane.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClipPlane(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ClipPlaneList
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClipPlaneList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClipPlaneList>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ClipPlaneList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ClipPlaneList(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ClipPlaneList __CreateInstance(global::Sample.ClipPlaneList.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ClipPlaneList(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ClipPlaneList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ClipPlaneList.__Internal));
            *(global::Sample.ClipPlaneList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClipPlaneList(global::Sample.ClipPlaneList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClipPlaneList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPartCellVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPartCellVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPartCellVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPartCellVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPartCellVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPartCellVtbl __CreateInstance(global::Sample.CPartCellVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPartCellVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPartCellVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPartCellVtbl.__Internal));
            *(global::Sample.CPartCellVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPartCellVtbl(global::Sample.CPartCellVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPartCellVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CShadowPart
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CShadowPart> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CShadowPart>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CShadowPart __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CShadowPart(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CShadowPart __CreateInstance(global::Sample.CShadowPart.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CShadowPart(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CShadowPart.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CShadowPart.__Internal));
            *(global::Sample.CShadowPart.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CShadowPart(global::Sample.CShadowPart.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CShadowPart(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LIGHTOBJ
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTOBJ> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTOBJ>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LIGHTOBJ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTOBJ(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LIGHTOBJ __CreateInstance(global::Sample.LIGHTOBJ.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTOBJ(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LIGHTOBJ.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LIGHTOBJ.__Internal));
            *(global::Sample.LIGHTOBJ.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LIGHTOBJ(global::Sample.LIGHTOBJ.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LIGHTOBJ(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CObjCell
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CObjCell> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CObjCell>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CObjCell __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CObjCell(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CObjCell __CreateInstance(global::Sample.CObjCell.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CObjCell(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CObjCell.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CObjCell.__Internal));
            *(global::Sample.CObjCell.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CObjCell(global::Sample.CObjCell.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CObjCell(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CShadowObj
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CShadowObj> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CShadowObj>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CShadowObj __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CShadowObj(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CShadowObj __CreateInstance(global::Sample.CShadowObj.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CShadowObj(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CShadowObj.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CShadowObj.__Internal));
            *(global::Sample.CShadowObj.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CShadowObj(global::Sample.CShadowObj.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CShadowObj(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CTriangleStrip
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTriangleStrip> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTriangleStrip>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CTriangleStrip __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CTriangleStrip(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CTriangleStrip __CreateInstance(global::Sample.CTriangleStrip.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CTriangleStrip(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CTriangleStrip.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CTriangleStrip.__Internal));
            *(global::Sample.CTriangleStrip.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CTriangleStrip(global::Sample.CTriangleStrip.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CTriangleStrip(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CSurfaceTriStrips
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSurfaceTriStrips> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSurfaceTriStrips>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CSurfaceTriStrips __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CSurfaceTriStrips(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CSurfaceTriStrips __CreateInstance(global::Sample.CSurfaceTriStrips.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CSurfaceTriStrips(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CSurfaceTriStrips.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CSurfaceTriStrips.__Internal));
            *(global::Sample.CSurfaceTriStrips.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CSurfaceTriStrips(global::Sample.CSurfaceTriStrips.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSurfaceTriStrips(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CBldPortal
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBldPortal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBldPortal>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CBldPortal __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CBldPortal(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CBldPortal __CreateInstance(global::Sample.CBldPortal.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CBldPortal(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CBldPortal.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CBldPortal.__Internal));
            *(global::Sample.CBldPortal.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CBldPortal(global::Sample.CBldPortal.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CBldPortal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CBuildingObj
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBuildingObj> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBuildingObj>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CBuildingObj __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CBuildingObj(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CBuildingObj __CreateInstance(global::Sample.CBuildingObj.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CBuildingObj(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CBuildingObj.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CBuildingObj.__Internal));
            *(global::Sample.CBuildingObj.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CBuildingObj(global::Sample.CBuildingObj.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CBuildingObj(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CLandCell
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandCell> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandCell>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CLandCell __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CLandCell(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CLandCell __CreateInstance(global::Sample.CLandCell.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CLandCell(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CLandCell.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CLandCell.__Internal));
            *(global::Sample.CLandCell.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CLandCell(global::Sample.CLandCell.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CLandCell(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BuildInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BuildInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BuildInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BuildInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BuildInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BuildInfo __CreateInstance(global::Sample.BuildInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BuildInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BuildInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BuildInfo.__Internal));
            *(global::Sample.BuildInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BuildInfo(global::Sample.BuildInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BuildInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BSPTREE
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPTREE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPTREE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BSPTREE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BSPTREE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BSPTREE __CreateInstance(global::Sample.BSPTREE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BSPTREE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BSPTREE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BSPTREE.__Internal));
            *(global::Sample.BSPTREE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BSPTREE(global::Sample.BSPTREE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BSPTREE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCellStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCellStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCellStruct>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCellStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCellStruct(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCellStruct __CreateInstance(global::Sample.CCellStruct.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCellStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCellStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCellStruct.__Internal));
            *(global::Sample.CCellStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCellStruct(global::Sample.CCellStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCellStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CEnvironment
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEnvironment> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEnvironment>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CEnvironment __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CEnvironment(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CEnvironment __CreateInstance(global::Sample.CEnvironment.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CEnvironment(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CEnvironment.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CEnvironment.__Internal));
            *(global::Sample.CEnvironment.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CEnvironment(global::Sample.CEnvironment.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CEnvironment(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CEnvCell
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEnvCell> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEnvCell>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CEnvCell __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CEnvCell(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CEnvCell __CreateInstance(global::Sample.CEnvCell.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CEnvCell(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CEnvCell.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CEnvCell.__Internal));
            *(global::Sample.CEnvCell.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CEnvCell(global::Sample.CEnvCell.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CEnvCell(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCellPortal
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCellPortal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCellPortal>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCellPortal __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCellPortal(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCellPortal __CreateInstance(global::Sample.CCellPortal.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCellPortal(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCellPortal.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCellPortal.__Internal));
            *(global::Sample.CCellPortal.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCellPortal(global::Sample.CCellPortal.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCellPortal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PortalInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PortalInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PortalInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PortalInfo __CreateInstance(global::Sample.PortalInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PortalInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PortalInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PortalInfo.__Internal));
            *(global::Sample.PortalInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PortalInfo(global::Sample.PortalInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PortalInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ViewPoly
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ViewPoly> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ViewPoly>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ViewPoly __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ViewPoly(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ViewPoly __CreateInstance(global::Sample.ViewPoly.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ViewPoly(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ViewPoly.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ViewPoly.__Internal));
            *(global::Sample.ViewPoly.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ViewPoly(global::Sample.ViewPoly.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ViewPoly(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ViewVertex
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ViewVertex> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ViewVertex>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ViewVertex __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ViewVertex(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ViewVertex __CreateInstance(global::Sample.ViewVertex.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ViewVertex(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ViewVertex.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ViewVertex.__Internal));
            *(global::Sample.ViewVertex.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ViewVertex(global::Sample.ViewVertex.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ViewVertex(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PortalViewType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalViewType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalViewType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PortalViewType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PortalViewType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PortalViewType __CreateInstance(global::Sample.PortalViewType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PortalViewType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PortalViewType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PortalViewType.__Internal));
            *(global::Sample.PortalViewType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PortalViewType(global::Sample.PortalViewType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PortalViewType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CLandBlockInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandBlockInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandBlockInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CLandBlockInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CLandBlockInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CLandBlockInfo __CreateInstance(global::Sample.CLandBlockInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CLandBlockInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CLandBlockInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CLandBlockInfo.__Internal));
            *(global::Sample.CLandBlockInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CLandBlockInfo(global::Sample.CLandBlockInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CLandBlockInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CLandBlock
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandBlock> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CLandBlock>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CLandBlock __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CLandBlock(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CLandBlock __CreateInstance(global::Sample.CLandBlock.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CLandBlock(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CLandBlock.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CLandBlock.__Internal));
            *(global::Sample.CLandBlock.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CLandBlock(global::Sample.CLandBlock.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CLandBlock(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SPHEREPATH
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SPHEREPATH> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SPHEREPATH>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SPHEREPATH __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SPHEREPATH(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SPHEREPATH __CreateInstance(global::Sample.SPHEREPATH.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SPHEREPATH(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SPHEREPATH.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SPHEREPATH.__Internal));
            *(global::Sample.SPHEREPATH.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SPHEREPATH(global::Sample.SPHEREPATH.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SPHEREPATH(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BSPNODEVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPNODEVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BSPNODEVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BSPNODEVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BSPNODEVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BSPNODEVtbl __CreateInstance(global::Sample.BSPNODEVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BSPNODEVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BSPNODEVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BSPNODEVtbl.__Internal));
            *(global::Sample.BSPNODEVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BSPNODEVtbl(global::Sample.BSPNODEVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BSPNODEVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CGfxObj
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CGfxObj> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CGfxObj>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CGfxObj __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CGfxObj(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CGfxObj __CreateInstance(global::Sample.CGfxObj.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CGfxObj(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CGfxObj.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CGfxObj.__Internal));
            *(global::Sample.CGfxObj.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGfxObj(global::Sample.CGfxObj.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGfxObj(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LIGHTLIST
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTLIST> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LIGHTLIST>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LIGHTLIST __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTLIST(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LIGHTLIST __CreateInstance(global::Sample.LIGHTLIST.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LIGHTLIST(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LIGHTLIST.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LIGHTLIST.__Internal));
            *(global::Sample.LIGHTLIST.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LIGHTLIST(global::Sample.LIGHTLIST.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LIGHTLIST(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPartArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPartArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPartArray>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPartArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPartArray(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPartArray __CreateInstance(global::Sample.CPartArray.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPartArray(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPartArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPartArray.__Internal));
            *(global::Sample.CPartArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPartArray(global::Sample.CPartArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPartArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SoundTableData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundTableData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundTableData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SoundTableData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SoundTableData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SoundTableData __CreateInstance(global::Sample.SoundTableData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SoundTableData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SoundTableData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SoundTableData.__Internal));
            *(global::Sample.SoundTableData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SoundTableData(global::Sample.SoundTableData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SoundTableData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SoundData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SoundData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SoundData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SoundData __CreateInstance(global::Sample.SoundData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SoundData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SoundData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SoundData.__Internal));
            *(global::Sample.SoundData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SoundData(global::Sample.SoundData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SoundData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CSoundTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSoundTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CSoundTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CSoundTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CSoundTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CSoundTable __CreateInstance(global::Sample.CSoundTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CSoundTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CSoundTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CSoundTable.__Internal));
            *(global::Sample.CSoundTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CSoundTable(global::Sample.CSoundTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CSoundTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsScriptData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsScriptData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsScriptData __CreateInstance(global::Sample.PhysicsScriptData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsScriptData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsScriptData.__Internal));
            *(global::Sample.PhysicsScriptData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsScriptData(global::Sample.PhysicsScriptData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsScriptData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsScript
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScript> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScript>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsScript __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScript(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsScript __CreateInstance(global::Sample.PhysicsScript.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScript(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsScript.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsScript.__Internal));
            *(global::Sample.PhysicsScript.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsScript(global::Sample.PhysicsScript.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsScript(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScriptData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ScriptData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ScriptData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ScriptData __CreateInstance(global::Sample.ScriptData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ScriptData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ScriptData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ScriptData.__Internal));
            *(global::Sample.ScriptData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScriptData(global::Sample.ScriptData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScriptData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScriptManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ScriptManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ScriptManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ScriptManager __CreateInstance(global::Sample.ScriptManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ScriptManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ScriptManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ScriptManager.__Internal));
            *(global::Sample.ScriptManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScriptManager(global::Sample.ScriptManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScriptManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScriptAndModData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptAndModData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ScriptAndModData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ScriptAndModData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ScriptAndModData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ScriptAndModData __CreateInstance(global::Sample.ScriptAndModData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ScriptAndModData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ScriptAndModData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ScriptAndModData.__Internal));
            *(global::Sample.ScriptAndModData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScriptAndModData(global::Sample.ScriptAndModData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScriptAndModData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsScriptTableData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptTableData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptTableData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsScriptTableData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptTableData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsScriptTableData __CreateInstance(global::Sample.PhysicsScriptTableData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptTableData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsScriptTableData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsScriptTableData.__Internal));
            *(global::Sample.PhysicsScriptTableData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsScriptTableData(global::Sample.PhysicsScriptTableData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsScriptTableData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsScriptTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsScriptTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsScriptTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsScriptTable __CreateInstance(global::Sample.PhysicsScriptTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsScriptTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsScriptTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsScriptTable.__Internal));
            *(global::Sample.PhysicsScriptTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsScriptTable(global::Sample.PhysicsScriptTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsScriptTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CHILDLIST
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CHILDLIST> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CHILDLIST>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CHILDLIST __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CHILDLIST(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CHILDLIST __CreateInstance(global::Sample.CHILDLIST.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CHILDLIST(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CHILDLIST.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CHILDLIST.__Internal));
            *(global::Sample.CHILDLIST.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CHILDLIST(global::Sample.CHILDLIST.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CHILDLIST(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LListData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LListData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LListData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LListData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LListData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LListData __CreateInstance(global::Sample.LListData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LListData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LListData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LListData.__Internal));
            *(global::Sample.LListData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LListData(global::Sample.LListData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LListData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMotionInterp
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMotionInterp> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMotionInterp>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMotionInterp __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMotionInterp(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMotionInterp __CreateInstance(global::Sample.CMotionInterp.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMotionInterp(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMotionInterp.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMotionInterp.__Internal));
            *(global::Sample.CMotionInterp.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMotionInterp(global::Sample.CMotionInterp.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMotionInterp(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MoveToManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MoveToManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MoveToManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MoveToManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MoveToManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MoveToManager __CreateInstance(global::Sample.MoveToManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MoveToManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MoveToManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MoveToManager.__Internal));
            *(global::Sample.MoveToManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MoveToManager(global::Sample.MoveToManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MoveToManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MovementManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MovementManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MovementManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MovementManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MovementManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MovementManager __CreateInstance(global::Sample.MovementManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MovementManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MovementManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MovementManager.__Internal));
            *(global::Sample.MovementManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MovementManager(global::Sample.MovementManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MovementManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class InterpolationManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InterpolationManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InterpolationManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.InterpolationManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.InterpolationManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.InterpolationManager __CreateInstance(global::Sample.InterpolationManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.InterpolationManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.InterpolationManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.InterpolationManager.__Internal));
            *(global::Sample.InterpolationManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private InterpolationManager(global::Sample.InterpolationManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InterpolationManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StickyManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StickyManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StickyManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StickyManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StickyManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StickyManager __CreateInstance(global::Sample.StickyManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StickyManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StickyManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StickyManager.__Internal));
            *(global::Sample.StickyManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StickyManager(global::Sample.StickyManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StickyManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ConstraintManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ConstraintManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ConstraintManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ConstraintManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ConstraintManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ConstraintManager __CreateInstance(global::Sample.ConstraintManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ConstraintManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ConstraintManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ConstraintManager.__Internal));
            *(global::Sample.ConstraintManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ConstraintManager(global::Sample.ConstraintManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ConstraintManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PositionManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PositionManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PositionManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PositionManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PositionManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PositionManager __CreateInstance(global::Sample.PositionManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PositionManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PositionManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PositionManager.__Internal));
            *(global::Sample.PositionManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PositionManager(global::Sample.PositionManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PositionManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsObjHook
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsObjHook> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsObjHook>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsObjHook __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsObjHook(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsObjHook __CreateInstance(global::Sample.PhysicsObjHook.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsObjHook(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsObjHook.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsObjHook.__Internal));
            *(global::Sample.PhysicsObjHook.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsObjHook(global::Sample.PhysicsObjHook.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsObjHook(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PhysicsObjHookVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsObjHookVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PhysicsObjHookVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PhysicsObjHookVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsObjHookVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PhysicsObjHookVtbl __CreateInstance(global::Sample.PhysicsObjHookVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PhysicsObjHookVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PhysicsObjHookVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PhysicsObjHookVtbl.__Internal));
            *(global::Sample.PhysicsObjHookVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PhysicsObjHookVtbl(global::Sample.PhysicsObjHookVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PhysicsObjHookVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LongNIHashData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LongNIHashData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LongNIHashData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LongNIHashData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LongNIHashData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LongNIHashData __CreateInstance(global::Sample.LongNIHashData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LongNIHashData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LongNIHashData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LongNIHashData.__Internal));
            *(global::Sample.LongNIHashData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LongNIHashData(global::Sample.LongNIHashData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LongNIHashData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CELLINFO
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CELLINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CELLINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CELLINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CELLINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CELLINFO __CreateInstance(global::Sample.CELLINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CELLINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CELLINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CELLINFO.__Internal));
            *(global::Sample.CELLINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CELLINFO(global::Sample.CELLINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CELLINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CELLARRAY
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CELLARRAY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CELLARRAY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CELLARRAY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CELLARRAY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CELLARRAY __CreateInstance(global::Sample.CELLARRAY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CELLARRAY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CELLARRAY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CELLARRAY.__Internal));
            *(global::Sample.CELLARRAY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CELLARRAY(global::Sample.CELLARRAY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CELLARRAY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DetectionManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DetectionManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DetectionManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DetectionManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DetectionManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DetectionManager __CreateInstance(global::Sample.DetectionManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DetectionManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DetectionManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DetectionManager.__Internal));
            *(global::Sample.DetectionManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DetectionManager(global::Sample.DetectionManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DetectionManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AttackManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AttackManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AttackManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AttackManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AttackManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AttackManager __CreateInstance(global::Sample.AttackManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AttackManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AttackManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AttackManager.__Internal));
            *(global::Sample.AttackManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AttackManager(global::Sample.AttackManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AttackManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TargetInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TargetInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TargetInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TargetInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TargetInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TargetInfo __CreateInstance(global::Sample.TargetInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TargetInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TargetInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TargetInfo.__Internal));
            *(global::Sample.TargetInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TargetInfo(global::Sample.TargetInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TargetInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TargetManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TargetManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TargetManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TargetManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TargetManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TargetManager __CreateInstance(global::Sample.TargetManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TargetManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TargetManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TargetManager.__Internal));
            *(global::Sample.TargetManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TargetManager(global::Sample.TargetManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TargetManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ParticleManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ParticleManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ParticleManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ParticleManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ParticleManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ParticleManager __CreateInstance(global::Sample.ParticleManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ParticleManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ParticleManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ParticleManager.__Internal));
            *(global::Sample.ParticleManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ParticleManager(global::Sample.ParticleManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ParticleManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BlobFragHeader_t
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BlobFragHeader_t> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BlobFragHeader_t>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BlobFragHeader_t __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BlobFragHeader_t(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BlobFragHeader_t __CreateInstance(global::Sample.BlobFragHeader_t.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BlobFragHeader_t(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BlobFragHeader_t.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BlobFragHeader_t.__Internal));
            *(global::Sample.BlobFragHeader_t.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BlobFragHeader_t(global::Sample.BlobFragHeader_t.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BlobFragHeader_t(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class QualityChangeHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityChangeHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityChangeHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.QualityChangeHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.QualityChangeHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.QualityChangeHandlerVtbl __CreateInstance(global::Sample.QualityChangeHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.QualityChangeHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.QualityChangeHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.QualityChangeHandlerVtbl.__Internal));
            *(global::Sample.QualityChangeHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QualityChangeHandlerVtbl(global::Sample.QualityChangeHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QualityChangeHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class QualityHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.QualityHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.QualityHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.QualityHandler __CreateInstance(global::Sample.QualityHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.QualityHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.QualityHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.QualityHandler.__Internal));
            *(global::Sample.QualityHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QualityHandler(global::Sample.QualityHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QualityHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class QualityRegistrarVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityRegistrarVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QualityRegistrarVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.QualityRegistrarVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.QualityRegistrarVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.QualityRegistrarVtbl __CreateInstance(global::Sample.QualityRegistrarVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.QualityRegistrarVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.QualityRegistrarVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.QualityRegistrarVtbl.__Internal));
            *(global::Sample.QualityRegistrarVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QualityRegistrarVtbl(global::Sample.QualityRegistrarVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QualityRegistrarVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Graphic
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Graphic> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Graphic>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Graphic __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Graphic(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Graphic __CreateInstance(global::Sample.Graphic.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Graphic(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Graphic.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Graphic.__Internal));
            *(global::Sample.Graphic.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Graphic(global::Sample.Graphic.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Graphic(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GraphicVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GraphicVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GraphicVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GraphicVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GraphicVtbl __CreateInstance(global::Sample.GraphicVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GraphicVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GraphicVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GraphicVtbl.__Internal));
            *(global::Sample.GraphicVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicVtbl(global::Sample.GraphicVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIObject __CreateInstance(global::Sample.UIObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIObject.__Internal));
            *(global::Sample.UIObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIObject(global::Sample.UIObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIElement
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIElement> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIElement>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIElement __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIElement(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIElement __CreateInstance(global::Sample.UIElement.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIElement(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIElement.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIElement.__Internal));
            *(global::Sample.UIElement.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIElement(global::Sample.UIElement.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIElement(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MediaDesc
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaDesc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaDesc>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MediaDesc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MediaDesc(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MediaDesc __CreateInstance(global::Sample.MediaDesc.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MediaDesc(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MediaDesc.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MediaDesc.__Internal));
            *(global::Sample.MediaDesc.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MediaDesc(global::Sample.MediaDesc.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MediaDesc(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataAnim
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataAnim> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataAnim>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataAnim __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataAnim(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataAnim __CreateInstance(global::Sample.MD_DataAnim.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataAnim(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataAnim.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataAnim.__Internal));
            *(global::Sample.MD_DataAnim.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataAnim(global::Sample.MD_DataAnim.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataAnim(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataImage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataImage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataImage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataImage __CreateInstance(global::Sample.MD_DataImage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataImage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataImage.__Internal));
            *(global::Sample.MD_DataImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataImage(global::Sample.MD_DataImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataAlpha
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataAlpha> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataAlpha>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataAlpha __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataAlpha(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataAlpha __CreateInstance(global::Sample.MD_DataAlpha.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataAlpha(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataAlpha.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataAlpha.__Internal));
            *(global::Sample.MD_DataAlpha.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataAlpha(global::Sample.MD_DataAlpha.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataAlpha(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataPause
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataPause> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataPause>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataPause __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataPause(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataPause __CreateInstance(global::Sample.MD_DataPause.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataPause(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataPause.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataPause.__Internal));
            *(global::Sample.MD_DataPause.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataPause(global::Sample.MD_DataPause.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataPause(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataJump
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataJump> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataJump>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataJump __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataJump(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataJump __CreateInstance(global::Sample.MD_DataJump.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataJump(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataJump.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataJump.__Internal));
            *(global::Sample.MD_DataJump.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataJump(global::Sample.MD_DataJump.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataJump(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataMessage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataMessage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataMessage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataMessage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataMessage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataMessage __CreateInstance(global::Sample.MD_DataMessage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataMessage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataMessage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataMessage.__Internal));
            *(global::Sample.MD_DataMessage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataMessage(global::Sample.MD_DataMessage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataMessage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataSound
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataSound> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataSound>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataSound __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataSound(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataSound __CreateInstance(global::Sample.MD_DataSound.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataSound(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataSound.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataSound.__Internal));
            *(global::Sample.MD_DataSound.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataSound(global::Sample.MD_DataSound.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataSound(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataState
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataState>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataState(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataState __CreateInstance(global::Sample.MD_DataState.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataState(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataState.__Internal));
            *(global::Sample.MD_DataState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataState(global::Sample.MD_DataState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IGraphBuilder
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IGraphBuilder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IGraphBuilder>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IGraphBuilder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IGraphBuilder(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IGraphBuilder __CreateInstance(global::Sample.IGraphBuilder.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IGraphBuilder(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IGraphBuilder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IGraphBuilder.__Internal));
            *(global::Sample.IGraphBuilder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IGraphBuilder(global::Sample.IGraphBuilder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IGraphBuilder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMediaControl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaControl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaControl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMediaControl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMediaControl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMediaControl __CreateInstance(global::Sample.IMediaControl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMediaControl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMediaControl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMediaControl.__Internal));
            *(global::Sample.IMediaControl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMediaControl(global::Sample.IMediaControl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMediaControl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMediaPosition
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaPosition> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaPosition>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMediaPosition __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMediaPosition(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMediaPosition __CreateInstance(global::Sample.IMediaPosition.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMediaPosition(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMediaPosition.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMediaPosition.__Internal));
            *(global::Sample.IMediaPosition.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMediaPosition(global::Sample.IMediaPosition.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMediaPosition(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMediaEvent
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMediaEvent>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMediaEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMediaEvent(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMediaEvent __CreateInstance(global::Sample.IMediaEvent.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMediaEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMediaEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMediaEvent.__Internal));
            *(global::Sample.IMediaEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMediaEvent(global::Sample.IMediaEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMediaEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IBaseFilter
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBaseFilter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBaseFilter>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IBaseFilter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IBaseFilter(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IBaseFilter __CreateInstance(global::Sample.IBaseFilter.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IBaseFilter(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IBaseFilter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IBaseFilter.__Internal));
            *(global::Sample.IBaseFilter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IBaseFilter(global::Sample.IBaseFilter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IBaseFilter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MovieTheatre
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MovieTheatre> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MovieTheatre>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MovieTheatre __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MovieTheatre(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MovieTheatre __CreateInstance(global::Sample.MovieTheatre.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MovieTheatre(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MovieTheatre.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MovieTheatre.__Internal));
            *(global::Sample.MovieTheatre.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MovieTheatre(global::Sample.MovieTheatre.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MovieTheatre(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataMovie
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataMovie> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataMovie>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataMovie __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataMovie(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataMovie __CreateInstance(global::Sample.MD_DataMovie.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataMovie(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataMovie.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataMovie.__Internal));
            *(global::Sample.MD_DataMovie.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataMovie(global::Sample.MD_DataMovie.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataMovie(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataCursor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataCursor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataCursor>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataCursor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataCursor(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataCursor __CreateInstance(global::Sample.MD_DataCursor.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataCursor(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataCursor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataCursor.__Internal));
            *(global::Sample.MD_DataCursor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataCursor(global::Sample.MD_DataCursor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataCursor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MD_DataFade
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataFade> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MD_DataFade>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MD_DataFade __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataFade(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MD_DataFade __CreateInstance(global::Sample.MD_DataFade.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MD_DataFade(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MD_DataFade.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MD_DataFade.__Internal));
            *(global::Sample.MD_DataFade.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MD_DataFade(global::Sample.MD_DataFade.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MD_DataFade(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MediaDescVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaDescVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaDescVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MediaDescVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MediaDescVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MediaDescVtbl __CreateInstance(global::Sample.MediaDescVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MediaDescVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MediaDescVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MediaDescVtbl.__Internal));
            *(global::Sample.MediaDescVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MediaDescVtbl(global::Sample.MediaDescVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MediaDescVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MediaMachine
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaMachine> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MediaMachine>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MediaMachine __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MediaMachine(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MediaMachine __CreateInstance(global::Sample.MediaMachine.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MediaMachine(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MediaMachine.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MediaMachine.__Internal));
            *(global::Sample.MediaMachine.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MediaMachine(global::Sample.MediaMachine.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MediaMachine(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StateDescVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StateDescVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StateDescVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StateDescVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StateDescVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StateDescVtbl __CreateInstance(global::Sample.StateDescVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StateDescVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StateDescVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StateDescVtbl.__Internal));
            *(global::Sample.StateDescVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StateDescVtbl(global::Sample.StateDescVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StateDescVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LayoutDesc
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayoutDesc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LayoutDesc>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LayoutDesc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LayoutDesc(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LayoutDesc __CreateInstance(global::Sample.LayoutDesc.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LayoutDesc(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LayoutDesc.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LayoutDesc.__Internal));
            *(global::Sample.LayoutDesc.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LayoutDesc(global::Sample.LayoutDesc.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LayoutDesc(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UILocationData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UILocationData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UILocationData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UILocationData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UILocationData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UILocationData __CreateInstance(global::Sample.UILocationData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UILocationData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UILocationData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UILocationData.__Internal));
            *(global::Sample.UILocationData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UILocationData(global::Sample.UILocationData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UILocationData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIChildFramework
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIChildFramework> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIChildFramework>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIChildFramework __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIChildFramework(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIChildFramework __CreateInstance(global::Sample.UIChildFramework.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIChildFramework(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIChildFramework.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIChildFramework.__Internal));
            *(global::Sample.UIChildFramework.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIChildFramework(global::Sample.UIChildFramework.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIChildFramework(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ReceiverData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ReceiverData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ReceiverData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ReceiverData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ReceiverData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ReceiverData __CreateInstance(global::Sample.ReceiverData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ReceiverData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ReceiverData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ReceiverData.__Internal));
            *(global::Sample.ReceiverData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ReceiverData(global::Sample.ReceiverData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ReceiverData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CryptoSystem
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CryptoSystem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CryptoSystem>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CryptoSystem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CryptoSystem(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CryptoSystem __CreateInstance(global::Sample.CryptoSystem.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CryptoSystem(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CryptoSystem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CryptoSystem.__Internal));
            *(global::Sample.CryptoSystem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CryptoSystem(global::Sample.CryptoSystem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CryptoSystem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AC1Legacy_vlong_value
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1Legacy_vlong_value> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1Legacy_vlong_value>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AC1Legacy_vlong_value __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AC1Legacy_vlong_value(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AC1Legacy_vlong_value __CreateInstance(global::Sample.AC1Legacy_vlong_value.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AC1Legacy_vlong_value(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AC1Legacy_vlong_value.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AC1Legacy_vlong_value.__Internal));
            *(global::Sample.AC1Legacy_vlong_value.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AC1Legacy_vlong_value(global::Sample.AC1Legacy_vlong_value.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AC1Legacy_vlong_value(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PortalDH
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalDH> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PortalDH>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PortalDH __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PortalDH(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PortalDH __CreateInstance(global::Sample.PortalDH.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PortalDH(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PortalDH.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PortalDH.__Internal));
            *(global::Sample.PortalDH.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PortalDH(global::Sample.PortalDH.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PortalDH(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NetKeyExch
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NetKeyExch> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NetKeyExch>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NetKeyExch __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NetKeyExch(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NetKeyExch __CreateInstance(global::Sample.NetKeyExch.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NetKeyExch(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NetKeyExch.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NetKeyExch.__Internal));
            *(global::Sample.NetKeyExch.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NetKeyExch(global::Sample.NetKeyExch.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NetKeyExch(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class COptionalHeader
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COptionalHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COptionalHeader>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.COptionalHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.COptionalHeader(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.COptionalHeader __CreateInstance(global::Sample.COptionalHeader.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.COptionalHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.COptionalHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.COptionalHeader.__Internal));
            *(global::Sample.COptionalHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private COptionalHeader(global::Sample.COptionalHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected COptionalHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FlowQueueVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FlowQueueVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FlowQueueVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FlowQueueVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FlowQueueVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FlowQueueVtbl __CreateInstance(global::Sample.FlowQueueVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FlowQueueVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FlowQueueVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FlowQueueVtbl.__Internal));
            *(global::Sample.FlowQueueVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FlowQueueVtbl(global::Sample.FlowQueueVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FlowQueueVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RecipientData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RecipientData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RecipientData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RecipientData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RecipientData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RecipientData __CreateInstance(global::Sample.RecipientData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RecipientData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RecipientData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RecipientData.__Internal));
            *(global::Sample.RecipientData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RecipientData(global::Sample.RecipientData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RecipientData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Indicator
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Indicator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Indicator>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Indicator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Indicator(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Indicator __CreateInstance(global::Sample.Indicator.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Indicator(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Indicator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Indicator.__Internal));
            *(global::Sample.Indicator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Indicator(global::Sample.Indicator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Indicator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IndicatorVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IndicatorVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IndicatorVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IndicatorVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IndicatorVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IndicatorVtbl __CreateInstance(global::Sample.IndicatorVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IndicatorVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IndicatorVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IndicatorVtbl.__Internal));
            *(global::Sample.IndicatorVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IndicatorVtbl(global::Sample.IndicatorVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IndicatorVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ArrivedEphInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArrivedEphInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ArrivedEphInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ArrivedEphInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ArrivedEphInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ArrivedEphInfo __CreateInstance(global::Sample.ArrivedEphInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ArrivedEphInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ArrivedEphInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ArrivedEphInfo.__Internal));
            *(global::Sample.ArrivedEphInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ArrivedEphInfo(global::Sample.ArrivedEphInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ArrivedEphInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CNetLayerPacket
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CNetLayerPacket> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CNetLayerPacket>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CNetLayerPacket __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CNetLayerPacket(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CNetLayerPacket __CreateInstance(global::Sample.CNetLayerPacket.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CNetLayerPacket(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CNetLayerPacket.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CNetLayerPacket.__Internal));
            *(global::Sample.CNetLayerPacket.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNetLayerPacket(global::Sample.CNetLayerPacket.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNetLayerPacket(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CTimeSyncHeader
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTimeSyncHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTimeSyncHeader>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CTimeSyncHeader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CTimeSyncHeader(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CTimeSyncHeader __CreateInstance(global::Sample.CTimeSyncHeader.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CTimeSyncHeader(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CTimeSyncHeader.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CTimeSyncHeader.__Internal));
            *(global::Sample.CTimeSyncHeader.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CTimeSyncHeader(global::Sample.CTimeSyncHeader.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CTimeSyncHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SharedNetVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SharedNetVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SharedNetVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SharedNetVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SharedNetVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SharedNetVtbl __CreateInstance(global::Sample.SharedNetVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SharedNetVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SharedNetVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SharedNetVtbl.__Internal));
            *(global::Sample.SharedNetVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SharedNetVtbl(global::Sample.SharedNetVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SharedNetVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PacketInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PacketInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PacketInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PacketInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PacketInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PacketInfo __CreateInstance(global::Sample.PacketInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PacketInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PacketInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PacketInfo.__Internal));
            *(global::Sample.PacketInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PacketInfo(global::Sample.PacketInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PacketInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncStateHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncStateHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncStateHandler __CreateInstance(global::Sample.CAsyncStateHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncStateHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncStateHandler.__Internal));
            *(global::Sample.CAsyncStateHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncStateHandler(global::Sample.CAsyncStateHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncStateHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncStateHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncStateHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncStateHandlerVtbl __CreateInstance(global::Sample.CAsyncStateHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncStateHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncStateHandlerVtbl.__Internal));
            *(global::Sample.CAsyncStateHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncStateHandlerVtbl(global::Sample.CAsyncStateHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncStateHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncStateMachine
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachine> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachine>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncStateMachine __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachine(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncStateMachine __CreateInstance(global::Sample.CAsyncStateMachine.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachine(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncStateMachine.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncStateMachine.__Internal));
            *(global::Sample.CAsyncStateMachine.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncStateMachine(global::Sample.CAsyncStateMachine.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncStateMachine(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncStateMachineCAsyncStateData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachineCAsyncStateData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachineCAsyncStateData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncStateMachineCAsyncStateData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachineCAsyncStateData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncStateMachineCAsyncStateData __CreateInstance(global::Sample.CAsyncStateMachineCAsyncStateData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachineCAsyncStateData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncStateMachineCAsyncStateData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncStateMachineCAsyncStateData.__Internal));
            *(global::Sample.CAsyncStateMachineCAsyncStateData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncStateMachineCAsyncStateData(global::Sample.CAsyncStateMachineCAsyncStateData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncStateMachineCAsyncStateData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAsyncStateMachineVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachineVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAsyncStateMachineVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAsyncStateMachineVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachineVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAsyncStateMachineVtbl __CreateInstance(global::Sample.CAsyncStateMachineVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAsyncStateMachineVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAsyncStateMachineVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAsyncStateMachineVtbl.__Internal));
            *(global::Sample.CAsyncStateMachineVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAsyncStateMachineVtbl(global::Sample.CAsyncStateMachineVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAsyncStateMachineVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SmartBoxVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SmartBoxVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SmartBoxVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SmartBoxVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SmartBoxVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SmartBoxVtbl __CreateInstance(global::Sample.SmartBoxVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SmartBoxVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SmartBoxVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SmartBoxVtbl.__Internal));
            *(global::Sample.SmartBoxVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SmartBoxVtbl(global::Sample.SmartBoxVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SmartBoxVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CameraManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CameraManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CameraManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CameraManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CameraManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CameraManager __CreateInstance(global::Sample.CameraManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CameraManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CameraManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CameraManager.__Internal));
            *(global::Sample.CameraManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CameraManager(global::Sample.CameraManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CameraManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CameraSet
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CameraSet> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CameraSet>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CameraSet __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CameraSet(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CameraSet __CreateInstance(global::Sample.CameraSet.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CameraSet(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CameraSet.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CameraSet.__Internal));
            *(global::Sample.CameraSet.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CameraSet(global::Sample.CameraSet.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CameraSet(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CelestialPosition
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CelestialPosition> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CelestialPosition>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CelestialPosition __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CelestialPosition(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CelestialPosition __CreateInstance(global::Sample.CelestialPosition.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CelestialPosition(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CelestialPosition.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CelestialPosition.__Internal));
            *(global::Sample.CelestialPosition.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CelestialPosition(global::Sample.CelestialPosition.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CelestialPosition(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GameSky
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GameSky> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GameSky>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GameSky __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GameSky(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GameSky __CreateInstance(global::Sample.GameSky.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GameSky(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GameSky.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GameSky.__Internal));
            *(global::Sample.GameSky.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GameSky(global::Sample.GameSky.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GameSky(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LScape
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LScape> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LScape>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LScape __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LScape(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LScape __CreateInstance(global::Sample.LScape.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LScape(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LScape.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LScape.__Internal));
            *(global::Sample.LScape.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LScape(global::Sample.LScape.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LScape(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AmbientSound
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSound> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSound>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AmbientSound __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSound(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AmbientSound __CreateInstance(global::Sample.AmbientSound.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSound(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AmbientSound.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AmbientSound.__Internal));
            *(global::Sample.AmbientSound.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AmbientSound(global::Sample.AmbientSound.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AmbientSound(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AmbientSoundVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSoundVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSoundVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AmbientSoundVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSoundVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AmbientSoundVtbl __CreateInstance(global::Sample.AmbientSoundVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSoundVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AmbientSoundVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AmbientSoundVtbl.__Internal));
            *(global::Sample.AmbientSoundVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AmbientSoundVtbl(global::Sample.AmbientSoundVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AmbientSoundVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AmbientSoundDesc
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSoundDesc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSoundDesc>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AmbientSoundDesc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSoundDesc(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AmbientSoundDesc __CreateInstance(global::Sample.AmbientSoundDesc.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSoundDesc(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AmbientSoundDesc.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AmbientSoundDesc.__Internal));
            *(global::Sample.AmbientSoundDesc.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AmbientSoundDesc(global::Sample.AmbientSoundDesc.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AmbientSoundDesc(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AmbientSTBDesc
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSTBDesc> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AmbientSTBDesc>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AmbientSTBDesc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSTBDesc(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AmbientSTBDesc __CreateInstance(global::Sample.AmbientSTBDesc.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AmbientSTBDesc(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AmbientSTBDesc.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AmbientSTBDesc.__Internal));
            *(global::Sample.AmbientSTBDesc.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AmbientSTBDesc(global::Sample.AmbientSTBDesc.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AmbientSTBDesc(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Ambient
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ambient> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Ambient>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Ambient __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Ambient(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Ambient __CreateInstance(global::Sample.Ambient.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Ambient(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Ambient.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Ambient.__Internal));
            *(global::Sample.Ambient.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Ambient(global::Sample.Ambient.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Ambient(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CellManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CellManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CellManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CellManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CellManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CellManager __CreateInstance(global::Sample.CellManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CellManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CellManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CellManager.__Internal));
            *(global::Sample.CellManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CellManager(global::Sample.CellManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CellManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPhysics
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysics> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPhysics>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPhysics __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPhysics(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPhysics __CreateInstance(global::Sample.CPhysics.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPhysics(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPhysics.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPhysics.__Internal));
            *(global::Sample.CPhysics.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPhysics(global::Sample.CPhysics.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPhysics(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CommandListElement
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CommandListElement> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CommandListElement>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CommandListElement __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CommandListElement(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CommandListElement __CreateInstance(global::Sample.CommandListElement.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CommandListElement(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CommandListElement.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CommandListElement.__Internal));
            *(global::Sample.CommandListElement.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CommandListElement(global::Sample.CommandListElement.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CommandListElement(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CommandInterpreter
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CommandInterpreter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CommandInterpreter>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CommandInterpreter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CommandInterpreter(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CommandInterpreter __CreateInstance(global::Sample.CommandInterpreter.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CommandInterpreter(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CommandInterpreter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CommandInterpreter.__Internal));
            *(global::Sample.CommandInterpreter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CommandInterpreter(global::Sample.CommandInterpreter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CommandInterpreter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PacketControllerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PacketControllerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PacketControllerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PacketControllerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PacketControllerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PacketControllerVtbl __CreateInstance(global::Sample.PacketControllerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PacketControllerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PacketControllerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PacketControllerVtbl.__Internal));
            *(global::Sample.PacketControllerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PacketControllerVtbl(global::Sample.PacketControllerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PacketControllerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LBRange
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LBRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LBRange>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LBRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LBRange(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LBRange __CreateInstance(global::Sample.LBRange.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LBRange(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LBRange.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LBRange.__Internal));
            *(global::Sample.LBRange.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LBRange(global::Sample.LBRange.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LBRange(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LBMigrationReqBookkeep
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LBMigrationReqBookkeep> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LBMigrationReqBookkeep>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LBMigrationReqBookkeep __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LBMigrationReqBookkeep(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LBMigrationReqBookkeep __CreateInstance(global::Sample.LBMigrationReqBookkeep.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LBMigrationReqBookkeep(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LBMigrationReqBookkeep.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LBMigrationReqBookkeep.__Internal));
            *(global::Sample.LBMigrationReqBookkeep.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LBMigrationReqBookkeep(global::Sample.LBMigrationReqBookkeep.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LBMigrationReqBookkeep(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SCellDBVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SCellDBVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SCellDBVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SCellDBVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SCellDBVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SCellDBVtbl __CreateInstance(global::Sample.SCellDBVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SCellDBVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SCellDBVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SCellDBVtbl.__Internal));
            *(global::Sample.SCellDBVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SCellDBVtbl(global::Sample.SCellDBVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SCellDBVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BlockListLoaderVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BlockListLoaderVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.BlockListLoaderVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.BlockListLoaderVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.BlockListLoaderVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.BlockListLoaderVtbl __CreateInstance(global::Sample.BlockListLoaderVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.BlockListLoaderVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.BlockListLoaderVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.BlockListLoaderVtbl.__Internal));
            *(global::Sample.BlockListLoaderVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BlockListLoaderVtbl(global::Sample.BlockListLoaderVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BlockListLoaderVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SimplePolygonVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SimplePolygonVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SimplePolygonVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SimplePolygonVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SimplePolygonVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SimplePolygonVtbl __CreateInstance(global::Sample.SimplePolygonVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SimplePolygonVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SimplePolygonVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SimplePolygonVtbl.__Internal));
            *(global::Sample.SimplePolygonVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SimplePolygonVtbl(global::Sample.SimplePolygonVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SimplePolygonVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OldListVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OldListVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OldListVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OldListVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OldListVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OldListVtbl __CreateInstance(global::Sample.OldListVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OldListVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OldListVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OldListVtbl.__Internal));
            *(global::Sample.OldListVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OldListVtbl(global::Sample.OldListVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OldListVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CBaseQualitiesVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBaseQualitiesVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBaseQualitiesVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CBaseQualitiesVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CBaseQualitiesVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CBaseQualitiesVtbl __CreateInstance(global::Sample.CBaseQualitiesVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CBaseQualitiesVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CBaseQualitiesVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CBaseQualitiesVtbl.__Internal));
            *(global::Sample.CBaseQualitiesVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CBaseQualitiesVtbl(global::Sample.CBaseQualitiesVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CBaseQualitiesVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CPortalPoly
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPortalPoly> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPortalPoly>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPortalPoly __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPortalPoly(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPortalPoly __CreateInstance(global::Sample.CPortalPoly.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPortalPoly(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPortalPoly.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPortalPoly.__Internal));
            *(global::Sample.CPortalPoly.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPortalPoly(global::Sample.CPortalPoly.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPortalPoly(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderDeviceVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderDeviceVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderDeviceVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderDeviceVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderDeviceVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderDeviceVtbl __CreateInstance(global::Sample.RenderDeviceVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderDeviceVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderDeviceVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderDeviceVtbl.__Internal));
            *(global::Sample.RenderDeviceVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderDeviceVtbl(global::Sample.RenderDeviceVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderDeviceVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TextureBasedFontCharacter
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextureBasedFontCharacter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextureBasedFontCharacter>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TextureBasedFontCharacter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TextureBasedFontCharacter(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TextureBasedFontCharacter __CreateInstance(global::Sample.TextureBasedFontCharacter.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TextureBasedFontCharacter(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TextureBasedFontCharacter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TextureBasedFontCharacter.__Internal));
            *(global::Sample.TextureBasedFontCharacter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextureBasedFontCharacter(global::Sample.TextureBasedFontCharacter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextureBasedFontCharacter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TextureBasedFont
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextureBasedFont> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextureBasedFont>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TextureBasedFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TextureBasedFont(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TextureBasedFont __CreateInstance(global::Sample.TextureBasedFont.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TextureBasedFont(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TextureBasedFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TextureBasedFont.__Internal));
            *(global::Sample.TextureBasedFont.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextureBasedFont(global::Sample.TextureBasedFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextureBasedFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ACCharGenStartAreaVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ACCharGenStartAreaVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ACCharGenStartAreaVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ACCharGenStartAreaVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ACCharGenStartAreaVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ACCharGenStartAreaVtbl __CreateInstance(global::Sample.ACCharGenStartAreaVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ACCharGenStartAreaVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ACCharGenStartAreaVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ACCharGenStartAreaVtbl.__Internal));
            *(global::Sample.ACCharGenStartAreaVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ACCharGenStartAreaVtbl(global::Sample.ACCharGenStartAreaVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ACCharGenStartAreaVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HeritageGroupCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HeritageGroupCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HeritageGroupCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HeritageGroupCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HeritageGroupCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HeritageGroupCGVtbl __CreateInstance(global::Sample.HeritageGroupCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HeritageGroupCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HeritageGroupCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HeritageGroupCGVtbl.__Internal));
            *(global::Sample.HeritageGroupCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HeritageGroupCGVtbl(global::Sample.HeritageGroupCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HeritageGroupCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SkillCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SkillCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SkillCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SkillCG __CreateInstance(global::Sample.SkillCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SkillCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SkillCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SkillCG.__Internal));
            *(global::Sample.SkillCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SkillCG(global::Sample.SkillCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SkillCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SkillCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SkillCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SkillCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SkillCGVtbl __CreateInstance(global::Sample.SkillCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SkillCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SkillCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SkillCGVtbl.__Internal));
            *(global::Sample.SkillCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SkillCGVtbl(global::Sample.SkillCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SkillCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TemplateCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TemplateCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TemplateCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TemplateCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TemplateCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TemplateCG __CreateInstance(global::Sample.TemplateCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TemplateCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TemplateCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TemplateCG.__Internal));
            *(global::Sample.TemplateCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TemplateCG(global::Sample.TemplateCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TemplateCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TemplateCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TemplateCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TemplateCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TemplateCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TemplateCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TemplateCGVtbl __CreateInstance(global::Sample.TemplateCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TemplateCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TemplateCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TemplateCGVtbl.__Internal));
            *(global::Sample.TemplateCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TemplateCGVtbl(global::Sample.TemplateCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TemplateCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SexCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SexCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SexCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SexCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SexCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SexCGVtbl __CreateInstance(global::Sample.SexCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SexCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SexCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SexCGVtbl.__Internal));
            *(global::Sample.SexCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SexCGVtbl(global::Sample.SexCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SexCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HairStyleCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HairStyleCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HairStyleCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HairStyleCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HairStyleCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HairStyleCG __CreateInstance(global::Sample.HairStyleCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HairStyleCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HairStyleCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HairStyleCG.__Internal));
            *(global::Sample.HairStyleCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HairStyleCG(global::Sample.HairStyleCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HairStyleCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HairStyleCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HairStyleCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HairStyleCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HairStyleCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HairStyleCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HairStyleCGVtbl __CreateInstance(global::Sample.HairStyleCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HairStyleCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HairStyleCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HairStyleCGVtbl.__Internal));
            *(global::Sample.HairStyleCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HairStyleCGVtbl(global::Sample.HairStyleCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HairStyleCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EyesStripCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EyesStripCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EyesStripCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EyesStripCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EyesStripCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EyesStripCG __CreateInstance(global::Sample.EyesStripCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EyesStripCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EyesStripCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EyesStripCG.__Internal));
            *(global::Sample.EyesStripCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EyesStripCG(global::Sample.EyesStripCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EyesStripCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EyesStripCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EyesStripCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EyesStripCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EyesStripCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EyesStripCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EyesStripCGVtbl __CreateInstance(global::Sample.EyesStripCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EyesStripCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EyesStripCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EyesStripCGVtbl.__Internal));
            *(global::Sample.EyesStripCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EyesStripCGVtbl(global::Sample.EyesStripCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EyesStripCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FaceStripCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FaceStripCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FaceStripCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FaceStripCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FaceStripCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FaceStripCG __CreateInstance(global::Sample.FaceStripCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FaceStripCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FaceStripCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FaceStripCG.__Internal));
            *(global::Sample.FaceStripCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FaceStripCG(global::Sample.FaceStripCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FaceStripCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FaceStripCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FaceStripCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FaceStripCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FaceStripCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FaceStripCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FaceStripCGVtbl __CreateInstance(global::Sample.FaceStripCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FaceStripCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FaceStripCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FaceStripCGVtbl.__Internal));
            *(global::Sample.FaceStripCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FaceStripCGVtbl(global::Sample.FaceStripCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FaceStripCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StyleCG
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StyleCG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StyleCG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StyleCG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StyleCG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StyleCG __CreateInstance(global::Sample.StyleCG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StyleCG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StyleCG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StyleCG.__Internal));
            *(global::Sample.StyleCG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StyleCG(global::Sample.StyleCG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StyleCG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StyleCGVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StyleCGVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StyleCGVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StyleCGVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StyleCGVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StyleCGVtbl __CreateInstance(global::Sample.StyleCGVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StyleCGVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StyleCGVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StyleCGVtbl.__Internal));
            *(global::Sample.StyleCGVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StyleCGVtbl(global::Sample.StyleCGVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StyleCGVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CharGenStateVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CharGenStateVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CharGenStateVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CharGenStateVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CharGenStateVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CharGenStateVtbl __CreateInstance(global::Sample.CharGenStateVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CharGenStateVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CharGenStateVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CharGenStateVtbl.__Internal));
            *(global::Sample.CharGenStateVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CharGenStateVtbl(global::Sample.CharGenStateVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CharGenStateVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SkillTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SkillTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SkillTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SkillTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SkillTable __CreateInstance(global::Sample.SkillTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SkillTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SkillTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SkillTable.__Internal));
            *(global::Sample.SkillTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SkillTable(global::Sample.SkillTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SkillTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Attribute2ndTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Attribute2ndTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Attribute2ndTable>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Attribute2ndTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Attribute2ndTable(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Attribute2ndTable __CreateInstance(global::Sample.Attribute2ndTable.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Attribute2ndTable(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Attribute2ndTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Attribute2ndTable.__Internal));
            *(global::Sample.Attribute2ndTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Attribute2ndTable(global::Sample.Attribute2ndTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Attribute2ndTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ClientCommunicationSystemCmdHashData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClientCommunicationSystemCmdHashData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClientCommunicationSystemCmdHashData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ClientCommunicationSystemCmdHashData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ClientCommunicationSystemCmdHashData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ClientCommunicationSystemCmdHashData __CreateInstance(global::Sample.ClientCommunicationSystemCmdHashData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ClientCommunicationSystemCmdHashData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ClientCommunicationSystemCmdHashData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ClientCommunicationSystemCmdHashData.__Internal));
            *(global::Sample.ClientCommunicationSystemCmdHashData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClientCommunicationSystemCmdHashData(global::Sample.ClientCommunicationSystemCmdHashData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClientCommunicationSystemCmdHashData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ClientCommunicationSystem
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClientCommunicationSystem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ClientCommunicationSystem>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ClientCommunicationSystem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ClientCommunicationSystem(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ClientCommunicationSystem __CreateInstance(global::Sample.ClientCommunicationSystem.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ClientCommunicationSystem(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ClientCommunicationSystem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ClientCommunicationSystem.__Internal));
            *(global::Sample.ClientCommunicationSystem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClientCommunicationSystem(global::Sample.ClientCommunicationSystem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClientCommunicationSystem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ObjectRangeHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ObjectRangeHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ObjectRangeHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ObjectRangeHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ObjectRangeHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ObjectRangeHandlerVtbl __CreateInstance(global::Sample.ObjectRangeHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ObjectRangeHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ObjectRangeHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ObjectRangeHandlerVtbl.__Internal));
            *(global::Sample.ObjectRangeHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ObjectRangeHandlerVtbl(global::Sample.ObjectRangeHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ObjectRangeHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCommunicationSystemChatInterfaceProvider
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCommunicationSystemChatInterfaceProvider> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCommunicationSystemChatInterfaceProvider>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCommunicationSystemChatInterfaceProvider __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCommunicationSystemChatInterfaceProvider(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCommunicationSystemChatInterfaceProvider __CreateInstance(global::Sample.CCommunicationSystemChatInterfaceProvider.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCommunicationSystemChatInterfaceProvider(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCommunicationSystemChatInterfaceProvider.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCommunicationSystemChatInterfaceProvider.__Internal));
            *(global::Sample.CCommunicationSystemChatInterfaceProvider.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCommunicationSystemChatInterfaceProvider(global::Sample.CCommunicationSystemChatInterfaceProvider.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCommunicationSystemChatInterfaceProvider(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCommunicationSystemVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCommunicationSystemVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCommunicationSystemVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCommunicationSystemVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCommunicationSystemVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCommunicationSystemVtbl __CreateInstance(global::Sample.CCommunicationSystemVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCommunicationSystemVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCommunicationSystemVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCommunicationSystemVtbl.__Internal));
            *(global::Sample.CCommunicationSystemVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCommunicationSystemVtbl(global::Sample.CCommunicationSystemVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCommunicationSystemVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IChatClient
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IChatClient> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IChatClient>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IChatClient __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IChatClient(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IChatClient __CreateInstance(global::Sample.IChatClient.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IChatClient(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IChatClient.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IChatClient.__Internal));
            *(global::Sample.IChatClient.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IChatClient(global::Sample.IChatClient.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IChatClient(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AC1ClientChatManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1ClientChatManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1ClientChatManager>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AC1ClientChatManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AC1ClientChatManager(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AC1ClientChatManager __CreateInstance(global::Sample.AC1ClientChatManager.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AC1ClientChatManager(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AC1ClientChatManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AC1ClientChatManager.__Internal));
            *(global::Sample.AC1ClientChatManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AC1ClientChatManager(global::Sample.AC1ClientChatManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AC1ClientChatManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIPreferenceItem
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIPreferenceItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIPreferenceItem>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIPreferenceItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIPreferenceItem(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIPreferenceItem __CreateInstance(global::Sample.UIPreferenceItem.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIPreferenceItem(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIPreferenceItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIPreferenceItem.__Internal));
            *(global::Sample.UIPreferenceItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIPreferenceItem(global::Sample.UIPreferenceItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIPreferenceItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIPreferenceItemVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIPreferenceItemVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIPreferenceItemVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIPreferenceItemVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIPreferenceItemVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIPreferenceItemVtbl __CreateInstance(global::Sample.UIPreferenceItemVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIPreferenceItemVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIPreferenceItemVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIPreferenceItemVtbl.__Internal));
            *(global::Sample.UIPreferenceItemVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIPreferenceItemVtbl(global::Sample.UIPreferenceItemVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIPreferenceItemVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NakDataVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NakDataVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NakDataVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NakDataVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NakDataVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NakDataVtbl __CreateInstance(global::Sample.NakDataVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NakDataVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NakDataVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NakDataVtbl.__Internal));
            *(global::Sample.NakDataVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NakDataVtbl(global::Sample.NakDataVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NakDataVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CFactoryVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CFactoryVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CFactoryVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CFactoryVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CFactoryVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CFactoryVtbl __CreateInstance(global::Sample.CFactoryVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CFactoryVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CFactoryVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CFactoryVtbl.__Internal));
            *(global::Sample.CFactoryVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CFactoryVtbl(global::Sample.CFactoryVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CFactoryVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleUILinkInfoWVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUILinkInfoWVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUILinkInfoWVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleUILinkInfoWVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleUILinkInfoWVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleUILinkInfoWVtbl __CreateInstance(global::Sample.IOleUILinkInfoWVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleUILinkInfoWVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleUILinkInfoWVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleUILinkInfoWVtbl.__Internal));
            *(global::Sample.IOleUILinkInfoWVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleUILinkInfoWVtbl(global::Sample.IOleUILinkInfoWVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleUILinkInfoWVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleUILinkContainerWVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUILinkContainerWVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUILinkContainerWVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleUILinkContainerWVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleUILinkContainerWVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleUILinkContainerWVtbl __CreateInstance(global::Sample.IOleUILinkContainerWVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleUILinkContainerWVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleUILinkContainerWVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleUILinkContainerWVtbl.__Internal));
            *(global::Sample.IOleUILinkContainerWVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleUILinkContainerWVtbl(global::Sample.IOleUILinkContainerWVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleUILinkContainerWVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOleUIObjInfoWVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUIObjInfoWVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOleUIObjInfoWVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOleUIObjInfoWVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOleUIObjInfoWVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOleUIObjInfoWVtbl __CreateInstance(global::Sample.IOleUIObjInfoWVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOleUIObjInfoWVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOleUIObjInfoWVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOleUIObjInfoWVtbl.__Internal));
            *(global::Sample.IOleUIObjInfoWVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOleUIObjInfoWVtbl(global::Sample.IOleUIObjInfoWVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOleUIObjInfoWVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagOLEUIOBJECTPROPSW
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUIOBJECTPROPSW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUIOBJECTPROPSW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagOLEUIOBJECTPROPSW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUIOBJECTPROPSW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagOLEUIOBJECTPROPSW __CreateInstance(global::Sample.TagOLEUIOBJECTPROPSW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUIOBJECTPROPSW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagOLEUIOBJECTPROPSW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEUIOBJECTPROPSW.__Internal));
            *(global::Sample.TagOLEUIOBJECTPROPSW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagOLEUIOBJECTPROPSW(global::Sample.TagOLEUIOBJECTPROPSW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagOLEUIOBJECTPROPSW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagOLEUIVIEWPROPSW
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUIVIEWPROPSW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUIVIEWPROPSW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagOLEUIVIEWPROPSW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUIVIEWPROPSW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagOLEUIVIEWPROPSW __CreateInstance(global::Sample.TagOLEUIVIEWPROPSW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUIVIEWPROPSW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagOLEUIVIEWPROPSW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEUIVIEWPROPSW.__Internal));
            *(global::Sample.TagOLEUIVIEWPROPSW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagOLEUIVIEWPROPSW(global::Sample.TagOLEUIVIEWPROPSW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagOLEUIVIEWPROPSW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TagOLEUILINKPROPSW
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUILINKPROPSW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEUILINKPROPSW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagOLEUILINKPROPSW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUILINKPROPSW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagOLEUILINKPROPSW __CreateInstance(global::Sample.TagOLEUILINKPROPSW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEUILINKPROPSW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagOLEUILINKPROPSW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEUILINKPROPSW.__Internal));
            *(global::Sample.TagOLEUILINKPROPSW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagOLEUILINKPROPSW(global::Sample.TagOLEUILINKPROPSW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagOLEUILINKPROPSW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDirectInputEffectShepherd
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirectInputEffectShepherd> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirectInputEffectShepherd>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDirectInputEffectShepherd __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDirectInputEffectShepherd(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDirectInputEffectShepherd __CreateInstance(global::Sample.IDirectInputEffectShepherd.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDirectInputEffectShepherd(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDirectInputEffectShepherd.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDirectInputEffectShepherd.__Internal));
            *(global::Sample.IDirectInputEffectShepherd.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDirectInputEffectShepherd(global::Sample.IDirectInputEffectShepherd.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDirectInputEffectShepherd(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DIDRIVERVERSIONS
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DIDRIVERVERSIONS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DIDRIVERVERSIONS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DIDRIVERVERSIONS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DIDRIVERVERSIONS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DIDRIVERVERSIONS __CreateInstance(global::Sample.DIDRIVERVERSIONS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DIDRIVERVERSIONS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DIDRIVERVERSIONS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DIDRIVERVERSIONS.__Internal));
            *(global::Sample.DIDRIVERVERSIONS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DIDRIVERVERSIONS(global::Sample.DIDRIVERVERSIONS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DIDRIVERVERSIONS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DIDEVICESTATE
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DIDEVICESTATE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DIDEVICESTATE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DIDEVICESTATE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DIDEVICESTATE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DIDEVICESTATE __CreateInstance(global::Sample.DIDEVICESTATE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DIDEVICESTATE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DIDEVICESTATE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DIDEVICESTATE.__Internal));
            *(global::Sample.DIDEVICESTATE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DIDEVICESTATE(global::Sample.DIDEVICESTATE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DIDEVICESTATE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CEd
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEd> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CEd>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CEd __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CEd(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CEd __CreateInstance(global::Sample.CEd.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CEd(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CEd.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CEd.__Internal));
            *(global::Sample.CEd.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CEd(global::Sample.CEd.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CEd(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDirectInputDeviceCallbackVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirectInputDeviceCallbackVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDirectInputDeviceCallbackVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDirectInputDeviceCallbackVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDirectInputDeviceCallbackVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDirectInputDeviceCallbackVtbl __CreateInstance(global::Sample.IDirectInputDeviceCallbackVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDirectInputDeviceCallbackVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDirectInputDeviceCallbackVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDirectInputDeviceCallbackVtbl.__Internal));
            *(global::Sample.IDirectInputDeviceCallbackVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDirectInputDeviceCallbackVtbl(global::Sample.IDirectInputDeviceCallbackVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDirectInputDeviceCallbackVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class InternalState
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InternalState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InternalState>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.InternalState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.InternalState(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.InternalState __CreateInstance(global::Sample.InternalState.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.InternalState(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.InternalState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.InternalState.__Internal));
            *(global::Sample.InternalState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private InternalState(global::Sample.InternalState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InternalState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class InArchiveVersionStackVersionRowHolder
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InArchiveVersionStackVersionRowHolder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.InArchiveVersionStackVersionRowHolder>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.InArchiveVersionStackVersionRowHolder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.InArchiveVersionStackVersionRowHolder(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.InArchiveVersionStackVersionRowHolder __CreateInstance(global::Sample.InArchiveVersionStackVersionRowHolder.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.InArchiveVersionStackVersionRowHolder(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.InArchiveVersionStackVersionRowHolder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.InArchiveVersionStackVersionRowHolder.__Internal));
            *(global::Sample.InArchiveVersionStackVersionRowHolder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private InArchiveVersionStackVersionRowHolder(global::Sample.InArchiveVersionStackVersionRowHolder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InArchiveVersionStackVersionRowHolder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LogControllerCategoryHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LogControllerCategoryHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LogControllerCategoryHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LogControllerCategoryHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LogControllerCategoryHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LogControllerCategoryHandler __CreateInstance(global::Sample.LogControllerCategoryHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LogControllerCategoryHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LogControllerCategoryHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LogControllerCategoryHandler.__Internal));
            *(global::Sample.LogControllerCategoryHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LogControllerCategoryHandler(global::Sample.LogControllerCategoryHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LogControllerCategoryHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DbgReportGenPageVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DbgReportGenPageVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DbgReportGenPageVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DbgReportGenPageVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DbgReportGenPageVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DbgReportGenPageVtbl __CreateInstance(global::Sample.DbgReportGenPageVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DbgReportGenPageVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DbgReportGenPageVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DbgReportGenPageVtbl.__Internal));
            *(global::Sample.DbgReportGenPageVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DbgReportGenPageVtbl(global::Sample.DbgReportGenPageVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DbgReportGenPageVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIMessageData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIMessageData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIMessageData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIMessageData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIMessageData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIMessageData __CreateInstance(global::Sample.UIMessageData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIMessageData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIMessageData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIMessageData.__Internal));
            *(global::Sample.UIMessageData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIMessageData(global::Sample.UIMessageData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIMessageData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ContextMenuDataVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ContextMenuDataVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ContextMenuDataVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ContextMenuDataVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ContextMenuDataVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ContextMenuDataVtbl __CreateInstance(global::Sample.ContextMenuDataVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ContextMenuDataVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ContextMenuDataVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ContextMenuDataVtbl.__Internal));
            *(global::Sample.ContextMenuDataVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ContextMenuDataVtbl(global::Sample.ContextMenuDataVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ContextMenuDataVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ContextMenu
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ContextMenu> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ContextMenu>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ContextMenu __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ContextMenu(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ContextMenu __CreateInstance(global::Sample.ContextMenu.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ContextMenu(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ContextMenu.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ContextMenu.__Internal));
            *(global::Sample.ContextMenu.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ContextMenu(global::Sample.ContextMenu.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ContextMenu(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIElementListBox
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIElementListBox> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIElementListBox>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIElementListBox __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIElementListBox(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIElementListBox __CreateInstance(global::Sample.UIElementListBox.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIElementListBox(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIElementListBox.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIElementListBox.__Internal));
            *(global::Sample.UIElementListBox.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIElementListBox(global::Sample.UIElementListBox.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIElementListBox(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GlyphListVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphListVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphListVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GlyphListVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GlyphListVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GlyphListVtbl __CreateInstance(global::Sample.GlyphListVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GlyphListVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GlyphListVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GlyphListVtbl.__Internal));
            *(global::Sample.GlyphListVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GlyphListVtbl(global::Sample.GlyphListVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GlyphListVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TextTag
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextTag> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TextTag>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TextTag __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TextTag(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TextTag __CreateInstance(global::Sample.TextTag.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TextTag(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TextTag.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TextTag.__Internal));
            *(global::Sample.TextTag.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextTag(global::Sample.TextTag.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextTag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GlyphLine
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphLine> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphLine>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GlyphLine __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GlyphLine(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GlyphLine __CreateInstance(global::Sample.GlyphLine.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GlyphLine(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GlyphLine.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GlyphLine.__Internal));
            *(global::Sample.GlyphLine.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GlyphLine(global::Sample.GlyphLine.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GlyphLine(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GlyphLineVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphLineVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GlyphLineVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GlyphLineVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GlyphLineVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GlyphLineVtbl __CreateInstance(global::Sample.GlyphLineVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GlyphLineVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GlyphLineVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GlyphLineVtbl.__Internal));
            *(global::Sample.GlyphLineVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GlyphLineVtbl(global::Sample.GlyphLineVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GlyphLineVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OSSpecificProfilerUIInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSSpecificProfilerUIInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSSpecificProfilerUIInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OSSpecificProfilerUIInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OSSpecificProfilerUIInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OSSpecificProfilerUIInfo __CreateInstance(global::Sample.OSSpecificProfilerUIInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OSSpecificProfilerUIInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OSSpecificProfilerUIInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OSSpecificProfilerUIInfo.__Internal));
            *(global::Sample.OSSpecificProfilerUIInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OSSpecificProfilerUIInfo(global::Sample.OSSpecificProfilerUIInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OSSpecificProfilerUIInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OSSpecificProfilerUIInfoVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSSpecificProfilerUIInfoVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSSpecificProfilerUIInfoVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OSSpecificProfilerUIInfoVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OSSpecificProfilerUIInfoVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OSSpecificProfilerUIInfoVtbl __CreateInstance(global::Sample.OSSpecificProfilerUIInfoVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OSSpecificProfilerUIInfoVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OSSpecificProfilerUIInfoVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OSSpecificProfilerUIInfoVtbl.__Internal));
            *(global::Sample.OSSpecificProfilerUIInfoVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OSSpecificProfilerUIInfoVtbl(global::Sample.OSSpecificProfilerUIInfoVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OSSpecificProfilerUIInfoVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TReadOnlyFile2IDTableVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TReadOnlyFile2IDTableVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TReadOnlyFile2IDTableVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TReadOnlyFile2IDTableVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TReadOnlyFile2IDTableVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TReadOnlyFile2IDTableVtbl __CreateInstance(global::Sample.TReadOnlyFile2IDTableVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TReadOnlyFile2IDTableVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TReadOnlyFile2IDTableVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TReadOnlyFile2IDTableVtbl.__Internal));
            *(global::Sample.TReadOnlyFile2IDTableVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TReadOnlyFile2IDTableVtbl(global::Sample.TReadOnlyFile2IDTableVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TReadOnlyFile2IDTableVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OutputStreamVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OutputStreamVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OutputStreamVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OutputStreamVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OutputStreamVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OutputStreamVtbl __CreateInstance(global::Sample.OutputStreamVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OutputStreamVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OutputStreamVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OutputStreamVtbl.__Internal));
            *(global::Sample.OutputStreamVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OutputStreamVtbl(global::Sample.OutputStreamVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OutputStreamVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NewParser
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NewParser> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NewParser>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NewParser __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NewParser(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NewParser __CreateInstance(global::Sample.NewParser.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NewParser(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NewParser.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NewParser.__Internal));
            *(global::Sample.NewParser.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NewParser(global::Sample.NewParser.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NewParser(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDTableStorageCallbackVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDTableStorageCallbackVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDTableStorageCallbackVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDTableStorageCallbackVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDTableStorageCallbackVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDTableStorageCallbackVtbl __CreateInstance(global::Sample.IDTableStorageCallbackVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDTableStorageCallbackVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDTableStorageCallbackVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDTableStorageCallbackVtbl.__Internal));
            *(global::Sample.IDTableStorageCallbackVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDTableStorageCallbackVtbl(global::Sample.IDTableStorageCallbackVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDTableStorageCallbackVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WaveFileVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WaveFileVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WaveFileVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.WaveFileVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.WaveFileVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.WaveFileVtbl __CreateInstance(global::Sample.WaveFileVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.WaveFileVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.WaveFileVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.WaveFileVtbl.__Internal));
            *(global::Sample.WaveFileVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WaveFileVtbl(global::Sample.WaveFileVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WaveFileVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SoundBufRef
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundBufRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SoundBufRef>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SoundBufRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SoundBufRef(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SoundBufRef __CreateInstance(global::Sample.SoundBufRef.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SoundBufRef(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SoundBufRef.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SoundBufRef.__Internal));
            *(global::Sample.SoundBufRef.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SoundBufRef(global::Sample.SoundBufRef.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SoundBufRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderVtbl __CreateInstance(global::Sample.RenderVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderVtbl.__Internal));
            *(global::Sample.RenderVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderVtbl(global::Sample.RenderVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class RenderDisplayModeType
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderDisplayModeType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RenderDisplayModeType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RenderDisplayModeType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RenderDisplayModeType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RenderDisplayModeType __CreateInstance(global::Sample.RenderDisplayModeType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RenderDisplayModeType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RenderDisplayModeType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RenderDisplayModeType.__Internal));
            *(global::Sample.RenderDisplayModeType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RenderDisplayModeType(global::Sample.RenderDisplayModeType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RenderDisplayModeType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SuperGenericDlgVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SuperGenericDlgVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SuperGenericDlgVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SuperGenericDlgVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SuperGenericDlgVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SuperGenericDlgVtbl __CreateInstance(global::Sample.SuperGenericDlgVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SuperGenericDlgVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SuperGenericDlgVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SuperGenericDlgVtbl.__Internal));
            *(global::Sample.SuperGenericDlgVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SuperGenericDlgVtbl(global::Sample.SuperGenericDlgVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SuperGenericDlgVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GenericDialogTextObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GenericDialogTextObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GenericDialogTextObject>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GenericDialogTextObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GenericDialogTextObject(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GenericDialogTextObject __CreateInstance(global::Sample.GenericDialogTextObject.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GenericDialogTextObject(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GenericDialogTextObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GenericDialogTextObject.__Internal));
            *(global::Sample.GenericDialogTextObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GenericDialogTextObject(global::Sample.GenericDialogTextObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GenericDialogTextObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GenericDialogTextObjectVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GenericDialogTextObjectVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GenericDialogTextObjectVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GenericDialogTextObjectVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GenericDialogTextObjectVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GenericDialogTextObjectVtbl __CreateInstance(global::Sample.GenericDialogTextObjectVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GenericDialogTextObjectVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GenericDialogTextObjectVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GenericDialogTextObjectVtbl.__Internal));
            *(global::Sample.GenericDialogTextObjectVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GenericDialogTextObjectVtbl(global::Sample.GenericDialogTextObjectVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GenericDialogTextObjectVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class DataSourceVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DataSourceVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DataSourceVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DataSourceVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DataSourceVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DataSourceVtbl __CreateInstance(global::Sample.DataSourceVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DataSourceVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DataSourceVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DataSourceVtbl.__Internal));
            *(global::Sample.DataSourceVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DataSourceVtbl(global::Sample.DataSourceVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DataSourceVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MasterDBMapVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MasterDBMapVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MasterDBMapVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MasterDBMapVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MasterDBMapVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MasterDBMapVtbl __CreateInstance(global::Sample.MasterDBMapVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MasterDBMapVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MasterDBMapVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MasterDBMapVtbl.__Internal));
            *(global::Sample.MasterDBMapVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MasterDBMapVtbl(global::Sample.MasterDBMapVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MasterDBMapVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAllIterationListVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAllIterationListVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAllIterationListVtbl __CreateInstance(global::Sample.CAllIterationListVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAllIterationListVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAllIterationListVtbl.__Internal));
            *(global::Sample.CAllIterationListVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAllIterationListVtbl(global::Sample.CAllIterationListVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAllIterationListVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAllIterationListPTaggedIterationList
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListPTaggedIterationList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListPTaggedIterationList>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAllIterationListPTaggedIterationList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListPTaggedIterationList(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAllIterationListPTaggedIterationList __CreateInstance(global::Sample.CAllIterationListPTaggedIterationList.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListPTaggedIterationList(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAllIterationListPTaggedIterationList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAllIterationListPTaggedIterationList.__Internal));
            *(global::Sample.CAllIterationListPTaggedIterationList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAllIterationListPTaggedIterationList(global::Sample.CAllIterationListPTaggedIterationList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAllIterationListPTaggedIterationList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAllIterationListPTaggedIterationListVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListPTaggedIterationListVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAllIterationListPTaggedIterationListVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAllIterationListPTaggedIterationListVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListPTaggedIterationListVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAllIterationListPTaggedIterationListVtbl __CreateInstance(global::Sample.CAllIterationListPTaggedIterationListVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAllIterationListPTaggedIterationListVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAllIterationListPTaggedIterationListVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAllIterationListPTaggedIterationListVtbl.__Internal));
            *(global::Sample.CAllIterationListPTaggedIterationListVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAllIterationListPTaggedIterationListVtbl(global::Sample.CAllIterationListPTaggedIterationListVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAllIterationListPTaggedIterationListVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringTableMetaLanguageNode
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableMetaLanguageNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableMetaLanguageNode>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringTableMetaLanguageNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringTableMetaLanguageNode(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringTableMetaLanguageNode __CreateInstance(global::Sample.StringTableMetaLanguageNode.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringTableMetaLanguageNode(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringTableMetaLanguageNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringTableMetaLanguageNode.__Internal));
            *(global::Sample.StringTableMetaLanguageNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringTableMetaLanguageNode(global::Sample.StringTableMetaLanguageNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringTableMetaLanguageNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringTableGenVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableGenVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableGenVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringTableGenVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringTableGenVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringTableGenVtbl __CreateInstance(global::Sample.StringTableGenVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringTableGenVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringTableGenVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringTableGenVtbl.__Internal));
            *(global::Sample.StringTableGenVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringTableGenVtbl(global::Sample.StringTableGenVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringTableGenVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class StringTableString
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.StringTableString>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.StringTableString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.StringTableString(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.StringTableString __CreateInstance(global::Sample.StringTableString.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.StringTableString(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.StringTableString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.StringTableString.__Internal));
            *(global::Sample.StringTableString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringTableString(global::Sample.StringTableString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringTableString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FormattedStringInfoDataVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FormattedStringInfoDataVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FormattedStringInfoDataVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FormattedStringInfoDataVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FormattedStringInfoDataVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FormattedStringInfoDataVtbl __CreateInstance(global::Sample.FormattedStringInfoDataVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FormattedStringInfoDataVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FormattedStringInfoDataVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FormattedStringInfoDataVtbl.__Internal));
            *(global::Sample.FormattedStringInfoDataVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FormattedStringInfoDataVtbl(global::Sample.FormattedStringInfoDataVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FormattedStringInfoDataVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CImeFontWrapperVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CImeFontWrapperVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CImeFontWrapperVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CImeFontWrapperVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CImeFontWrapperVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CImeFontWrapperVtbl __CreateInstance(global::Sample.CImeFontWrapperVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CImeFontWrapperVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CImeFontWrapperVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CImeFontWrapperVtbl.__Internal));
            *(global::Sample.CImeFontWrapperVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CImeFontWrapperVtbl(global::Sample.CImeFontWrapperVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CImeFontWrapperVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class INonDelegatingUnknownVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.INonDelegatingUnknownVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.INonDelegatingUnknownVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.INonDelegatingUnknownVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.INonDelegatingUnknownVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.INonDelegatingUnknownVtbl __CreateInstance(global::Sample.INonDelegatingUnknownVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.INonDelegatingUnknownVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.INonDelegatingUnknownVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.INonDelegatingUnknownVtbl.__Internal));
            *(global::Sample.INonDelegatingUnknownVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private INonDelegatingUnknownVtbl(global::Sample.INonDelegatingUnknownVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected INonDelegatingUnknownVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMsgThreadVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMsgThreadVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMsgThreadVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMsgThreadVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMsgThreadVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMsgThreadVtbl __CreateInstance(global::Sample.CMsgThreadVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMsgThreadVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMsgThreadVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMsgThreadVtbl.__Internal));
            *(global::Sample.CMsgThreadVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMsgThreadVtbl(global::Sample.CMsgThreadVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMsgThreadVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CDeferredCommand
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CDeferredCommand> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CDeferredCommand>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CDeferredCommand __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CDeferredCommand(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CDeferredCommand __CreateInstance(global::Sample.CDeferredCommand.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CDeferredCommand(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CDeferredCommand.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CDeferredCommand.__Internal));
            *(global::Sample.CDeferredCommand.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CDeferredCommand(global::Sample.CDeferredCommand.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CDeferredCommand(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IReferenceClock
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IReferenceClock> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IReferenceClock>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IReferenceClock __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IReferenceClock(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IReferenceClock __CreateInstance(global::Sample.IReferenceClock.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IReferenceClock(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IReferenceClock.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IReferenceClock.__Internal));
            *(global::Sample.IReferenceClock.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IReferenceClock(global::Sample.IReferenceClock.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IReferenceClock(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CCmdQueueVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCmdQueueVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CCmdQueueVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CCmdQueueVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CCmdQueueVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CCmdQueueVtbl __CreateInstance(global::Sample.CCmdQueueVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CCmdQueueVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CCmdQueueVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CCmdQueueVtbl.__Internal));
            *(global::Sample.CCmdQueueVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCmdQueueVtbl(global::Sample.CCmdQueueVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCmdQueueVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IMemAllocatorNotifyCallbackTemp
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMemAllocatorNotifyCallbackTemp> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMemAllocatorNotifyCallbackTemp>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMemAllocatorNotifyCallbackTemp __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMemAllocatorNotifyCallbackTemp(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMemAllocatorNotifyCallbackTemp __CreateInstance(global::Sample.IMemAllocatorNotifyCallbackTemp.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMemAllocatorNotifyCallbackTemp(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMemAllocatorNotifyCallbackTemp.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMemAllocatorNotifyCallbackTemp.__Internal));
            *(global::Sample.IMemAllocatorNotifyCallbackTemp.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMemAllocatorNotifyCallbackTemp(global::Sample.IMemAllocatorNotifyCallbackTemp.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMemAllocatorNotifyCallbackTemp(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CBaseAllocator
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBaseAllocator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CBaseAllocator>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CBaseAllocator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CBaseAllocator(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CBaseAllocator __CreateInstance(global::Sample.CBaseAllocator.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CBaseAllocator(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CBaseAllocator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CBaseAllocator.__Internal));
            *(global::Sample.CBaseAllocator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CBaseAllocator(global::Sample.CBaseAllocator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CBaseAllocator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CMediaSample
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMediaSample> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CMediaSample>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CMediaSample __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CMediaSample(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CMediaSample __CreateInstance(global::Sample.CMediaSample.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CMediaSample(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CMediaSample.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CMediaSample.__Internal));
            *(global::Sample.CMediaSample.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CMediaSample(global::Sample.CMediaSample.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CMediaSample(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CRendererInputPin
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRendererInputPin> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRendererInputPin>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRendererInputPin __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRendererInputPin(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRendererInputPin __CreateInstance(global::Sample.CRendererInputPin.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRendererInputPin(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRendererInputPin.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRendererInputPin.__Internal));
            *(global::Sample.CRendererInputPin.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRendererInputPin(global::Sample.CRendererInputPin.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRendererInputPin(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CAMScheduleVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAMScheduleVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CAMScheduleVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CAMScheduleVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CAMScheduleVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CAMScheduleVtbl __CreateInstance(global::Sample.CAMScheduleVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CAMScheduleVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CAMScheduleVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CAMScheduleVtbl.__Internal));
            *(global::Sample.CAMScheduleVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAMScheduleVtbl(global::Sample.CAMScheduleVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAMScheduleVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IRegistrarBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRegistrarBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRegistrarBase>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IRegistrarBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IRegistrarBase(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IRegistrarBase __CreateInstance(global::Sample.IRegistrarBase.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IRegistrarBase(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IRegistrarBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IRegistrarBase.__Internal));
            *(global::Sample.IRegistrarBase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IRegistrarBase(global::Sample.IRegistrarBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IRegistrarBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ATL_CAtlModuleVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ATL_CAtlModuleVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ATL_CAtlModuleVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ATL_CAtlModuleVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ATL_CAtlModuleVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ATL_CAtlModuleVtbl __CreateInstance(global::Sample.ATL_CAtlModuleVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ATL_CAtlModuleVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ATL_CAtlModuleVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ATL_CAtlModuleVtbl.__Internal));
            *(global::Sample.ATL_CAtlModuleVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ATL_CAtlModuleVtbl(global::Sample.ATL_CAtlModuleVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ATL_CAtlModuleVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ATL_IAtlAutoThreadModuleVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ATL_IAtlAutoThreadModuleVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ATL_IAtlAutoThreadModuleVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ATL_IAtlAutoThreadModuleVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ATL_IAtlAutoThreadModuleVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ATL_IAtlAutoThreadModuleVtbl __CreateInstance(global::Sample.ATL_IAtlAutoThreadModuleVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ATL_IAtlAutoThreadModuleVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ATL_IAtlAutoThreadModuleVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ATL_IAtlAutoThreadModuleVtbl.__Internal));
            *(global::Sample.ATL_IAtlAutoThreadModuleVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ATL_IAtlAutoThreadModuleVtbl(global::Sample.ATL_IAtlAutoThreadModuleVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ATL_IAtlAutoThreadModuleVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ImageDecoderVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ImageDecoderVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ImageDecoderVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ImageDecoderVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ImageDecoderVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ImageDecoderVtbl __CreateInstance(global::Sample.ImageDecoderVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ImageDecoderVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ImageDecoderVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ImageDecoderVtbl.__Internal));
            *(global::Sample.ImageDecoderVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImageDecoderVtbl(global::Sample.ImageDecoderVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImageDecoderVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IAlternateDCProviderVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAlternateDCProviderVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IAlternateDCProviderVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IAlternateDCProviderVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IAlternateDCProviderVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IAlternateDCProviderVtbl __CreateInstance(global::Sample.IAlternateDCProviderVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IAlternateDCProviderVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IAlternateDCProviderVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IAlternateDCProviderVtbl.__Internal));
            *(global::Sample.IAlternateDCProviderVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IAlternateDCProviderVtbl(global::Sample.IAlternateDCProviderVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IAlternateDCProviderVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IBrowserCallbackVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBrowserCallbackVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IBrowserCallbackVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IBrowserCallbackVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IBrowserCallbackVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IBrowserCallbackVtbl __CreateInstance(global::Sample.IBrowserCallbackVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IBrowserCallbackVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IBrowserCallbackVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IBrowserCallbackVtbl.__Internal));
            *(global::Sample.IBrowserCallbackVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IBrowserCallbackVtbl(global::Sample.IBrowserCallbackVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IBrowserCallbackVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ItemListDragHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemListDragHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemListDragHandler>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ItemListDragHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ItemListDragHandler(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ItemListDragHandler __CreateInstance(global::Sample.ItemListDragHandler.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ItemListDragHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ItemListDragHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ItemListDragHandler.__Internal));
            *(global::Sample.ItemListDragHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ItemListDragHandler(global::Sample.ItemListDragHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ItemListDragHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ItemListDragHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemListDragHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemListDragHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ItemListDragHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ItemListDragHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ItemListDragHandlerVtbl __CreateInstance(global::Sample.ItemListDragHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ItemListDragHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ItemListDragHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ItemListDragHandlerVtbl.__Internal));
            *(global::Sample.ItemListDragHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ItemListDragHandlerVtbl(global::Sample.ItemListDragHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ItemListDragHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class UIOption
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIOption> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UIOption>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UIOption __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UIOption(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UIOption __CreateInstance(global::Sample.UIOption.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UIOption(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UIOption.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UIOption.__Internal));
            *(global::Sample.UIOption.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UIOption(global::Sample.UIOption.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UIOption(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IOptionChangeHandlerVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOptionChangeHandlerVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IOptionChangeHandlerVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IOptionChangeHandlerVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IOptionChangeHandlerVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IOptionChangeHandlerVtbl __CreateInstance(global::Sample.IOptionChangeHandlerVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IOptionChangeHandlerVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IOptionChangeHandlerVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IOptionChangeHandlerVtbl.__Internal));
            *(global::Sample.IOptionChangeHandlerVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IOptionChangeHandlerVtbl(global::Sample.IOptionChangeHandlerVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IOptionChangeHandlerVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ExamineSubUIVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ExamineSubUIVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ExamineSubUIVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ExamineSubUIVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ExamineSubUIVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ExamineSubUIVtbl __CreateInstance(global::Sample.ExamineSubUIVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ExamineSubUIVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ExamineSubUIVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ExamineSubUIVtbl.__Internal));
            *(global::Sample.ExamineSubUIVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ExamineSubUIVtbl(global::Sample.ExamineSubUIVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ExamineSubUIVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmExaminationUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmExaminationUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmExaminationUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmExaminationUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmExaminationUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmExaminationUI __CreateInstance(global::Sample.GmExaminationUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmExaminationUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmExaminationUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmExaminationUI.__Internal));
            *(global::Sample.GmExaminationUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmExaminationUI(global::Sample.GmExaminationUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmExaminationUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ItemExamineUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemExamineUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ItemExamineUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ItemExamineUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ItemExamineUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ItemExamineUI __CreateInstance(global::Sample.ItemExamineUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ItemExamineUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ItemExamineUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ItemExamineUI.__Internal));
            *(global::Sample.ItemExamineUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ItemExamineUI(global::Sample.ItemExamineUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ItemExamineUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CreatureExamineUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CreatureExamineUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CreatureExamineUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CreatureExamineUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CreatureExamineUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CreatureExamineUI __CreateInstance(global::Sample.CreatureExamineUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CreatureExamineUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CreatureExamineUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CreatureExamineUI.__Internal));
            *(global::Sample.CreatureExamineUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CreatureExamineUI(global::Sample.CreatureExamineUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CreatureExamineUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CharExamineUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CharExamineUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CharExamineUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CharExamineUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CharExamineUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CharExamineUI __CreateInstance(global::Sample.CharExamineUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CharExamineUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CharExamineUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CharExamineUI.__Internal));
            *(global::Sample.CharExamineUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CharExamineUI(global::Sample.CharExamineUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CharExamineUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SpellExamineUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SpellExamineUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SpellExamineUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SpellExamineUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SpellExamineUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SpellExamineUI __CreateInstance(global::Sample.SpellExamineUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SpellExamineUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SpellExamineUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SpellExamineUI.__Internal));
            *(global::Sample.SpellExamineUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpellExamineUI(global::Sample.SpellExamineUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpellExamineUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VendorSubUIVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorSubUIVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorSubUIVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.VendorSubUIVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.VendorSubUIVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.VendorSubUIVtbl __CreateInstance(global::Sample.VendorSubUIVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.VendorSubUIVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.VendorSubUIVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.VendorSubUIVtbl.__Internal));
            *(global::Sample.VendorSubUIVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VendorSubUIVtbl(global::Sample.VendorSubUIVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VendorSubUIVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmVendorUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmVendorUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmVendorUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmVendorUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmVendorUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmVendorUI __CreateInstance(global::Sample.GmVendorUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmVendorUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmVendorUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmVendorUI.__Internal));
            *(global::Sample.GmVendorUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmVendorUI(global::Sample.GmVendorUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmVendorUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VendorItemsUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorItemsUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorItemsUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.VendorItemsUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.VendorItemsUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.VendorItemsUI __CreateInstance(global::Sample.VendorItemsUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.VendorItemsUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.VendorItemsUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.VendorItemsUI.__Internal));
            *(global::Sample.VendorItemsUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VendorItemsUI(global::Sample.VendorItemsUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VendorItemsUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VendorBuyUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorBuyUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorBuyUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.VendorBuyUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.VendorBuyUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.VendorBuyUI __CreateInstance(global::Sample.VendorBuyUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.VendorBuyUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.VendorBuyUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.VendorBuyUI.__Internal));
            *(global::Sample.VendorBuyUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VendorBuyUI(global::Sample.VendorBuyUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VendorBuyUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VendorSellUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorSellUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.VendorSellUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.VendorSellUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.VendorSellUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.VendorSellUI __CreateInstance(global::Sample.VendorSellUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.VendorSellUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.VendorSellUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.VendorSellUI.__Internal));
            *(global::Sample.VendorSellUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VendorSellUI(global::Sample.VendorSellUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VendorSellUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GameBoardGrid
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GameBoardGrid> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GameBoardGrid>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GameBoardGrid __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GameBoardGrid(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GameBoardGrid __CreateInstance(global::Sample.GameBoardGrid.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GameBoardGrid(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GameBoardGrid.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GameBoardGrid.__Internal));
            *(global::Sample.GameBoardGrid.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GameBoardGrid(global::Sample.GameBoardGrid.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GameBoardGrid(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCharGenMainUI
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCharGenMainUI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCharGenMainUI>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCharGenMainUI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCharGenMainUI(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCharGenMainUI __CreateInstance(global::Sample.GmCharGenMainUI.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCharGenMainUI(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCharGenMainUI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCharGenMainUI.__Internal));
            *(global::Sample.GmCharGenMainUI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCharGenMainUI(global::Sample.GmCharGenMainUI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCharGenMainUI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCGProfessionPage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGProfessionPage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGProfessionPage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCGProfessionPage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCGProfessionPage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCGProfessionPage __CreateInstance(global::Sample.GmCGProfessionPage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCGProfessionPage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCGProfessionPage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCGProfessionPage.__Internal));
            *(global::Sample.GmCGProfessionPage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCGProfessionPage(global::Sample.GmCGProfessionPage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCGProfessionPage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCGSkillsPage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGSkillsPage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGSkillsPage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCGSkillsPage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCGSkillsPage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCGSkillsPage __CreateInstance(global::Sample.GmCGSkillsPage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCGSkillsPage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCGSkillsPage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCGSkillsPage.__Internal));
            *(global::Sample.GmCGSkillsPage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCGSkillsPage(global::Sample.GmCGSkillsPage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCGSkillsPage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCGAppearancePage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGAppearancePage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGAppearancePage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCGAppearancePage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCGAppearancePage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCGAppearancePage __CreateInstance(global::Sample.GmCGAppearancePage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCGAppearancePage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCGAppearancePage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCGAppearancePage.__Internal));
            *(global::Sample.GmCGAppearancePage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCGAppearancePage(global::Sample.GmCGAppearancePage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCGAppearancePage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCGTownPage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGTownPage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGTownPage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCGTownPage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCGTownPage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCGTownPage __CreateInstance(global::Sample.GmCGTownPage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCGTownPage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCGTownPage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCGTownPage.__Internal));
            *(global::Sample.GmCGTownPage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCGTownPage(global::Sample.GmCGTownPage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCGTownPage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GmCGSummaryPage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGSummaryPage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GmCGSummaryPage>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GmCGSummaryPage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GmCGSummaryPage(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GmCGSummaryPage __CreateInstance(global::Sample.GmCGSummaryPage.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GmCGSummaryPage(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GmCGSummaryPage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GmCGSummaryPage.__Internal));
            *(global::Sample.GmCGSummaryPage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GmCGSummaryPage(global::Sample.GmCGSummaryPage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GmCGSummaryPage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CloObjectEffect
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CloObjectEffect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CloObjectEffect>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CloObjectEffect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CloObjectEffect(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CloObjectEffect __CreateInstance(global::Sample.CloObjectEffect.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CloObjectEffect(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CloObjectEffect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CloObjectEffect.__Internal));
            *(global::Sample.CloObjectEffect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CloObjectEffect(global::Sample.CloObjectEffect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CloObjectEffect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AC1ModernPositionBaseVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1ModernPositionBaseVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AC1ModernPositionBaseVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AC1ModernPositionBaseVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AC1ModernPositionBaseVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AC1ModernPositionBaseVtbl __CreateInstance(global::Sample.AC1ModernPositionBaseVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AC1ModernPositionBaseVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AC1ModernPositionBaseVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AC1ModernPositionBaseVtbl.__Internal));
            *(global::Sample.AC1ModernPositionBaseVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AC1ModernPositionBaseVtbl(global::Sample.AC1ModernPositionBaseVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AC1ModernPositionBaseVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CWObjHierNode
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CWObjHierNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CWObjHierNode>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CWObjHierNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CWObjHierNode(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CWObjHierNode __CreateInstance(global::Sample.CWObjHierNode.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CWObjHierNode(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CWObjHierNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CWObjHierNode.__Internal));
            *(global::Sample.CWObjHierNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CWObjHierNode(global::Sample.CWObjHierNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CWObjHierNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ComErrorVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ComErrorVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ComErrorVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ComErrorVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ComErrorVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ComErrorVtbl __CreateInstance(global::Sample.ComErrorVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ComErrorVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ComErrorVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ComErrorVtbl.__Internal));
            *(global::Sample.ComErrorVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ComErrorVtbl(global::Sample.ComErrorVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ComErrorVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FILTER_INFO
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FILTER_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FILTER_INFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FILTER_INFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FILTER_INFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FILTER_INFO __CreateInstance(global::Sample.FILTER_INFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FILTER_INFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FILTER_INFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FILTER_INFO.__Internal));
            *(global::Sample.FILTER_INFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FILTER_INFO(global::Sample.FILTER_INFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FILTER_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ID3D10Blob
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ID3D10Blob> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ID3D10Blob>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ID3D10Blob __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ID3D10Blob(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ID3D10Blob __CreateInstance(global::Sample.ID3D10Blob.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ID3D10Blob(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ID3D10Blob.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ID3D10Blob.__Internal));
            *(global::Sample.ID3D10Blob.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ID3D10Blob(global::Sample.ID3D10Blob.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ID3D10Blob(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IXMLDOMDocument2
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMDocument2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMDocument2>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IXMLDOMDocument2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMDocument2(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IXMLDOMDocument2 __CreateInstance(global::Sample.IXMLDOMDocument2.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMDocument2(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IXMLDOMDocument2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IXMLDOMDocument2.__Internal));
            *(global::Sample.IXMLDOMDocument2.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IXMLDOMDocument2(global::Sample.IXMLDOMDocument2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IXMLDOMDocument2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IXMLDOMSchemaCollection
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMSchemaCollection> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMSchemaCollection>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IXMLDOMSchemaCollection __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMSchemaCollection(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IXMLDOMSchemaCollection __CreateInstance(global::Sample.IXMLDOMSchemaCollection.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMSchemaCollection(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IXMLDOMSchemaCollection.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IXMLDOMSchemaCollection.__Internal));
            *(global::Sample.IXMLDOMSchemaCollection.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IXMLDOMSchemaCollection(global::Sample.IXMLDOMSchemaCollection.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IXMLDOMSchemaCollection(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IXMLDOMSchemaCollectionVtbl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMSchemaCollectionVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IXMLDOMSchemaCollectionVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IXMLDOMSchemaCollectionVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMSchemaCollectionVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IXMLDOMSchemaCollectionVtbl __CreateInstance(global::Sample.IXMLDOMSchemaCollectionVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IXMLDOMSchemaCollectionVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IXMLDOMSchemaCollectionVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IXMLDOMSchemaCollectionVtbl.__Internal));
            *(global::Sample.IXMLDOMSchemaCollectionVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IXMLDOMSchemaCollectionVtbl(global::Sample.IXMLDOMSchemaCollectionVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IXMLDOMSchemaCollectionVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SCOPETABLE_ENTRY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int EnclosingLevel;

            [FieldOffset(4)]
            internal global::System.IntPtr FilterFunc;

            [FieldOffset(8)]
            internal global::System.IntPtr HandlerFunc;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SCOPETABLE_ENTRY@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SCOPETABLE_ENTRY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SCOPETABLE_ENTRY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SCOPETABLE_ENTRY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SCOPETABLE_ENTRY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SCOPETABLE_ENTRY __CreateInstance(global::Sample.SCOPETABLE_ENTRY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SCOPETABLE_ENTRY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SCOPETABLE_ENTRY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SCOPETABLE_ENTRY.__Internal));
            *(global::Sample.SCOPETABLE_ENTRY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SCOPETABLE_ENTRY(global::Sample.SCOPETABLE_ENTRY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SCOPETABLE_ENTRY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SCOPETABLE_ENTRY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SCOPETABLE_ENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SCOPETABLE_ENTRY(global::Sample.SCOPETABLE_ENTRY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SCOPETABLE_ENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SCOPETABLE_ENTRY.__Internal*) __Instance) = *((global::Sample.SCOPETABLE_ENTRY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SCOPETABLE_ENTRY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int EnclosingLevel
        {
            get
            {
                return ((global::Sample.SCOPETABLE_ENTRY.__Internal*) __Instance)->EnclosingLevel;
            }

            set
            {
                ((global::Sample.SCOPETABLE_ENTRY.__Internal*)__Instance)->EnclosingLevel = value;
            }
        }

        public global::System.IntPtr FilterFunc
        {
            get
            {
                return ((global::Sample.SCOPETABLE_ENTRY.__Internal*) __Instance)->FilterFunc;
            }

            set
            {
                ((global::Sample.SCOPETABLE_ENTRY.__Internal*)__Instance)->FilterFunc = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HandlerFunc
        {
            get
            {
                return ((global::Sample.SCOPETABLE_ENTRY.__Internal*) __Instance)->HandlerFunc;
            }

            set
            {
                ((global::Sample.SCOPETABLE_ENTRY.__Internal*)__Instance)->HandlerFunc = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class EH3EXCEPTION_REGISTRATION : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Next;

            [FieldOffset(4)]
            internal global::System.IntPtr ExceptionHandler;

            [FieldOffset(8)]
            internal global::System.IntPtr ScopeTable;

            [FieldOffset(12)]
            internal uint TryLevel;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_EH3_EXCEPTION_REGISTRATION@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EH3EXCEPTION_REGISTRATION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EH3EXCEPTION_REGISTRATION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EH3EXCEPTION_REGISTRATION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EH3EXCEPTION_REGISTRATION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EH3EXCEPTION_REGISTRATION __CreateInstance(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EH3EXCEPTION_REGISTRATION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal));
            *(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EH3EXCEPTION_REGISTRATION(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EH3EXCEPTION_REGISTRATION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EH3EXCEPTION_REGISTRATION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EH3EXCEPTION_REGISTRATION(global::Sample.EH3EXCEPTION_REGISTRATION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance) = *((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EH3EXCEPTION_REGISTRATION __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.EH3EXCEPTION_REGISTRATION Next
        {
            get
            {
                global::Sample.EH3EXCEPTION_REGISTRATION __result0;
                if (((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->Next == IntPtr.Zero) __result0 = null;
                else if (global::Sample.EH3EXCEPTION_REGISTRATION.NativeToManagedMap.ContainsKey(((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->Next))
                    __result0 = (global::Sample.EH3EXCEPTION_REGISTRATION) global::Sample.EH3EXCEPTION_REGISTRATION.NativeToManagedMap[((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->Next];
                else __result0 = global::Sample.EH3EXCEPTION_REGISTRATION.__CreateInstance(((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->Next);
                return __result0;
            }

            set
            {
                ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*)__Instance)->Next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr ExceptionHandler
        {
            get
            {
                return ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->ExceptionHandler;
            }

            set
            {
                ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*)__Instance)->ExceptionHandler = (global::System.IntPtr) value;
            }
        }

        public global::Sample.SCOPETABLE_ENTRY ScopeTable
        {
            get
            {
                global::Sample.SCOPETABLE_ENTRY __result0;
                if (((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->ScopeTable == IntPtr.Zero) __result0 = null;
                else if (global::Sample.SCOPETABLE_ENTRY.NativeToManagedMap.ContainsKey(((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->ScopeTable))
                    __result0 = (global::Sample.SCOPETABLE_ENTRY) global::Sample.SCOPETABLE_ENTRY.NativeToManagedMap[((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->ScopeTable];
                else __result0 = global::Sample.SCOPETABLE_ENTRY.__CreateInstance(((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->ScopeTable);
                return __result0;
            }

            set
            {
                ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*)__Instance)->ScopeTable = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint TryLevel
        {
            get
            {
                return ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) __Instance)->TryLevel;
            }

            set
            {
                ((global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*)__Instance)->TryLevel = value;
            }
        }
    }

    public unsafe partial class CPPEH_RECORD : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint old_esp;

            [FieldOffset(4)]
            internal global::System.IntPtr exc_ptr;

            [FieldOffset(8)]
            internal global::Sample.EH3EXCEPTION_REGISTRATION.__Internal registration;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0CPPEH_RECORD@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPPEH_RECORD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CPPEH_RECORD>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CPPEH_RECORD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CPPEH_RECORD(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CPPEH_RECORD __CreateInstance(global::Sample.CPPEH_RECORD.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CPPEH_RECORD(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CPPEH_RECORD.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CPPEH_RECORD.__Internal));
            *(global::Sample.CPPEH_RECORD.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPPEH_RECORD(global::Sample.CPPEH_RECORD.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPPEH_RECORD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CPPEH_RECORD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CPPEH_RECORD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CPPEH_RECORD(global::Sample.CPPEH_RECORD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CPPEH_RECORD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CPPEH_RECORD.__Internal*) __Instance) = *((global::Sample.CPPEH_RECORD.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CPPEH_RECORD __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint OldEsp
        {
            get
            {
                return ((global::Sample.CPPEH_RECORD.__Internal*) __Instance)->old_esp;
            }

            set
            {
                ((global::Sample.CPPEH_RECORD.__Internal*)__Instance)->old_esp = value;
            }
        }

        public void** ExcPtr
        {
            get
            {
                return ((global::Sample.CPPEH_RECORD.__Internal*) __Instance)->exc_ptr;
            }

            set
            {
                ((global::Sample.CPPEH_RECORD.__Internal*)__Instance)->exc_ptr = value;
            }
        }

        public global::Sample.EH3EXCEPTION_REGISTRATION Registration
        {
            get
            {
                return global::Sample.EH3EXCEPTION_REGISTRATION.__CreateInstance(new global::System.IntPtr(&((global::Sample.CPPEH_RECORD.__Internal*) __Instance)->registration));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.CPPEH_RECORD.__Internal*)__Instance)->registration = *(global::Sample.EH3EXCEPTION_REGISTRATION.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class MEMORY_BASIC_INFORMATION : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr BaseAddress;

            [FieldOffset(4)]
            internal global::System.IntPtr AllocationBase;

            [FieldOffset(8)]
            internal uint AllocationProtect;

            [FieldOffset(12)]
            internal uint RegionSize;

            [FieldOffset(16)]
            internal uint State;

            [FieldOffset(20)]
            internal uint Protect;

            [FieldOffset(24)]
            internal uint Type;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MEMORY_BASIC_INFORMATION@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORY_BASIC_INFORMATION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORY_BASIC_INFORMATION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MEMORY_BASIC_INFORMATION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MEMORY_BASIC_INFORMATION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MEMORY_BASIC_INFORMATION __CreateInstance(global::Sample.MEMORY_BASIC_INFORMATION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MEMORY_BASIC_INFORMATION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MEMORY_BASIC_INFORMATION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION.__Internal));
            *(global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MEMORY_BASIC_INFORMATION(global::Sample.MEMORY_BASIC_INFORMATION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MEMORY_BASIC_INFORMATION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MEMORY_BASIC_INFORMATION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MEMORY_BASIC_INFORMATION(global::Sample.MEMORY_BASIC_INFORMATION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance) = *((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MEMORY_BASIC_INFORMATION __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr BaseAddress
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->BaseAddress;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->BaseAddress = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr AllocationBase
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->AllocationBase;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->AllocationBase = (global::System.IntPtr) value;
            }
        }

        public uint AllocationProtect
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->AllocationProtect;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->AllocationProtect = value;
            }
        }

        public uint RegionSize
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->RegionSize;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->RegionSize = value;
            }
        }

        public uint State
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->State;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->State = value;
            }
        }

        public uint Protect
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->Protect;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->Protect = value;
            }
        }

        public uint Type
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*) __Instance)->Type;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION.__Internal*)__Instance)->Type = value;
            }
        }
    }

    public unsafe partial class FinddataT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 280)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint attrib;

            [FieldOffset(4)]
            internal int time_create;

            [FieldOffset(8)]
            internal int time_access;

            [FieldOffset(12)]
            internal int time_write;

            [FieldOffset(16)]
            internal uint size;

            [FieldOffset(20)]
            internal fixed sbyte name[260];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_finddata_t@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FinddataT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FinddataT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FinddataT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FinddataT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FinddataT __CreateInstance(global::Sample.FinddataT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FinddataT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FinddataT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FinddataT.__Internal));
            *(global::Sample.FinddataT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FinddataT(global::Sample.FinddataT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FinddataT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FinddataT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FinddataT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FinddataT(global::Sample.FinddataT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FinddataT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FinddataT.__Internal*) __Instance) = *((global::Sample.FinddataT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FinddataT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Attrib
        {
            get
            {
                return ((global::Sample.FinddataT.__Internal*) __Instance)->attrib;
            }

            set
            {
                ((global::Sample.FinddataT.__Internal*)__Instance)->attrib = value;
            }
        }

        public int TimeCreate
        {
            get
            {
                return ((global::Sample.FinddataT.__Internal*) __Instance)->time_create;
            }

            set
            {
                ((global::Sample.FinddataT.__Internal*)__Instance)->time_create = value;
            }
        }

        public int TimeAccess
        {
            get
            {
                return ((global::Sample.FinddataT.__Internal*) __Instance)->time_access;
            }

            set
            {
                ((global::Sample.FinddataT.__Internal*)__Instance)->time_access = value;
            }
        }

        public int TimeWrite
        {
            get
            {
                return ((global::Sample.FinddataT.__Internal*) __Instance)->time_write;
            }

            set
            {
                ((global::Sample.FinddataT.__Internal*)__Instance)->time_write = value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::Sample.FinddataT.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::Sample.FinddataT.__Internal*)__Instance)->size = value;
            }
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.FinddataT.__Internal*) __Instance)->name != null)
                {
                    __value = new sbyte[260];
                    for (int i = 0; i < 260; i++)
                        __value[i] = ((global::Sample.FinddataT.__Internal*) __Instance)->name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 260; i++)
                        ((global::Sample.FinddataT.__Internal*)__Instance)->name[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class LARGE_INTEGER_aa : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint LowPart;

            [FieldOffset(4)]
            internal int HighPart;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_LARGE_INTEGER_aa@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LARGE_INTEGER_aa> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LARGE_INTEGER_aa>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LARGE_INTEGER_aa __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LARGE_INTEGER_aa(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LARGE_INTEGER_aa __CreateInstance(global::Sample.LARGE_INTEGER_aa.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LARGE_INTEGER_aa(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LARGE_INTEGER_aa.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LARGE_INTEGER_aa.__Internal));
            *(global::Sample.LARGE_INTEGER_aa.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LARGE_INTEGER_aa(global::Sample.LARGE_INTEGER_aa.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LARGE_INTEGER_aa(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public LARGE_INTEGER_aa()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.LARGE_INTEGER_aa.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public LARGE_INTEGER_aa(global::Sample.LARGE_INTEGER_aa _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.LARGE_INTEGER_aa.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.LARGE_INTEGER_aa.__Internal*) __Instance) = *((global::Sample.LARGE_INTEGER_aa.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.LARGE_INTEGER_aa __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint LowPart
        {
            get
            {
                return ((global::Sample.LARGE_INTEGER_aa.__Internal*) __Instance)->LowPart;
            }

            set
            {
                ((global::Sample.LARGE_INTEGER_aa.__Internal*)__Instance)->LowPart = value;
            }
        }

        public int HighPart
        {
            get
            {
                return ((global::Sample.LARGE_INTEGER_aa.__Internal*) __Instance)->HighPart;
            }

            set
            {
                ((global::Sample.LARGE_INTEGER_aa.__Internal*)__Instance)->HighPart = value;
            }
        }
    }

    public unsafe partial struct LARGE_INTEGER
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint LowPart;

            [FieldOffset(4)]
            internal int HighPart;

            [FieldOffset(0)]
            internal global::Sample.LARGE_INTEGER_aa.__Internal u;

            [FieldOffset(0)]
            internal long QuadPart;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_LARGE_INTEGER@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private LARGE_INTEGER.__Internal __instance;
        internal LARGE_INTEGER.__Internal __Instance { get { return __instance; } }

        internal static global::Sample.LARGE_INTEGER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LARGE_INTEGER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LARGE_INTEGER __CreateInstance(global::Sample.LARGE_INTEGER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LARGE_INTEGER(native, skipVTables);
        }

        private LARGE_INTEGER(global::Sample.LARGE_INTEGER.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private LARGE_INTEGER(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::Sample.LARGE_INTEGER.__Internal*) native;
        }

        public LARGE_INTEGER(global::Sample.LARGE_INTEGER _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public uint LowPart
        {
            get
            {
                return __instance.LowPart;
            }

            set
            {
                __instance.LowPart = value;
            }
        }

        public int HighPart
        {
            get
            {
                return __instance.HighPart;
            }

            set
            {
                __instance.HighPart = value;
            }
        }

        public global::Sample.LARGE_INTEGER_aa U
        {
            get
            {
                return global::Sample.LARGE_INTEGER_aa.__CreateInstance(__instance.u);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                __instance.u = *(global::Sample.LARGE_INTEGER_aa.__Internal*) value.__Instance;
            }
        }

        public long QuadPart
        {
            get
            {
                return __instance.QuadPart;
            }

            set
            {
                __instance.QuadPart = value;
            }
        }
    }

    public unsafe partial class TagBITMAPINFOHEADER : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint biSize;

            [FieldOffset(4)]
            internal int biWidth;

            [FieldOffset(8)]
            internal int biHeight;

            [FieldOffset(12)]
            internal ushort biPlanes;

            [FieldOffset(14)]
            internal ushort biBitCount;

            [FieldOffset(16)]
            internal uint biCompression;

            [FieldOffset(20)]
            internal uint biSizeImage;

            [FieldOffset(24)]
            internal int biXPelsPerMeter;

            [FieldOffset(28)]
            internal int biYPelsPerMeter;

            [FieldOffset(32)]
            internal uint biClrUsed;

            [FieldOffset(36)]
            internal uint biClrImportant;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagBITMAPINFOHEADER@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPINFOHEADER> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPINFOHEADER>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagBITMAPINFOHEADER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPINFOHEADER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagBITMAPINFOHEADER __CreateInstance(global::Sample.TagBITMAPINFOHEADER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPINFOHEADER(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagBITMAPINFOHEADER.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFOHEADER.__Internal));
            *(global::Sample.TagBITMAPINFOHEADER.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagBITMAPINFOHEADER(global::Sample.TagBITMAPINFOHEADER.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagBITMAPINFOHEADER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagBITMAPINFOHEADER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFOHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagBITMAPINFOHEADER(global::Sample.TagBITMAPINFOHEADER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFOHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance) = *((global::Sample.TagBITMAPINFOHEADER.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagBITMAPINFOHEADER __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint BiSize
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biSize;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biSize = value;
            }
        }

        public int BiWidth
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biWidth;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biWidth = value;
            }
        }

        public int BiHeight
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biHeight;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biHeight = value;
            }
        }

        public ushort BiPlanes
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biPlanes;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biPlanes = value;
            }
        }

        public ushort BiBitCount
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biBitCount;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biBitCount = value;
            }
        }

        public uint BiCompression
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biCompression;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biCompression = value;
            }
        }

        public uint BiSizeImage
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biSizeImage;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biSizeImage = value;
            }
        }

        public int BiXPelsPerMeter
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biXPelsPerMeter;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biXPelsPerMeter = value;
            }
        }

        public int BiYPelsPerMeter
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biYPelsPerMeter;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biYPelsPerMeter = value;
            }
        }

        public uint BiClrUsed
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biClrUsed;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biClrUsed = value;
            }
        }

        public uint BiClrImportant
        {
            get
            {
                return ((global::Sample.TagBITMAPINFOHEADER.__Internal*) __Instance)->biClrImportant;
            }

            set
            {
                ((global::Sample.TagBITMAPINFOHEADER.__Internal*)__Instance)->biClrImportant = value;
            }
        }
    }

    public unsafe partial class TagRGBQUAD : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte rgbBlue;

            [FieldOffset(1)]
            internal byte rgbGreen;

            [FieldOffset(2)]
            internal byte rgbRed;

            [FieldOffset(3)]
            internal byte rgbReserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRGBQUAD@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRGBQUAD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRGBQUAD>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRGBQUAD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRGBQUAD(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRGBQUAD __CreateInstance(global::Sample.TagRGBQUAD.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRGBQUAD(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRGBQUAD.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBQUAD.__Internal));
            *(global::Sample.TagRGBQUAD.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRGBQUAD(global::Sample.TagRGBQUAD.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRGBQUAD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRGBQUAD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBQUAD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRGBQUAD(global::Sample.TagRGBQUAD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBQUAD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRGBQUAD.__Internal*) __Instance) = *((global::Sample.TagRGBQUAD.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRGBQUAD __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte RgbBlue
        {
            get
            {
                return ((global::Sample.TagRGBQUAD.__Internal*) __Instance)->rgbBlue;
            }

            set
            {
                ((global::Sample.TagRGBQUAD.__Internal*)__Instance)->rgbBlue = value;
            }
        }

        public byte RgbGreen
        {
            get
            {
                return ((global::Sample.TagRGBQUAD.__Internal*) __Instance)->rgbGreen;
            }

            set
            {
                ((global::Sample.TagRGBQUAD.__Internal*)__Instance)->rgbGreen = value;
            }
        }

        public byte RgbRed
        {
            get
            {
                return ((global::Sample.TagRGBQUAD.__Internal*) __Instance)->rgbRed;
            }

            set
            {
                ((global::Sample.TagRGBQUAD.__Internal*)__Instance)->rgbRed = value;
            }
        }

        public byte RgbReserved
        {
            get
            {
                return ((global::Sample.TagRGBQUAD.__Internal*) __Instance)->rgbReserved;
            }

            set
            {
                ((global::Sample.TagRGBQUAD.__Internal*)__Instance)->rgbReserved = value;
            }
        }
    }

    public unsafe partial class TagBITMAPINFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Sample.TagBITMAPINFOHEADER.__Internal bmiHeader;

            [FieldOffset(40)]
            internal fixed byte bmiColors[4];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagBITMAPINFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagBITMAPINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagBITMAPINFO __CreateInstance(global::Sample.TagBITMAPINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagBITMAPINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFO.__Internal));
            *(global::Sample.TagBITMAPINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagBITMAPINFO(global::Sample.TagBITMAPINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagBITMAPINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagBITMAPINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagBITMAPINFO(global::Sample.TagBITMAPINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagBITMAPINFO.__Internal*) __Instance) = *((global::Sample.TagBITMAPINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagBITMAPINFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.TagBITMAPINFOHEADER BmiHeader
        {
            get
            {
                return global::Sample.TagBITMAPINFOHEADER.__CreateInstance(new global::System.IntPtr(&((global::Sample.TagBITMAPINFO.__Internal*) __Instance)->bmiHeader));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.TagBITMAPINFO.__Internal*)__Instance)->bmiHeader = *(global::Sample.TagBITMAPINFOHEADER.__Internal*) value.__Instance;
            }
        }

        public global::Sample.TagRGBQUAD[] BmiColors
        {
            get
            {
                global::Sample.TagRGBQUAD[] __value = null;
                if (((global::Sample.TagBITMAPINFO.__Internal*) __Instance)->bmiColors != null)
                {
                    __value = new global::Sample.TagRGBQUAD[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = global::Sample.TagRGBQUAD.__CreateInstance(*((global::Sample.TagRGBQUAD.__Internal*)&(((global::Sample.TagBITMAPINFO.__Internal*) __Instance)->bmiColors[i * sizeof(global::Sample.TagRGBQUAD.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 1)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 1; i++)
                        *(global::Sample.TagRGBQUAD.__Internal*) &((global::Sample.TagBITMAPINFO.__Internal*)__Instance)->bmiColors[i * sizeof(global::Sample.TagRGBQUAD.__Internal)] = *(global::Sample.TagRGBQUAD.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    public unsafe partial class ICONINFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int fIcon;

            [FieldOffset(4)]
            internal uint xHotspot;

            [FieldOffset(8)]
            internal uint yHotspot;

            [FieldOffset(12)]
            internal global::System.IntPtr hbmMask;

            [FieldOffset(16)]
            internal global::System.IntPtr hbmColor;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_ICONINFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ICONINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ICONINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ICONINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ICONINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ICONINFO __CreateInstance(global::Sample.ICONINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ICONINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ICONINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ICONINFO.__Internal));
            *(global::Sample.ICONINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ICONINFO(global::Sample.ICONINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ICONINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ICONINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ICONINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ICONINFO(global::Sample.ICONINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ICONINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.ICONINFO.__Internal*) __Instance) = *((global::Sample.ICONINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.ICONINFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FIcon
        {
            get
            {
                return ((global::Sample.ICONINFO.__Internal*) __Instance)->fIcon;
            }

            set
            {
                ((global::Sample.ICONINFO.__Internal*)__Instance)->fIcon = value;
            }
        }

        public uint XHotspot
        {
            get
            {
                return ((global::Sample.ICONINFO.__Internal*) __Instance)->xHotspot;
            }

            set
            {
                ((global::Sample.ICONINFO.__Internal*)__Instance)->xHotspot = value;
            }
        }

        public uint YHotspot
        {
            get
            {
                return ((global::Sample.ICONINFO.__Internal*) __Instance)->yHotspot;
            }

            set
            {
                ((global::Sample.ICONINFO.__Internal*)__Instance)->yHotspot = value;
            }
        }

        public global::Sample.HBITMAP_ HbmMask
        {
            get
            {
                global::Sample.HBITMAP_ __result0;
                if (((global::Sample.ICONINFO.__Internal*) __Instance)->hbmMask == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HBITMAP_.NativeToManagedMap.ContainsKey(((global::Sample.ICONINFO.__Internal*) __Instance)->hbmMask))
                    __result0 = (global::Sample.HBITMAP_) global::Sample.HBITMAP_.NativeToManagedMap[((global::Sample.ICONINFO.__Internal*) __Instance)->hbmMask];
                else __result0 = global::Sample.HBITMAP_.__CreateInstance(((global::Sample.ICONINFO.__Internal*) __Instance)->hbmMask);
                return __result0;
            }

            set
            {
                ((global::Sample.ICONINFO.__Internal*)__Instance)->hbmMask = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::Sample.HBITMAP_ HbmColor
        {
            get
            {
                global::Sample.HBITMAP_ __result0;
                if (((global::Sample.ICONINFO.__Internal*) __Instance)->hbmColor == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HBITMAP_.NativeToManagedMap.ContainsKey(((global::Sample.ICONINFO.__Internal*) __Instance)->hbmColor))
                    __result0 = (global::Sample.HBITMAP_) global::Sample.HBITMAP_.NativeToManagedMap[((global::Sample.ICONINFO.__Internal*) __Instance)->hbmColor];
                else __result0 = global::Sample.HBITMAP_.__CreateInstance(((global::Sample.ICONINFO.__Internal*) __Instance)->hbmColor);
                return __result0;
            }

            set
            {
                ((global::Sample.ICONINFO.__Internal*)__Instance)->hbmColor = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class HBITMAP_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HBITMAP__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HBITMAP_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HBITMAP_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HBITMAP_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HBITMAP_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HBITMAP_ __CreateInstance(global::Sample.HBITMAP_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HBITMAP_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HBITMAP_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HBITMAP_.__Internal));
            *(global::Sample.HBITMAP_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HBITMAP_(global::Sample.HBITMAP_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HBITMAP_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HBITMAP_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HBITMAP_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HBITMAP_(global::Sample.HBITMAP_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HBITMAP_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HBITMAP_.__Internal*) __Instance) = *((global::Sample.HBITMAP_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HBITMAP_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HBITMAP_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HBITMAP_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class TACMSTREAMHEADER : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 84)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbStruct;

            [FieldOffset(4)]
            internal uint fdwStatus;

            [FieldOffset(8)]
            internal uint dwUser;

            [FieldOffset(12)]
            internal global::System.IntPtr pbSrc;

            [FieldOffset(16)]
            internal uint cbSrcLength;

            [FieldOffset(20)]
            internal uint cbSrcLengthUsed;

            [FieldOffset(24)]
            internal uint dwSrcUser;

            [FieldOffset(28)]
            internal global::System.IntPtr pbDst;

            [FieldOffset(32)]
            internal uint cbDstLength;

            [FieldOffset(36)]
            internal uint cbDstLengthUsed;

            [FieldOffset(40)]
            internal uint dwDstUser;

            [FieldOffset(44)]
            internal fixed uint dwReservedDriver[10];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tACMSTREAMHEADER@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TACMSTREAMHEADER> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TACMSTREAMHEADER>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TACMSTREAMHEADER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TACMSTREAMHEADER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TACMSTREAMHEADER __CreateInstance(global::Sample.TACMSTREAMHEADER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TACMSTREAMHEADER(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TACMSTREAMHEADER.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TACMSTREAMHEADER.__Internal));
            *(global::Sample.TACMSTREAMHEADER.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TACMSTREAMHEADER(global::Sample.TACMSTREAMHEADER.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TACMSTREAMHEADER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TACMSTREAMHEADER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TACMSTREAMHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TACMSTREAMHEADER(global::Sample.TACMSTREAMHEADER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TACMSTREAMHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance) = *((global::Sample.TACMSTREAMHEADER.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TACMSTREAMHEADER __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbStruct
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->cbStruct;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->cbStruct = value;
            }
        }

        public uint FdwStatus
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->fdwStatus;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->fdwStatus = value;
            }
        }

        public uint DwUser
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->dwUser;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->dwUser = value;
            }
        }

        public byte* PbSrc
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->pbSrc;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->pbSrc = (global::System.IntPtr) value;
            }
        }

        public uint CbSrcLength
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->cbSrcLength;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->cbSrcLength = value;
            }
        }

        public uint CbSrcLengthUsed
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->cbSrcLengthUsed;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->cbSrcLengthUsed = value;
            }
        }

        public uint DwSrcUser
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->dwSrcUser;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->dwSrcUser = value;
            }
        }

        public byte* PbDst
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->pbDst;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->pbDst = (global::System.IntPtr) value;
            }
        }

        public uint CbDstLength
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->cbDstLength;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->cbDstLength = value;
            }
        }

        public uint CbDstLengthUsed
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->cbDstLengthUsed;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->cbDstLengthUsed = value;
            }
        }

        public uint DwDstUser
        {
            get
            {
                return ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->dwDstUser;
            }

            set
            {
                ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->dwDstUser = value;
            }
        }

        public uint[] DwReservedDriver
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->dwReservedDriver != null)
                {
                    __value = new uint[10];
                    for (int i = 0; i < 10; i++)
                        __value[i] = ((global::Sample.TACMSTREAMHEADER.__Internal*) __Instance)->dwReservedDriver[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((global::Sample.TACMSTREAMHEADER.__Internal*)__Instance)->dwReservedDriver[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TWAVEFORMATEX : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wFormatTag;

            [FieldOffset(2)]
            internal ushort nChannels;

            [FieldOffset(4)]
            internal uint nSamplesPerSec;

            [FieldOffset(8)]
            internal uint nAvgBytesPerSec;

            [FieldOffset(12)]
            internal ushort nBlockAlign;

            [FieldOffset(14)]
            internal ushort wBitsPerSample;

            [FieldOffset(16)]
            internal ushort cbSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tWAVEFORMATEX@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TWAVEFORMATEX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TWAVEFORMATEX>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TWAVEFORMATEX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TWAVEFORMATEX(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TWAVEFORMATEX __CreateInstance(global::Sample.TWAVEFORMATEX.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TWAVEFORMATEX(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TWAVEFORMATEX.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TWAVEFORMATEX.__Internal));
            *(global::Sample.TWAVEFORMATEX.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TWAVEFORMATEX(global::Sample.TWAVEFORMATEX.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TWAVEFORMATEX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TWAVEFORMATEX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TWAVEFORMATEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TWAVEFORMATEX(global::Sample.TWAVEFORMATEX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TWAVEFORMATEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TWAVEFORMATEX.__Internal*) __Instance) = *((global::Sample.TWAVEFORMATEX.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TWAVEFORMATEX __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WFormatTag
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->wFormatTag;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->wFormatTag = value;
            }
        }

        public ushort NChannels
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->nChannels;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->nChannels = value;
            }
        }

        public uint NSamplesPerSec
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->nSamplesPerSec;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->nSamplesPerSec = value;
            }
        }

        public uint NAvgBytesPerSec
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->nAvgBytesPerSec;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->nAvgBytesPerSec = value;
            }
        }

        public ushort NBlockAlign
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->nBlockAlign;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->nBlockAlign = value;
            }
        }

        public ushort WBitsPerSample
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->wBitsPerSample;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->wBitsPerSample = value;
            }
        }

        public ushort CbSize
        {
            get
            {
                return ((global::Sample.TWAVEFORMATEX.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TWAVEFORMATEX.__Internal*)__Instance)->cbSize = value;
            }
        }
    }

    public unsafe partial class MMIOINFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwFlags;

            [FieldOffset(4)]
            internal uint fccIOProc;

            [FieldOffset(8)]
            internal global::System.IntPtr pIOProc;

            [FieldOffset(12)]
            internal uint wErrorRet;

            [FieldOffset(16)]
            internal global::System.IntPtr htask;

            [FieldOffset(20)]
            internal int cchBuffer;

            [FieldOffset(24)]
            internal global::System.IntPtr pchBuffer;

            [FieldOffset(28)]
            internal global::System.IntPtr pchNext;

            [FieldOffset(32)]
            internal global::System.IntPtr pchEndRead;

            [FieldOffset(36)]
            internal global::System.IntPtr pchEndWrite;

            [FieldOffset(40)]
            internal int lBufOffset;

            [FieldOffset(44)]
            internal int lDiskOffset;

            [FieldOffset(48)]
            internal fixed uint adwInfo[3];

            [FieldOffset(60)]
            internal uint dwReserved1;

            [FieldOffset(64)]
            internal uint dwReserved2;

            [FieldOffset(68)]
            internal global::System.IntPtr hmmio;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MMIOINFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MMIOINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MMIOINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MMIOINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MMIOINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MMIOINFO __CreateInstance(global::Sample.MMIOINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MMIOINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MMIOINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MMIOINFO.__Internal));
            *(global::Sample.MMIOINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MMIOINFO(global::Sample.MMIOINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MMIOINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MMIOINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MMIOINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MMIOINFO(global::Sample.MMIOINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MMIOINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MMIOINFO.__Internal*) __Instance) = *((global::Sample.MMIOINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MMIOINFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->dwFlags = value;
            }
        }

        public uint FccIOProc
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->fccIOProc;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->fccIOProc = value;
            }
        }

        /*public global::System.IntPtr PIOProc
        {
            get
            {
                var __ptr0 = ((global::Sample.MMIOINFO.__Internal*) __Instance)->pIOProc;
                return __ptr0 == IntPtr.Zero ? IntPtr.Zero : (global::System.IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::System.IntPtr));
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->pIOProc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }*/

        public uint WErrorRet
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->wErrorRet;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->wErrorRet = value;
            }
        }

        public global::Sample.HTASK_ Htask
        {
            get
            {
                global::Sample.HTASK_ __result0;
                if (((global::Sample.MMIOINFO.__Internal*) __Instance)->htask == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HTASK_.NativeToManagedMap.ContainsKey(((global::Sample.MMIOINFO.__Internal*) __Instance)->htask))
                    __result0 = (global::Sample.HTASK_) global::Sample.HTASK_.NativeToManagedMap[((global::Sample.MMIOINFO.__Internal*) __Instance)->htask];
                else __result0 = global::Sample.HTASK_.__CreateInstance(((global::Sample.MMIOINFO.__Internal*) __Instance)->htask);
                return __result0;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->htask = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int CchBuffer
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->cchBuffer;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->cchBuffer = value;
            }
        }

        public sbyte* PchBuffer
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->pchBuffer;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->pchBuffer = (global::System.IntPtr) value;
            }
        }

        public sbyte* PchNext
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->pchNext;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->pchNext = (global::System.IntPtr) value;
            }
        }

        public sbyte* PchEndRead
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->pchEndRead;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->pchEndRead = (global::System.IntPtr) value;
            }
        }

        public sbyte* PchEndWrite
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->pchEndWrite;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->pchEndWrite = (global::System.IntPtr) value;
            }
        }

        public int LBufOffset
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->lBufOffset;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->lBufOffset = value;
            }
        }

        public int LDiskOffset
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->lDiskOffset;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->lDiskOffset = value;
            }
        }

        public uint[] AdwInfo
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.MMIOINFO.__Internal*) __Instance)->adwInfo != null)
                {
                    __value = new uint[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::Sample.MMIOINFO.__Internal*) __Instance)->adwInfo[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::Sample.MMIOINFO.__Internal*)__Instance)->adwInfo[i] = value[i];
                }
            }
        }

        public uint DwReserved1
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->dwReserved1;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->dwReserved1 = value;
            }
        }

        public uint DwReserved2
        {
            get
            {
                return ((global::Sample.MMIOINFO.__Internal*) __Instance)->dwReserved2;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->dwReserved2 = value;
            }
        }

        public global::Sample.HMMIO_ Hmmio
        {
            get
            {
                global::Sample.HMMIO_ __result0;
                if (((global::Sample.MMIOINFO.__Internal*) __Instance)->hmmio == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HMMIO_.NativeToManagedMap.ContainsKey(((global::Sample.MMIOINFO.__Internal*) __Instance)->hmmio))
                    __result0 = (global::Sample.HMMIO_) global::Sample.HMMIO_.NativeToManagedMap[((global::Sample.MMIOINFO.__Internal*) __Instance)->hmmio];
                else __result0 = global::Sample.HMMIO_.__CreateInstance(((global::Sample.MMIOINFO.__Internal*) __Instance)->hmmio);
                return __result0;
            }

            set
            {
                ((global::Sample.MMIOINFO.__Internal*)__Instance)->hmmio = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class HTASK_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HTASK__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HTASK_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HTASK_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HTASK_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HTASK_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HTASK_ __CreateInstance(global::Sample.HTASK_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HTASK_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HTASK_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HTASK_.__Internal));
            *(global::Sample.HTASK_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HTASK_(global::Sample.HTASK_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HTASK_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HTASK_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HTASK_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HTASK_(global::Sample.HTASK_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HTASK_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HTASK_.__Internal*) __Instance) = *((global::Sample.HTASK_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HTASK_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HTASK_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HTASK_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class HMMIO_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HMMIO__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMMIO_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMMIO_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HMMIO_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HMMIO_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HMMIO_ __CreateInstance(global::Sample.HMMIO_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HMMIO_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HMMIO_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HMMIO_.__Internal));
            *(global::Sample.HMMIO_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HMMIO_(global::Sample.HMMIO_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HMMIO_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HMMIO_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMMIO_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HMMIO_(global::Sample.HMMIO_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMMIO_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HMMIO_.__Internal*) __Instance) = *((global::Sample.HMMIO_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HMMIO_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HMMIO_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HMMIO_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class OSVERSIONINFOA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 148)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwOSVersionInfoSize;

            [FieldOffset(4)]
            internal uint dwMajorVersion;

            [FieldOffset(8)]
            internal uint dwMinorVersion;

            [FieldOffset(12)]
            internal uint dwBuildNumber;

            [FieldOffset(16)]
            internal uint dwPlatformId;

            [FieldOffset(20)]
            internal fixed sbyte szCSDVersion[128];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_OSVERSIONINFOA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSVERSIONINFOA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSVERSIONINFOA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OSVERSIONINFOA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OSVERSIONINFOA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OSVERSIONINFOA __CreateInstance(global::Sample.OSVERSIONINFOA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OSVERSIONINFOA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OSVERSIONINFOA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOA.__Internal));
            *(global::Sample.OSVERSIONINFOA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OSVERSIONINFOA(global::Sample.OSVERSIONINFOA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OSVERSIONINFOA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public OSVERSIONINFOA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public OSVERSIONINFOA(global::Sample.OSVERSIONINFOA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.OSVERSIONINFOA.__Internal*) __Instance) = *((global::Sample.OSVERSIONINFOA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.OSVERSIONINFOA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwOSVersionInfoSize
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->dwOSVersionInfoSize;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->dwOSVersionInfoSize = value;
            }
        }

        public uint DwMajorVersion
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->dwMajorVersion;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->dwMajorVersion = value;
            }
        }

        public uint DwMinorVersion
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->dwMinorVersion;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->dwMinorVersion = value;
            }
        }

        public uint DwBuildNumber
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->dwBuildNumber;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->dwBuildNumber = value;
            }
        }

        public uint DwPlatformId
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->dwPlatformId;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->dwPlatformId = value;
            }
        }

        public sbyte[] SzCSDVersion
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->szCSDVersion != null)
                {
                    __value = new sbyte[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = ((global::Sample.OSVERSIONINFOA.__Internal*) __Instance)->szCSDVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((global::Sample.OSVERSIONINFOA.__Internal*)__Instance)->szCSDVersion[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class SYSTEM_INFO_bb : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wProcessorArchitecture;

            [FieldOffset(2)]
            internal ushort wReserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SYSTEM_INFO_bb@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SYSTEM_INFO_bb> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SYSTEM_INFO_bb>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SYSTEM_INFO_bb __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO_bb(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SYSTEM_INFO_bb __CreateInstance(global::Sample.SYSTEM_INFO_bb.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO_bb(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SYSTEM_INFO_bb.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO_bb.__Internal));
            *(global::Sample.SYSTEM_INFO_bb.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SYSTEM_INFO_bb(global::Sample.SYSTEM_INFO_bb.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SYSTEM_INFO_bb(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SYSTEM_INFO_bb()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO_bb.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SYSTEM_INFO_bb(global::Sample.SYSTEM_INFO_bb _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO_bb.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SYSTEM_INFO_bb.__Internal*) __Instance) = *((global::Sample.SYSTEM_INFO_bb.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SYSTEM_INFO_bb __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WProcessorArchitecture
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO_bb.__Internal*) __Instance)->wProcessorArchitecture;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO_bb.__Internal*)__Instance)->wProcessorArchitecture = value;
            }
        }

        public ushort WReserved
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO_bb.__Internal*) __Instance)->wReserved;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO_bb.__Internal*)__Instance)->wReserved = value;
            }
        }
    }

    public unsafe partial struct SYSTEM_INFO_aa
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwOemId;

            [FieldOffset(0)]
            internal ushort wProcessorArchitecture;

            [FieldOffset(2)]
            internal ushort wReserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SYSTEM_INFO_aa@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private SYSTEM_INFO_aa.__Internal __instance;
        internal SYSTEM_INFO_aa.__Internal __Instance { get { return __instance; } }

        internal static global::Sample.SYSTEM_INFO_aa __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO_aa(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SYSTEM_INFO_aa __CreateInstance(global::Sample.SYSTEM_INFO_aa.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO_aa(native, skipVTables);
        }

        private SYSTEM_INFO_aa(global::Sample.SYSTEM_INFO_aa.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private SYSTEM_INFO_aa(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::Sample.SYSTEM_INFO_aa.__Internal*) native;
        }

        public SYSTEM_INFO_aa(global::Sample.SYSTEM_INFO_aa _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public uint DwOemId
        {
            get
            {
                return __instance.dwOemId;
            }

            set
            {
                __instance.dwOemId = value;
            }
        }

        public ushort WProcessorArchitecture
        {
            get
            {
                return __instance.wProcessorArchitecture;
            }

            set
            {
                __instance.wProcessorArchitecture = value;
            }
        }

        public ushort WReserved
        {
            get
            {
                return __instance.wReserved;
            }

            set
            {
                __instance.wReserved = value;
            }
        }
    }

    public unsafe partial class SYSTEM_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwOemId;

            [FieldOffset(4)]
            internal uint dwPageSize;

            [FieldOffset(8)]
            internal global::System.IntPtr lpMinimumApplicationAddress;

            [FieldOffset(12)]
            internal global::System.IntPtr lpMaximumApplicationAddress;

            [FieldOffset(16)]
            internal uint dwActiveProcessorMask;

            [FieldOffset(20)]
            internal uint dwNumberOfProcessors;

            [FieldOffset(24)]
            internal uint dwProcessorType;

            [FieldOffset(28)]
            internal uint dwAllocationGranularity;

            [FieldOffset(32)]
            internal ushort wProcessorLevel;

            [FieldOffset(34)]
            internal ushort wProcessorRevision;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SYSTEM_INFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SYSTEM_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SYSTEM_INFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SYSTEM_INFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SYSTEM_INFO __CreateInstance(global::Sample.SYSTEM_INFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SYSTEM_INFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SYSTEM_INFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO.__Internal));
            *(global::Sample.SYSTEM_INFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SYSTEM_INFO(global::Sample.SYSTEM_INFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SYSTEM_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SYSTEM_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SYSTEM_INFO(global::Sample.SYSTEM_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SYSTEM_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SYSTEM_INFO.__Internal*) __Instance) = *((global::Sample.SYSTEM_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SYSTEM_INFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwOemId
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwOemId;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwOemId = value;
            }
        }

        public uint DwPageSize
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwPageSize;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwPageSize = value;
            }
        }

        public global::System.IntPtr LpMinimumApplicationAddress
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->lpMinimumApplicationAddress;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->lpMinimumApplicationAddress = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr LpMaximumApplicationAddress
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->lpMaximumApplicationAddress;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->lpMaximumApplicationAddress = (global::System.IntPtr) value;
            }
        }

        public uint DwActiveProcessorMask
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwActiveProcessorMask;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwActiveProcessorMask = value;
            }
        }

        public uint DwNumberOfProcessors
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwNumberOfProcessors;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwNumberOfProcessors = value;
            }
        }

        public uint DwProcessorType
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwProcessorType;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwProcessorType = value;
            }
        }

        public uint DwAllocationGranularity
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->dwAllocationGranularity;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->dwAllocationGranularity = value;
            }
        }

        public ushort WProcessorLevel
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->wProcessorLevel;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->wProcessorLevel = value;
            }
        }

        public ushort WProcessorRevision
        {
            get
            {
                return ((global::Sample.SYSTEM_INFO.__Internal*) __Instance)->wProcessorRevision;
            }

            set
            {
                ((global::Sample.SYSTEM_INFO.__Internal*)__Instance)->wProcessorRevision = value;
            }
        }
    }

    public unsafe partial class STARTUPINFOA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cb;

            [FieldOffset(4)]
            internal global::System.IntPtr lpReserved;

            [FieldOffset(8)]
            internal global::System.IntPtr lpDesktop;

            [FieldOffset(12)]
            internal global::System.IntPtr lpTitle;

            [FieldOffset(16)]
            internal uint dwX;

            [FieldOffset(20)]
            internal uint dwY;

            [FieldOffset(24)]
            internal uint dwXSize;

            [FieldOffset(28)]
            internal uint dwYSize;

            [FieldOffset(32)]
            internal uint dwXCountChars;

            [FieldOffset(36)]
            internal uint dwYCountChars;

            [FieldOffset(40)]
            internal uint dwFillAttribute;

            [FieldOffset(44)]
            internal uint dwFlags;

            [FieldOffset(48)]
            internal ushort wShowWindow;

            [FieldOffset(50)]
            internal ushort cbReserved2;

            [FieldOffset(52)]
            internal global::System.IntPtr lpReserved2;

            [FieldOffset(56)]
            internal global::System.IntPtr hStdInput;

            [FieldOffset(60)]
            internal global::System.IntPtr hStdOutput;

            [FieldOffset(64)]
            internal global::System.IntPtr hStdError;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_STARTUPINFOA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STARTUPINFOA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STARTUPINFOA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.STARTUPINFOA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.STARTUPINFOA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.STARTUPINFOA __CreateInstance(global::Sample.STARTUPINFOA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.STARTUPINFOA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.STARTUPINFOA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOA.__Internal));
            *(global::Sample.STARTUPINFOA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private STARTUPINFOA(global::Sample.STARTUPINFOA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected STARTUPINFOA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public STARTUPINFOA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public STARTUPINFOA(global::Sample.STARTUPINFOA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.STARTUPINFOA.__Internal*) __Instance) = *((global::Sample.STARTUPINFOA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.STARTUPINFOA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->cb;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->cb = value;
            }
        }

        public sbyte* LpReserved
        {
            get
            {
                return (sbyte*)((global::Sample.STARTUPINFOA.__Internal*) __Instance)->lpReserved;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->lpReserved = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpDesktop
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->lpDesktop;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->lpDesktop = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpTitle
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->lpTitle;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->lpTitle = (global::System.IntPtr) value;
            }
        }

        public uint DwX
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwX;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwX = value;
            }
        }

        public uint DwY
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwY;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwY = value;
            }
        }

        public uint DwXSize
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwXSize;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwXSize = value;
            }
        }

        public uint DwYSize
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwYSize;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwYSize = value;
            }
        }

        public uint DwXCountChars
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwXCountChars;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwXCountChars = value;
            }
        }

        public uint DwYCountChars
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwYCountChars;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwYCountChars = value;
            }
        }

        public uint DwFillAttribute
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwFillAttribute;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwFillAttribute = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->dwFlags = value;
            }
        }

        public ushort WShowWindow
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->wShowWindow;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->wShowWindow = value;
            }
        }

        public ushort CbReserved2
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->cbReserved2;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->cbReserved2 = value;
            }
        }

        public byte* LpReserved2
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->lpReserved2;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->lpReserved2 = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdInput
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->hStdInput;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->hStdInput = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdOutput
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->hStdOutput;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->hStdOutput = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdError
        {
            get
            {
                return ((global::Sample.STARTUPINFOA.__Internal*) __Instance)->hStdError;
            }

            set
            {
                ((global::Sample.STARTUPINFOA.__Internal*)__Instance)->hStdError = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagPOINT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagPOINT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPOINT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPOINT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPOINT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPOINT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPOINT __CreateInstance(global::Sample.TagPOINT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPOINT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPOINT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPOINT.__Internal));
            *(global::Sample.TagPOINT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPOINT(global::Sample.TagPOINT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPOINT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagPOINT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPOINT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagPOINT(global::Sample.TagPOINT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPOINT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagPOINT.__Internal*) __Instance) = *((global::Sample.TagPOINT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagPOINT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int X
        {
            get
            {
                return ((global::Sample.TagPOINT.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.TagPOINT.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::Sample.TagPOINT.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.TagPOINT.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class TagMSG : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr hwnd;

            [FieldOffset(4)]
            internal uint message;

            [FieldOffset(8)]
            internal uint wParam;

            [FieldOffset(12)]
            internal int lParam;

            [FieldOffset(16)]
            internal uint time;

            [FieldOffset(20)]
            internal global::Sample.TagPOINT.__Internal pt;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMSG@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMSG> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMSG>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMSG __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMSG(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMSG __CreateInstance(global::Sample.TagMSG.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMSG(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMSG.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMSG.__Internal));
            *(global::Sample.TagMSG.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMSG(global::Sample.TagMSG.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMSG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMSG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMSG.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMSG(global::Sample.TagMSG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMSG.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMSG.__Internal*) __Instance) = *((global::Sample.TagMSG.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMSG __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.HWND_ Hwnd
        {
            get
            {
                global::Sample.HWND_ __result0;
                if (((global::Sample.TagMSG.__Internal*) __Instance)->hwnd == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HWND_.NativeToManagedMap.ContainsKey(((global::Sample.TagMSG.__Internal*) __Instance)->hwnd))
                    __result0 = (global::Sample.HWND_) global::Sample.HWND_.NativeToManagedMap[((global::Sample.TagMSG.__Internal*) __Instance)->hwnd];
                else __result0 = global::Sample.HWND_.__CreateInstance(((global::Sample.TagMSG.__Internal*) __Instance)->hwnd);
                return __result0;
            }

            set
            {
                ((global::Sample.TagMSG.__Internal*)__Instance)->hwnd = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint Message
        {
            get
            {
                return ((global::Sample.TagMSG.__Internal*) __Instance)->message;
            }

            set
            {
                ((global::Sample.TagMSG.__Internal*)__Instance)->message = value;
            }
        }

        public uint WParam
        {
            get
            {
                return ((global::Sample.TagMSG.__Internal*) __Instance)->wParam;
            }

            set
            {
                ((global::Sample.TagMSG.__Internal*)__Instance)->wParam = value;
            }
        }

        public int LParam
        {
            get
            {
                return ((global::Sample.TagMSG.__Internal*) __Instance)->lParam;
            }

            set
            {
                ((global::Sample.TagMSG.__Internal*)__Instance)->lParam = value;
            }
        }

        public uint Time
        {
            get
            {
                return ((global::Sample.TagMSG.__Internal*) __Instance)->time;
            }

            set
            {
                ((global::Sample.TagMSG.__Internal*)__Instance)->time = value;
            }
        }

        public global::Sample.TagPOINT Pt
        {
            get
            {
                return global::Sample.TagPOINT.__CreateInstance(new global::System.IntPtr(&((global::Sample.TagMSG.__Internal*) __Instance)->pt));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.TagMSG.__Internal*)__Instance)->pt = *(global::Sample.TagPOINT.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class HWND_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HWND__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HWND_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HWND_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HWND_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HWND_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HWND_ __CreateInstance(global::Sample.HWND_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HWND_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HWND_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HWND_.__Internal));
            *(global::Sample.HWND_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HWND_(global::Sample.HWND_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HWND_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HWND_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HWND_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HWND_(global::Sample.HWND_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HWND_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HWND_.__Internal*) __Instance) = *((global::Sample.HWND_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HWND_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HWND_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HWND_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class TagRECT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int left;

            [FieldOffset(4)]
            internal int top;

            [FieldOffset(8)]
            internal int right;

            [FieldOffset(12)]
            internal int bottom;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRECT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRECT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRECT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRECT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRECT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRECT __CreateInstance(global::Sample.TagRECT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRECT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRECT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRECT.__Internal));
            *(global::Sample.TagRECT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRECT(global::Sample.TagRECT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRECT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRECT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRECT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRECT(global::Sample.TagRECT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRECT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRECT.__Internal*) __Instance) = *((global::Sample.TagRECT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRECT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Left
        {
            get
            {
                return ((global::Sample.TagRECT.__Internal*) __Instance)->left;
            }

            set
            {
                ((global::Sample.TagRECT.__Internal*)__Instance)->left = value;
            }
        }

        public int Top
        {
            get
            {
                return ((global::Sample.TagRECT.__Internal*) __Instance)->top;
            }

            set
            {
                ((global::Sample.TagRECT.__Internal*)__Instance)->top = value;
            }
        }

        public int Right
        {
            get
            {
                return ((global::Sample.TagRECT.__Internal*) __Instance)->right;
            }

            set
            {
                ((global::Sample.TagRECT.__Internal*)__Instance)->right = value;
            }
        }

        public int Bottom
        {
            get
            {
                return ((global::Sample.TagRECT.__Internal*) __Instance)->bottom;
            }

            set
            {
                ((global::Sample.TagRECT.__Internal*)__Instance)->bottom = value;
            }
        }
    }

    public unsafe partial class MEMORYSTATUS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwLength;

            [FieldOffset(4)]
            internal uint dwMemoryLoad;

            [FieldOffset(8)]
            internal uint dwTotalPhys;

            [FieldOffset(12)]
            internal uint dwAvailPhys;

            [FieldOffset(16)]
            internal uint dwTotalPageFile;

            [FieldOffset(20)]
            internal uint dwAvailPageFile;

            [FieldOffset(24)]
            internal uint dwTotalVirtual;

            [FieldOffset(28)]
            internal uint dwAvailVirtual;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MEMORYSTATUS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORYSTATUS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORYSTATUS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MEMORYSTATUS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MEMORYSTATUS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MEMORYSTATUS __CreateInstance(global::Sample.MEMORYSTATUS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MEMORYSTATUS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MEMORYSTATUS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORYSTATUS.__Internal));
            *(global::Sample.MEMORYSTATUS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MEMORYSTATUS(global::Sample.MEMORYSTATUS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MEMORYSTATUS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MEMORYSTATUS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORYSTATUS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MEMORYSTATUS(global::Sample.MEMORYSTATUS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORYSTATUS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MEMORYSTATUS.__Internal*) __Instance) = *((global::Sample.MEMORYSTATUS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MEMORYSTATUS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwLength
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwLength;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwLength = value;
            }
        }

        public uint DwMemoryLoad
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwMemoryLoad;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwMemoryLoad = value;
            }
        }

        public uint DwTotalPhys
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwTotalPhys;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwTotalPhys = value;
            }
        }

        public uint DwAvailPhys
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwAvailPhys;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwAvailPhys = value;
            }
        }

        public uint DwTotalPageFile
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwTotalPageFile;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwTotalPageFile = value;
            }
        }

        public uint DwAvailPageFile
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwAvailPageFile;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwAvailPageFile = value;
            }
        }

        public uint DwTotalVirtual
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwTotalVirtual;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwTotalVirtual = value;
            }
        }

        public uint DwAvailVirtual
        {
            get
            {
                return ((global::Sample.MEMORYSTATUS.__Internal*) __Instance)->dwAvailVirtual;
            }

            set
            {
                ((global::Sample.MEMORYSTATUS.__Internal*)__Instance)->dwAvailVirtual = value;
            }
        }
    }

    public unsafe partial class MidihdrTag : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr lpData;

            [FieldOffset(4)]
            internal uint dwBufferLength;

            [FieldOffset(8)]
            internal uint dwBytesRecorded;

            [FieldOffset(12)]
            internal uint dwUser;

            [FieldOffset(16)]
            internal uint dwFlags;

            [FieldOffset(20)]
            internal global::System.IntPtr lpNext;

            [FieldOffset(24)]
            internal uint reserved;

            [FieldOffset(28)]
            internal uint dwOffset;

            [FieldOffset(32)]
            internal fixed uint dwReserved[8];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0midihdr_tag@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MidihdrTag> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MidihdrTag>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MidihdrTag __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MidihdrTag(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MidihdrTag __CreateInstance(global::Sample.MidihdrTag.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MidihdrTag(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MidihdrTag.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MidihdrTag.__Internal));
            *(global::Sample.MidihdrTag.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MidihdrTag(global::Sample.MidihdrTag.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MidihdrTag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MidihdrTag()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MidihdrTag.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MidihdrTag(global::Sample.MidihdrTag _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MidihdrTag.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MidihdrTag.__Internal*) __Instance) = *((global::Sample.MidihdrTag.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MidihdrTag __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* LpData
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->lpData;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->lpData = (global::System.IntPtr) value;
            }
        }

        public uint DwBufferLength
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwBufferLength;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwBufferLength = value;
            }
        }

        public uint DwBytesRecorded
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwBytesRecorded;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwBytesRecorded = value;
            }
        }

        public uint DwUser
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwUser;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwUser = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwFlags = value;
            }
        }

        public global::Sample.MidihdrTag LpNext
        {
            get
            {
                global::Sample.MidihdrTag __result0;
                if (((global::Sample.MidihdrTag.__Internal*) __Instance)->lpNext == IntPtr.Zero) __result0 = null;
                else if (global::Sample.MidihdrTag.NativeToManagedMap.ContainsKey(((global::Sample.MidihdrTag.__Internal*) __Instance)->lpNext))
                    __result0 = (global::Sample.MidihdrTag) global::Sample.MidihdrTag.NativeToManagedMap[((global::Sample.MidihdrTag.__Internal*) __Instance)->lpNext];
                else __result0 = global::Sample.MidihdrTag.__CreateInstance(((global::Sample.MidihdrTag.__Internal*) __Instance)->lpNext);
                return __result0;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->lpNext = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint Reserved
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->reserved;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->reserved = value;
            }
        }

        public uint DwOffset
        {
            get
            {
                return ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwOffset;
            }

            set
            {
                ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwOffset = value;
            }
        }

        public uint[] DwReserved
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.MidihdrTag.__Internal*) __Instance)->dwReserved != null)
                {
                    __value = new uint[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.MidihdrTag.__Internal*) __Instance)->dwReserved[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.MidihdrTag.__Internal*)__Instance)->dwReserved[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class Sockaddr : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort sa_family;

            [FieldOffset(2)]
            internal fixed sbyte sa_data[14];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0sockaddr@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Sockaddr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Sockaddr>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Sockaddr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Sockaddr(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Sockaddr __CreateInstance(global::Sample.Sockaddr.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Sockaddr(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Sockaddr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Sockaddr.__Internal));
            *(global::Sample.Sockaddr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Sockaddr(global::Sample.Sockaddr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Sockaddr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Sockaddr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Sockaddr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Sockaddr(global::Sample.Sockaddr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Sockaddr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.Sockaddr.__Internal*) __Instance) = *((global::Sample.Sockaddr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.Sockaddr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort SaFamily
        {
            get
            {
                return ((global::Sample.Sockaddr.__Internal*) __Instance)->sa_family;
            }

            set
            {
                ((global::Sample.Sockaddr.__Internal*)__Instance)->sa_family = value;
            }
        }

        public sbyte[] SaData
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.Sockaddr.__Internal*) __Instance)->sa_data != null)
                {
                    __value = new sbyte[14];
                    for (int i = 0; i < 14; i++)
                        __value[i] = ((global::Sample.Sockaddr.__Internal*) __Instance)->sa_data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 14; i++)
                        ((global::Sample.Sockaddr.__Internal*)__Instance)->sa_data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class WSAData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 400)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wVersion;

            [FieldOffset(2)]
            internal ushort wHighVersion;

            [FieldOffset(4)]
            internal fixed sbyte szDescription[257];

            [FieldOffset(261)]
            internal fixed sbyte szSystemStatus[129];

            [FieldOffset(390)]
            internal ushort iMaxSockets;

            [FieldOffset(392)]
            internal ushort iMaxUdpDg;

            [FieldOffset(396)]
            internal global::System.IntPtr lpVendorInfo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0WSAData@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WSAData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WSAData>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.WSAData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.WSAData(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.WSAData __CreateInstance(global::Sample.WSAData.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.WSAData(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.WSAData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.WSAData.__Internal));
            *(global::Sample.WSAData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WSAData(global::Sample.WSAData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WSAData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public WSAData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.WSAData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public WSAData(global::Sample.WSAData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.WSAData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.WSAData.__Internal*) __Instance) = *((global::Sample.WSAData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.WSAData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WVersion
        {
            get
            {
                return ((global::Sample.WSAData.__Internal*) __Instance)->wVersion;
            }

            set
            {
                ((global::Sample.WSAData.__Internal*)__Instance)->wVersion = value;
            }
        }

        public ushort WHighVersion
        {
            get
            {
                return ((global::Sample.WSAData.__Internal*) __Instance)->wHighVersion;
            }

            set
            {
                ((global::Sample.WSAData.__Internal*)__Instance)->wHighVersion = value;
            }
        }

        public sbyte[] SzDescription
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.WSAData.__Internal*) __Instance)->szDescription != null)
                {
                    __value = new sbyte[257];
                    for (int i = 0; i < 257; i++)
                        __value[i] = ((global::Sample.WSAData.__Internal*) __Instance)->szDescription[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 257; i++)
                        ((global::Sample.WSAData.__Internal*)__Instance)->szDescription[i] = value[i];
                }
            }
        }

        public sbyte[] SzSystemStatus
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.WSAData.__Internal*) __Instance)->szSystemStatus != null)
                {
                    __value = new sbyte[129];
                    for (int i = 0; i < 129; i++)
                        __value[i] = ((global::Sample.WSAData.__Internal*) __Instance)->szSystemStatus[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 129; i++)
                        ((global::Sample.WSAData.__Internal*)__Instance)->szSystemStatus[i] = value[i];
                }
            }
        }

        public ushort IMaxSockets
        {
            get
            {
                return ((global::Sample.WSAData.__Internal*) __Instance)->iMaxSockets;
            }

            set
            {
                ((global::Sample.WSAData.__Internal*)__Instance)->iMaxSockets = value;
            }
        }

        public ushort IMaxUdpDg
        {
            get
            {
                return ((global::Sample.WSAData.__Internal*) __Instance)->iMaxUdpDg;
            }

            set
            {
                ((global::Sample.WSAData.__Internal*)__Instance)->iMaxUdpDg = value;
            }
        }

        public sbyte* LpVendorInfo
        {
            get
            {
                return (sbyte*) ((global::Sample.WSAData.__Internal*) __Instance)->lpVendorInfo;
            }

            set
            {
                ((global::Sample.WSAData.__Internal*)__Instance)->lpVendorInfo = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class FILETIME : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwLowDateTime;

            [FieldOffset(4)]
            internal uint dwHighDateTime;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FILETIME@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FILETIME> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FILETIME>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FILETIME __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FILETIME(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FILETIME __CreateInstance(global::Sample.FILETIME.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FILETIME(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FILETIME.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FILETIME.__Internal));
            *(global::Sample.FILETIME.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FILETIME(global::Sample.FILETIME.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FILETIME(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FILETIME()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FILETIME.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FILETIME(global::Sample.FILETIME _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FILETIME.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FILETIME.__Internal*) __Instance) = *((global::Sample.FILETIME.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FILETIME __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwLowDateTime
        {
            get
            {
                return ((global::Sample.FILETIME.__Internal*) __Instance)->dwLowDateTime;
            }

            set
            {
                ((global::Sample.FILETIME.__Internal*)__Instance)->dwLowDateTime = value;
            }
        }

        public uint DwHighDateTime
        {
            get
            {
                return ((global::Sample.FILETIME.__Internal*) __Instance)->dwHighDateTime;
            }

            set
            {
                ((global::Sample.FILETIME.__Internal*)__Instance)->dwHighDateTime = value;
            }
        }
    }

    public unsafe partial class WIN32FIND_DATAA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 320)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwFileAttributes;

            [FieldOffset(4)]
            internal global::Sample.FILETIME.__Internal ftCreationTime;

            [FieldOffset(12)]
            internal global::Sample.FILETIME.__Internal ftLastAccessTime;

            [FieldOffset(20)]
            internal global::Sample.FILETIME.__Internal ftLastWriteTime;

            [FieldOffset(28)]
            internal uint nFileSizeHigh;

            [FieldOffset(32)]
            internal uint nFileSizeLow;

            [FieldOffset(36)]
            internal uint dwReserved0;

            [FieldOffset(40)]
            internal uint dwReserved1;

            [FieldOffset(44)]
            internal fixed sbyte cFileName[260];

            [FieldOffset(304)]
            internal fixed sbyte cAlternateFileName[14];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_WIN32_FIND_DATAA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WIN32FIND_DATAA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.WIN32FIND_DATAA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.WIN32FIND_DATAA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.WIN32FIND_DATAA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.WIN32FIND_DATAA __CreateInstance(global::Sample.WIN32FIND_DATAA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.WIN32FIND_DATAA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.WIN32FIND_DATAA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.WIN32FIND_DATAA.__Internal));
            *(global::Sample.WIN32FIND_DATAA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WIN32FIND_DATAA(global::Sample.WIN32FIND_DATAA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WIN32FIND_DATAA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public WIN32FIND_DATAA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.WIN32FIND_DATAA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public WIN32FIND_DATAA(global::Sample.WIN32FIND_DATAA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.WIN32FIND_DATAA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance) = *((global::Sample.WIN32FIND_DATAA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.WIN32FIND_DATAA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwFileAttributes
        {
            get
            {
                return ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->dwFileAttributes;
            }

            set
            {
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->dwFileAttributes = value;
            }
        }

        public global::Sample.FILETIME FtCreationTime
        {
            get
            {
                return global::Sample.FILETIME.__CreateInstance(new global::System.IntPtr(&((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->ftCreationTime));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->ftCreationTime = *(global::Sample.FILETIME.__Internal*) value.__Instance;
            }
        }

        public global::Sample.FILETIME FtLastAccessTime
        {
            get
            {
                return global::Sample.FILETIME.__CreateInstance(new global::System.IntPtr(&((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->ftLastAccessTime));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->ftLastAccessTime = *(global::Sample.FILETIME.__Internal*) value.__Instance;
            }
        }

        public global::Sample.FILETIME FtLastWriteTime
        {
            get
            {
                return global::Sample.FILETIME.__CreateInstance(new global::System.IntPtr(&((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->ftLastWriteTime));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->ftLastWriteTime = *(global::Sample.FILETIME.__Internal*) value.__Instance;
            }
        }

        public uint NFileSizeHigh
        {
            get
            {
                return ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->nFileSizeHigh;
            }

            set
            {
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->nFileSizeHigh = value;
            }
        }

        public uint NFileSizeLow
        {
            get
            {
                return ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->nFileSizeLow;
            }

            set
            {
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->nFileSizeLow = value;
            }
        }

        public uint DwReserved0
        {
            get
            {
                return ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->dwReserved0;
            }

            set
            {
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->dwReserved0 = value;
            }
        }

        public uint DwReserved1
        {
            get
            {
                return ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->dwReserved1;
            }

            set
            {
                ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->dwReserved1 = value;
            }
        }

        public sbyte[] CFileName
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->cFileName != null)
                {
                    __value = new sbyte[260];
                    for (int i = 0; i < 260; i++)
                        __value[i] = ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->cFileName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 260; i++)
                        ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->cFileName[i] = value[i];
                }
            }
        }

        public sbyte[] CAlternateFileName
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->cAlternateFileName != null)
                {
                    __value = new sbyte[14];
                    for (int i = 0; i < 14; i++)
                        __value[i] = ((global::Sample.WIN32FIND_DATAA.__Internal*) __Instance)->cAlternateFileName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 14; i++)
                        ((global::Sample.WIN32FIND_DATAA.__Internal*)__Instance)->cAlternateFileName[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class COORD : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal short X;

            [FieldOffset(2)]
            internal short Y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_COORD@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COORD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COORD>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.COORD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.COORD(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.COORD __CreateInstance(global::Sample.COORD.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.COORD(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.COORD.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.COORD.__Internal));
            *(global::Sample.COORD.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private COORD(global::Sample.COORD.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected COORD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public COORD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COORD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public COORD(global::Sample.COORD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COORD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.COORD.__Internal*) __Instance) = *((global::Sample.COORD.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.COORD __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public short X
        {
            get
            {
                return ((global::Sample.COORD.__Internal*) __Instance)->X;
            }

            set
            {
                ((global::Sample.COORD.__Internal*)__Instance)->X = value;
            }
        }

        public short Y
        {
            get
            {
                return ((global::Sample.COORD.__Internal*) __Instance)->Y;
            }

            set
            {
                ((global::Sample.COORD.__Internal*)__Instance)->Y = value;
            }
        }
    }

    public unsafe partial class SMALL_RECT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal short Left;

            [FieldOffset(2)]
            internal short Top;

            [FieldOffset(4)]
            internal short Right;

            [FieldOffset(6)]
            internal short Bottom;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SMALL_RECT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SMALL_RECT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SMALL_RECT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SMALL_RECT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SMALL_RECT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SMALL_RECT __CreateInstance(global::Sample.SMALL_RECT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SMALL_RECT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SMALL_RECT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SMALL_RECT.__Internal));
            *(global::Sample.SMALL_RECT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SMALL_RECT(global::Sample.SMALL_RECT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SMALL_RECT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SMALL_RECT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SMALL_RECT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SMALL_RECT(global::Sample.SMALL_RECT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SMALL_RECT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SMALL_RECT.__Internal*) __Instance) = *((global::Sample.SMALL_RECT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SMALL_RECT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public short Left
        {
            get
            {
                return ((global::Sample.SMALL_RECT.__Internal*) __Instance)->Left;
            }

            set
            {
                ((global::Sample.SMALL_RECT.__Internal*)__Instance)->Left = value;
            }
        }

        public short Top
        {
            get
            {
                return ((global::Sample.SMALL_RECT.__Internal*) __Instance)->Top;
            }

            set
            {
                ((global::Sample.SMALL_RECT.__Internal*)__Instance)->Top = value;
            }
        }

        public short Right
        {
            get
            {
                return ((global::Sample.SMALL_RECT.__Internal*) __Instance)->Right;
            }

            set
            {
                ((global::Sample.SMALL_RECT.__Internal*)__Instance)->Right = value;
            }
        }

        public short Bottom
        {
            get
            {
                return ((global::Sample.SMALL_RECT.__Internal*) __Instance)->Bottom;
            }

            set
            {
                ((global::Sample.SMALL_RECT.__Internal*)__Instance)->Bottom = value;
            }
        }
    }

    public unsafe partial class CONSOLE_SCREEN_BUFFER_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 22)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Sample.COORD.__Internal dwSize;

            [FieldOffset(4)]
            internal global::Sample.COORD.__Internal dwCursorPosition;

            [FieldOffset(8)]
            internal ushort wAttributes;

            [FieldOffset(10)]
            internal global::Sample.SMALL_RECT.__Internal srWindow;

            [FieldOffset(18)]
            internal global::Sample.COORD.__Internal dwMaximumWindowSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CONSOLE_SCREEN_BUFFER_INFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CONSOLE_SCREEN_BUFFER_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CONSOLE_SCREEN_BUFFER_INFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CONSOLE_SCREEN_BUFFER_INFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CONSOLE_SCREEN_BUFFER_INFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CONSOLE_SCREEN_BUFFER_INFO __CreateInstance(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CONSOLE_SCREEN_BUFFER_INFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal));
            *(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CONSOLE_SCREEN_BUFFER_INFO(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CONSOLE_SCREEN_BUFFER_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CONSOLE_SCREEN_BUFFER_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CONSOLE_SCREEN_BUFFER_INFO(global::Sample.CONSOLE_SCREEN_BUFFER_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance) = *((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CONSOLE_SCREEN_BUFFER_INFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.COORD DwSize
        {
            get
            {
                return global::Sample.COORD.__CreateInstance(new global::System.IntPtr(&((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance)->dwSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*)__Instance)->dwSize = *(global::Sample.COORD.__Internal*) value.__Instance;
            }
        }

        public global::Sample.COORD DwCursorPosition
        {
            get
            {
                return global::Sample.COORD.__CreateInstance(new global::System.IntPtr(&((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance)->dwCursorPosition));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*)__Instance)->dwCursorPosition = *(global::Sample.COORD.__Internal*) value.__Instance;
            }
        }

        public ushort WAttributes
        {
            get
            {
                return ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance)->wAttributes;
            }

            set
            {
                ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*)__Instance)->wAttributes = value;
            }
        }

        public global::Sample.SMALL_RECT SrWindow
        {
            get
            {
                return global::Sample.SMALL_RECT.__CreateInstance(new global::System.IntPtr(&((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance)->srWindow));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*)__Instance)->srWindow = *(global::Sample.SMALL_RECT.__Internal*) value.__Instance;
            }
        }

        public global::Sample.COORD DwMaximumWindowSize
        {
            get
            {
                return global::Sample.COORD.__CreateInstance(new global::System.IntPtr(&((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*) __Instance)->dwMaximumWindowSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.CONSOLE_SCREEN_BUFFER_INFO.__Internal*)__Instance)->dwMaximumWindowSize = *(global::Sample.COORD.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class FuncInfoV1 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int magicNumber;

            [FieldOffset(4)]
            internal int maxState;

            [FieldOffset(8)]
            internal global::System.IntPtr pUnwindMap;

            [FieldOffset(12)]
            internal int nTryBlocks;

            [FieldOffset(16)]
            internal global::System.IntPtr pTryBlockMap;

            [FieldOffset(20)]
            internal int nIPMapEntries;

            [FieldOffset(24)]
            internal global::System.IntPtr pIPtoStateMap;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0FuncInfo_V1@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FuncInfoV1> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FuncInfoV1>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FuncInfoV1 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FuncInfoV1(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FuncInfoV1 __CreateInstance(global::Sample.FuncInfoV1.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FuncInfoV1(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FuncInfoV1.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FuncInfoV1.__Internal));
            *(global::Sample.FuncInfoV1.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FuncInfoV1(global::Sample.FuncInfoV1.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FuncInfoV1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FuncInfoV1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FuncInfoV1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FuncInfoV1(global::Sample.FuncInfoV1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FuncInfoV1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FuncInfoV1.__Internal*) __Instance) = *((global::Sample.FuncInfoV1.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FuncInfoV1 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int MagicNumber
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->magicNumber;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->magicNumber = value;
            }
        }

        public int MaxState
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->maxState;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->maxState = value;
            }
        }

        public global::System.IntPtr PUnwindMap
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->pUnwindMap;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->pUnwindMap = (global::System.IntPtr) value;
            }
        }

        public int NTryBlocks
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->nTryBlocks;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->nTryBlocks = value;
            }
        }

        public global::System.IntPtr PTryBlockMap
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->pTryBlockMap;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->pTryBlockMap = (global::System.IntPtr) value;
            }
        }

        public int NIPMapEntries
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->nIPMapEntries;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->nIPMapEntries = value;
            }
        }

        public global::System.IntPtr PIPtoStateMap
        {
            get
            {
                return ((global::Sample.FuncInfoV1.__Internal*) __Instance)->pIPtoStateMap;
            }

            set
            {
                ((global::Sample.FuncInfoV1.__Internal*)__Instance)->pIPtoStateMap = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class UnwindMapEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int toState;

            [FieldOffset(4)]
            internal global::System.IntPtr action;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0UnwindMapEntry@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UnwindMapEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.UnwindMapEntry>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.UnwindMapEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.UnwindMapEntry(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.UnwindMapEntry __CreateInstance(global::Sample.UnwindMapEntry.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.UnwindMapEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.UnwindMapEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.UnwindMapEntry.__Internal));
            *(global::Sample.UnwindMapEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UnwindMapEntry(global::Sample.UnwindMapEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UnwindMapEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public UnwindMapEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.UnwindMapEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public UnwindMapEntry(global::Sample.UnwindMapEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.UnwindMapEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.UnwindMapEntry.__Internal*) __Instance) = *((global::Sample.UnwindMapEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.UnwindMapEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ToState
        {
            get
            {
                return ((global::Sample.UnwindMapEntry.__Internal*) __Instance)->toState;
            }

            set
            {
                ((global::Sample.UnwindMapEntry.__Internal*)__Instance)->toState = value;
            }
        }

        public global::System.IntPtr Action
        {
            get
            {
                return ((global::Sample.UnwindMapEntry.__Internal*) __Instance)->action;
            }

            set
            {
                ((global::Sample.UnwindMapEntry.__Internal*)__Instance)->action = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TryBlockMapEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int tryLow;

            [FieldOffset(4)]
            internal int tryHigh;

            [FieldOffset(8)]
            internal int catchHigh;

            [FieldOffset(12)]
            internal int nCatches;

            [FieldOffset(16)]
            internal global::System.IntPtr pHandlerArray;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TryBlockMapEntry@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TryBlockMapEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TryBlockMapEntry>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TryBlockMapEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TryBlockMapEntry(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TryBlockMapEntry __CreateInstance(global::Sample.TryBlockMapEntry.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TryBlockMapEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TryBlockMapEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TryBlockMapEntry.__Internal));
            *(global::Sample.TryBlockMapEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TryBlockMapEntry(global::Sample.TryBlockMapEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TryBlockMapEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TryBlockMapEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TryBlockMapEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TryBlockMapEntry(global::Sample.TryBlockMapEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TryBlockMapEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TryBlockMapEntry.__Internal*) __Instance) = *((global::Sample.TryBlockMapEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TryBlockMapEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int TryLow
        {
            get
            {
                return ((global::Sample.TryBlockMapEntry.__Internal*) __Instance)->tryLow;
            }

            set
            {
                ((global::Sample.TryBlockMapEntry.__Internal*)__Instance)->tryLow = value;
            }
        }

        public int TryHigh
        {
            get
            {
                return ((global::Sample.TryBlockMapEntry.__Internal*) __Instance)->tryHigh;
            }

            set
            {
                ((global::Sample.TryBlockMapEntry.__Internal*)__Instance)->tryHigh = value;
            }
        }

        public int CatchHigh
        {
            get
            {
                return ((global::Sample.TryBlockMapEntry.__Internal*) __Instance)->catchHigh;
            }

            set
            {
                ((global::Sample.TryBlockMapEntry.__Internal*)__Instance)->catchHigh = value;
            }
        }

        public int NCatches
        {
            get
            {
                return ((global::Sample.TryBlockMapEntry.__Internal*) __Instance)->nCatches;
            }

            set
            {
                ((global::Sample.TryBlockMapEntry.__Internal*)__Instance)->nCatches = value;
            }
        }

        public global::System.IntPtr PHandlerArray
        {
            get
            {
                return ((global::Sample.TryBlockMapEntry.__Internal*) __Instance)->pHandlerArray;
            }

            set
            {
                ((global::Sample.TryBlockMapEntry.__Internal*)__Instance)->pHandlerArray = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class HandlerType : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int adjectives;

            [FieldOffset(4)]
            internal global::System.IntPtr pType;

            [FieldOffset(8)]
            internal int dispCatchObj;

            [FieldOffset(12)]
            internal global::System.IntPtr addressOfHandler;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HandlerType@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HandlerType> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HandlerType>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HandlerType __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HandlerType(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HandlerType __CreateInstance(global::Sample.HandlerType.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HandlerType(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HandlerType.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HandlerType.__Internal));
            *(global::Sample.HandlerType.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HandlerType(global::Sample.HandlerType.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HandlerType(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HandlerType()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HandlerType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HandlerType(global::Sample.HandlerType _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HandlerType.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HandlerType.__Internal*) __Instance) = *((global::Sample.HandlerType.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HandlerType __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Adjectives
        {
            get
            {
                return ((global::Sample.HandlerType.__Internal*) __Instance)->adjectives;
            }

            set
            {
                ((global::Sample.HandlerType.__Internal*)__Instance)->adjectives = value;
            }
        }

        public global::System.IntPtr PType
        {
            get
            {
                return ((global::Sample.HandlerType.__Internal*) __Instance)->pType;
            }

            set
            {
                ((global::Sample.HandlerType.__Internal*)__Instance)->pType = (global::System.IntPtr) value;
            }
        }

        public int DispCatchObj
        {
            get
            {
                return ((global::Sample.HandlerType.__Internal*) __Instance)->dispCatchObj;
            }

            set
            {
                ((global::Sample.HandlerType.__Internal*)__Instance)->dispCatchObj = value;
            }
        }

        public global::System.IntPtr AddressOfHandler
        {
            get
            {
                return ((global::Sample.HandlerType.__Internal*) __Instance)->addressOfHandler;
            }

            set
            {
                ((global::Sample.HandlerType.__Internal*)__Instance)->addressOfHandler = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagTRACKMOUSEEVENT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal uint dwFlags;

            [FieldOffset(8)]
            internal global::System.IntPtr hwndTrack;

            [FieldOffset(12)]
            internal uint dwHoverTime;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagTRACKMOUSEEVENT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTRACKMOUSEEVENT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTRACKMOUSEEVENT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagTRACKMOUSEEVENT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagTRACKMOUSEEVENT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagTRACKMOUSEEVENT __CreateInstance(global::Sample.TagTRACKMOUSEEVENT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagTRACKMOUSEEVENT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagTRACKMOUSEEVENT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagTRACKMOUSEEVENT.__Internal));
            *(global::Sample.TagTRACKMOUSEEVENT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagTRACKMOUSEEVENT(global::Sample.TagTRACKMOUSEEVENT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagTRACKMOUSEEVENT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagTRACKMOUSEEVENT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagTRACKMOUSEEVENT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagTRACKMOUSEEVENT(global::Sample.TagTRACKMOUSEEVENT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagTRACKMOUSEEVENT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance) = *((global::Sample.TagTRACKMOUSEEVENT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagTRACKMOUSEEVENT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TagTRACKMOUSEEVENT.__Internal*)__Instance)->cbSize = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.TagTRACKMOUSEEVENT.__Internal*)__Instance)->dwFlags = value;
            }
        }

        public global::Sample.HWND_ HwndTrack
        {
            get
            {
                global::Sample.HWND_ __result0;
                if (((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->hwndTrack == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HWND_.NativeToManagedMap.ContainsKey(((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->hwndTrack))
                    __result0 = (global::Sample.HWND_) global::Sample.HWND_.NativeToManagedMap[((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->hwndTrack];
                else __result0 = global::Sample.HWND_.__CreateInstance(((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->hwndTrack);
                return __result0;
            }

            set
            {
                ((global::Sample.TagTRACKMOUSEEVENT.__Internal*)__Instance)->hwndTrack = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint DwHoverTime
        {
            get
            {
                return ((global::Sample.TagTRACKMOUSEEVENT.__Internal*) __Instance)->dwHoverTime;
            }

            set
            {
                ((global::Sample.TagTRACKMOUSEEVENT.__Internal*)__Instance)->dwHoverTime = value;
            }
        }
    }

    public unsafe partial class TagWNDCLASSA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint style;

            [FieldOffset(4)]
            internal global::System.IntPtr lpfnWndProc;

            [FieldOffset(8)]
            internal int cbClsExtra;

            [FieldOffset(12)]
            internal int cbWndExtra;

            [FieldOffset(16)]
            internal global::System.IntPtr hInstance;

            [FieldOffset(20)]
            internal global::System.IntPtr hIcon;

            [FieldOffset(24)]
            internal global::System.IntPtr hCursor;

            [FieldOffset(28)]
            internal global::System.IntPtr hbrBackground;

            [FieldOffset(32)]
            internal global::System.IntPtr lpszMenuName;

            [FieldOffset(36)]
            internal global::System.IntPtr lpszClassName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagWNDCLASSA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagWNDCLASSA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagWNDCLASSA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagWNDCLASSA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagWNDCLASSA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagWNDCLASSA __CreateInstance(global::Sample.TagWNDCLASSA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagWNDCLASSA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagWNDCLASSA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagWNDCLASSA.__Internal));
            *(global::Sample.TagWNDCLASSA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagWNDCLASSA(global::Sample.TagWNDCLASSA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagWNDCLASSA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagWNDCLASSA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagWNDCLASSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagWNDCLASSA(global::Sample.TagWNDCLASSA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagWNDCLASSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagWNDCLASSA.__Internal*) __Instance) = *((global::Sample.TagWNDCLASSA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagWNDCLASSA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Style
        {
            get
            {
                return ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->style;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->style = value;
            }
        }

        public global::Sample.WNDPROC LpfnWndProc
        {
            get
            {
                var __ptr0 = ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpfnWndProc;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.WNDPROC) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.WNDPROC));
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->lpfnWndProc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public int CbClsExtra
        {
            get
            {
                return ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->cbClsExtra;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->cbClsExtra = value;
            }
        }

        public int CbWndExtra
        {
            get
            {
                return ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->cbWndExtra;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->cbWndExtra = value;
            }
        }

        public global::Sample.HINSTANCE_ HInstance
        {
            get
            {
                global::Sample.HINSTANCE_ __result0;
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hInstance == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HINSTANCE_.NativeToManagedMap.ContainsKey(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hInstance))
                    __result0 = (global::Sample.HINSTANCE_) global::Sample.HINSTANCE_.NativeToManagedMap[((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hInstance];
                else __result0 = global::Sample.HINSTANCE_.__CreateInstance(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hInstance);
                return __result0;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->hInstance = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::Sample.HICON_ HIcon
        {
            get
            {
                global::Sample.HICON_ __result0;
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hIcon == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HICON_.NativeToManagedMap.ContainsKey(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hIcon))
                    __result0 = (global::Sample.HICON_) global::Sample.HICON_.NativeToManagedMap[((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hIcon];
                else __result0 = global::Sample.HICON_.__CreateInstance(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hIcon);
                return __result0;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->hIcon = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::Sample.HICON_ HCursor
        {
            get
            {
                global::Sample.HICON_ __result0;
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hCursor == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HICON_.NativeToManagedMap.ContainsKey(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hCursor))
                    __result0 = (global::Sample.HICON_) global::Sample.HICON_.NativeToManagedMap[((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hCursor];
                else __result0 = global::Sample.HICON_.__CreateInstance(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hCursor);
                return __result0;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->hCursor = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::Sample.HBRUSH_ HbrBackground
        {
            get
            {
                global::Sample.HBRUSH_ __result0;
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hbrBackground == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HBRUSH_.NativeToManagedMap.ContainsKey(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hbrBackground))
                    __result0 = (global::Sample.HBRUSH_) global::Sample.HBRUSH_.NativeToManagedMap[((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hbrBackground];
                else __result0 = global::Sample.HBRUSH_.__CreateInstance(((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->hbrBackground);
                return __result0;
            }

            set
            {
                ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->hbrBackground = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string LpszMenuName
        {
            get
            {
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszMenuName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszMenuName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszMenuName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->lpszMenuName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string LpszClassName
        {
            get
            {
                if (((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszClassName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszClassName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::Sample.TagWNDCLASSA.__Internal*) __Instance)->lpszClassName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::Sample.TagWNDCLASSA.__Internal*)__Instance)->lpszClassName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class HINSTANCE_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HINSTANCE__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HINSTANCE_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HINSTANCE_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HINSTANCE_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HINSTANCE_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HINSTANCE_ __CreateInstance(global::Sample.HINSTANCE_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HINSTANCE_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HINSTANCE_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HINSTANCE_.__Internal));
            *(global::Sample.HINSTANCE_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HINSTANCE_(global::Sample.HINSTANCE_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HINSTANCE_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HINSTANCE_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HINSTANCE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HINSTANCE_(global::Sample.HINSTANCE_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HINSTANCE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HINSTANCE_.__Internal*) __Instance) = *((global::Sample.HINSTANCE_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HINSTANCE_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HINSTANCE_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HINSTANCE_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class HICON_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HICON__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HICON_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HICON_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HICON_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HICON_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HICON_ __CreateInstance(global::Sample.HICON_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HICON_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HICON_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HICON_.__Internal));
            *(global::Sample.HICON_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HICON_(global::Sample.HICON_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HICON_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HICON_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HICON_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HICON_(global::Sample.HICON_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HICON_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HICON_.__Internal*) __Instance) = *((global::Sample.HICON_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HICON_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HICON_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HICON_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class HBRUSH_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HBRUSH__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HBRUSH_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HBRUSH_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HBRUSH_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HBRUSH_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HBRUSH_ __CreateInstance(global::Sample.HBRUSH_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HBRUSH_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HBRUSH_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HBRUSH_.__Internal));
            *(global::Sample.HBRUSH_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HBRUSH_(global::Sample.HBRUSH_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HBRUSH_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HBRUSH_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HBRUSH_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HBRUSH_(global::Sample.HBRUSH_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HBRUSH_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HBRUSH_.__Internal*) __Instance) = *((global::Sample.HBRUSH_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HBRUSH_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HBRUSH_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HBRUSH_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class NumberfmtA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint NumDigits;

            [FieldOffset(4)]
            internal uint LeadingZero;

            [FieldOffset(8)]
            internal uint Grouping;

            [FieldOffset(12)]
            internal global::System.IntPtr lpDecimalSep;

            [FieldOffset(16)]
            internal global::System.IntPtr lpThousandSep;

            [FieldOffset(20)]
            internal uint NegativeOrder;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_numberfmtA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NumberfmtA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NumberfmtA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NumberfmtA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NumberfmtA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NumberfmtA __CreateInstance(global::Sample.NumberfmtA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NumberfmtA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NumberfmtA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NumberfmtA.__Internal));
            *(global::Sample.NumberfmtA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NumberfmtA(global::Sample.NumberfmtA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NumberfmtA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public NumberfmtA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.NumberfmtA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public NumberfmtA(global::Sample.NumberfmtA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.NumberfmtA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.NumberfmtA.__Internal*) __Instance) = *((global::Sample.NumberfmtA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.NumberfmtA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NumDigits
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->NumDigits;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->NumDigits = value;
            }
        }

        public uint LeadingZero
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->LeadingZero;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->LeadingZero = value;
            }
        }

        public uint Grouping
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->Grouping;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->Grouping = value;
            }
        }

        public sbyte* LpDecimalSep
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->lpDecimalSep;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->lpDecimalSep = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpThousandSep
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->lpThousandSep;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->lpThousandSep = (global::System.IntPtr) value;
            }
        }

        public uint NegativeOrder
        {
            get
            {
                return ((global::Sample.NumberfmtA.__Internal*) __Instance)->NegativeOrder;
            }

            set
            {
                ((global::Sample.NumberfmtA.__Internal*)__Instance)->NegativeOrder = value;
            }
        }
    }

    public unsafe partial class SECURITY_ATTRIBUTES : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint nLength;

            [FieldOffset(4)]
            internal global::System.IntPtr lpSecurityDescriptor;

            [FieldOffset(8)]
            internal int bInheritHandle;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SECURITY_ATTRIBUTES@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SECURITY_ATTRIBUTES> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SECURITY_ATTRIBUTES>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SECURITY_ATTRIBUTES __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SECURITY_ATTRIBUTES(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SECURITY_ATTRIBUTES __CreateInstance(global::Sample.SECURITY_ATTRIBUTES.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SECURITY_ATTRIBUTES(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SECURITY_ATTRIBUTES.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SECURITY_ATTRIBUTES.__Internal));
            *(global::Sample.SECURITY_ATTRIBUTES.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SECURITY_ATTRIBUTES(global::Sample.SECURITY_ATTRIBUTES.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SECURITY_ATTRIBUTES(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SECURITY_ATTRIBUTES()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SECURITY_ATTRIBUTES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SECURITY_ATTRIBUTES(global::Sample.SECURITY_ATTRIBUTES _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SECURITY_ATTRIBUTES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SECURITY_ATTRIBUTES.__Internal*) __Instance) = *((global::Sample.SECURITY_ATTRIBUTES.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SECURITY_ATTRIBUTES __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NLength
        {
            get
            {
                return ((global::Sample.SECURITY_ATTRIBUTES.__Internal*) __Instance)->nLength;
            }

            set
            {
                ((global::Sample.SECURITY_ATTRIBUTES.__Internal*)__Instance)->nLength = value;
            }
        }

        public global::System.IntPtr LpSecurityDescriptor
        {
            get
            {
                return ((global::Sample.SECURITY_ATTRIBUTES.__Internal*) __Instance)->lpSecurityDescriptor;
            }

            set
            {
                ((global::Sample.SECURITY_ATTRIBUTES.__Internal*)__Instance)->lpSecurityDescriptor = (global::System.IntPtr) value;
            }
        }

        public int BInheritHandle
        {
            get
            {
                return ((global::Sample.SECURITY_ATTRIBUTES.__Internal*) __Instance)->bInheritHandle;
            }

            set
            {
                ((global::Sample.SECURITY_ATTRIBUTES.__Internal*)__Instance)->bInheritHandle = value;
            }
        }
    }

    public unsafe partial class PROCESS_INFORMATION : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr hProcess;

            [FieldOffset(4)]
            internal global::System.IntPtr hThread;

            [FieldOffset(8)]
            internal uint dwProcessId;

            [FieldOffset(12)]
            internal uint dwThreadId;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PROCESS_INFORMATION@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PROCESS_INFORMATION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PROCESS_INFORMATION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PROCESS_INFORMATION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PROCESS_INFORMATION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PROCESS_INFORMATION __CreateInstance(global::Sample.PROCESS_INFORMATION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PROCESS_INFORMATION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PROCESS_INFORMATION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESS_INFORMATION.__Internal));
            *(global::Sample.PROCESS_INFORMATION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PROCESS_INFORMATION(global::Sample.PROCESS_INFORMATION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PROCESS_INFORMATION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PROCESS_INFORMATION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESS_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PROCESS_INFORMATION(global::Sample.PROCESS_INFORMATION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESS_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PROCESS_INFORMATION.__Internal*) __Instance) = *((global::Sample.PROCESS_INFORMATION.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PROCESS_INFORMATION __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr HProcess
        {
            get
            {
                return ((global::Sample.PROCESS_INFORMATION.__Internal*) __Instance)->hProcess;
            }

            set
            {
                ((global::Sample.PROCESS_INFORMATION.__Internal*)__Instance)->hProcess = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HThread
        {
            get
            {
                return ((global::Sample.PROCESS_INFORMATION.__Internal*) __Instance)->hThread;
            }

            set
            {
                ((global::Sample.PROCESS_INFORMATION.__Internal*)__Instance)->hThread = (global::System.IntPtr) value;
            }
        }

        public uint DwProcessId
        {
            get
            {
                return ((global::Sample.PROCESS_INFORMATION.__Internal*) __Instance)->dwProcessId;
            }

            set
            {
                ((global::Sample.PROCESS_INFORMATION.__Internal*)__Instance)->dwProcessId = value;
            }
        }

        public uint DwThreadId
        {
            get
            {
                return ((global::Sample.PROCESS_INFORMATION.__Internal*) __Instance)->dwThreadId;
            }

            set
            {
                ((global::Sample.PROCESS_INFORMATION.__Internal*)__Instance)->dwThreadId = value;
            }
        }
    }

    public unsafe partial class MIDL_STUB_MESSAGE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 180)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr RpcMsg;

            [FieldOffset(4)]
            internal global::System.IntPtr Buffer;

            [FieldOffset(8)]
            internal global::System.IntPtr BufferStart;

            [FieldOffset(12)]
            internal global::System.IntPtr BufferEnd;

            [FieldOffset(16)]
            internal global::System.IntPtr BufferMark;

            [FieldOffset(20)]
            internal uint BufferLength;

            [FieldOffset(24)]
            internal uint MemorySize;

            [FieldOffset(28)]
            internal global::System.IntPtr Memory;

            [FieldOffset(32)]
            internal int IsClient;

            [FieldOffset(36)]
            internal int ReuseBuffer;

            [FieldOffset(40)]
            internal global::System.IntPtr AllocAllNodesMemory;

            [FieldOffset(44)]
            internal global::System.IntPtr AllocAllNodesMemoryEnd;

            [FieldOffset(48)]
            internal int IgnoreEmbeddedPointers;

            [FieldOffset(52)]
            internal global::System.IntPtr PointerBufferMark;

            [FieldOffset(56)]
            internal byte fBufferValid;

            [FieldOffset(57)]
            internal byte Unused;

            [FieldOffset(60)]
            internal uint MaxCount;

            [FieldOffset(64)]
            internal uint Offset;

            [FieldOffset(68)]
            internal uint ActualCount;

            [FieldOffset(72)]
            internal global::System.IntPtr pfnAllocate;

            [FieldOffset(76)]
            internal global::System.IntPtr pfnFree;

            [FieldOffset(80)]
            internal global::System.IntPtr StackTop;

            [FieldOffset(84)]
            internal global::System.IntPtr pPresentedType;

            [FieldOffset(88)]
            internal global::System.IntPtr pTransmitType;

            [FieldOffset(92)]
            internal global::System.IntPtr SavedHandle;

            [FieldOffset(96)]
            internal global::System.IntPtr StubDesc;

            [FieldOffset(100)]
            internal global::System.IntPtr FullPtrXlatTables;

            [FieldOffset(104)]
            internal uint FullPtrRefId;

            [FieldOffset(108)]
            internal int fCheckBounds;

            [FieldOffset(112)]
            internal int fInDontFree;

            [FieldOffset(112)]
            internal int fDontCallFreeInst;

            [FieldOffset(112)]
            internal int fInOnlyParam;

            [FieldOffset(112)]
            internal int fHasReturn;

            [FieldOffset(116)]
            internal uint dwDestContext;

            [FieldOffset(120)]
            internal global::System.IntPtr pvDestContext;

            [FieldOffset(124)]
            internal global::System.IntPtr SavedContextHandles;

            [FieldOffset(128)]
            internal int ParamNumber;

            [FieldOffset(132)]
            internal global::System.IntPtr pRpcChannelBuffer;

            [FieldOffset(136)]
            internal global::System.IntPtr pArrayInfo;

            [FieldOffset(140)]
            internal global::System.IntPtr SizePtrCountArray;

            [FieldOffset(144)]
            internal global::System.IntPtr SizePtrOffsetArray;

            [FieldOffset(148)]
            internal global::System.IntPtr SizePtrLengthArray;

            [FieldOffset(152)]
            internal global::System.IntPtr pArgQueue;

            [FieldOffset(156)]
            internal uint dwStubPhase;

            [FieldOffset(160)]
            internal global::System.IntPtr pPipeDesc;

            [FieldOffset(164)]
            internal global::System.IntPtr pAsyncMsg;

            [FieldOffset(168)]
            internal fixed uint Reserved[3];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MIDL_STUB_MESSAGE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MIDL_STUB_MESSAGE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MIDL_STUB_MESSAGE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MIDL_STUB_MESSAGE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_MESSAGE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MIDL_STUB_MESSAGE __CreateInstance(global::Sample.MIDL_STUB_MESSAGE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_MESSAGE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MIDL_STUB_MESSAGE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_MESSAGE.__Internal));
            *(global::Sample.MIDL_STUB_MESSAGE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MIDL_STUB_MESSAGE(global::Sample.MIDL_STUB_MESSAGE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MIDL_STUB_MESSAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MIDL_STUB_MESSAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_MESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MIDL_STUB_MESSAGE(global::Sample.MIDL_STUB_MESSAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_MESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance) = *((global::Sample.MIDL_STUB_MESSAGE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MIDL_STUB_MESSAGE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.RPC_MESSAGE RpcMsg
        {
            get
            {
                global::Sample.RPC_MESSAGE __result0;
                if (((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->RpcMsg == IntPtr.Zero) __result0 = null;
                else if (global::Sample.RPC_MESSAGE.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->RpcMsg))
                    __result0 = (global::Sample.RPC_MESSAGE) global::Sample.RPC_MESSAGE.NativeToManagedMap[((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->RpcMsg];
                else __result0 = global::Sample.RPC_MESSAGE.__CreateInstance(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->RpcMsg);
                return __result0;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->RpcMsg = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public byte* Buffer
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Buffer;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->Buffer = (global::System.IntPtr) value;
            }
        }

        public byte* BufferStart
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->BufferStart;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->BufferStart = (global::System.IntPtr) value;
            }
        }

        public byte* BufferEnd
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->BufferEnd;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->BufferEnd = (global::System.IntPtr) value;
            }
        }

        public byte* BufferMark
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->BufferMark;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->BufferMark = (global::System.IntPtr) value;
            }
        }

        public uint BufferLength
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->BufferLength;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->BufferLength = value;
            }
        }

        public uint MemorySize
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->MemorySize;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->MemorySize = value;
            }
        }

        public byte* Memory
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Memory;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->Memory = (global::System.IntPtr) value;
            }
        }

        public int IsClient
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->IsClient;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->IsClient = value;
            }
        }

        public int ReuseBuffer
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->ReuseBuffer;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->ReuseBuffer = value;
            }
        }

        public byte* AllocAllNodesMemory
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->AllocAllNodesMemory;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->AllocAllNodesMemory = (global::System.IntPtr) value;
            }
        }

        public byte* AllocAllNodesMemoryEnd
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->AllocAllNodesMemoryEnd;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->AllocAllNodesMemoryEnd = (global::System.IntPtr) value;
            }
        }

        public int IgnoreEmbeddedPointers
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->IgnoreEmbeddedPointers;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->IgnoreEmbeddedPointers = value;
            }
        }

        public byte* PointerBufferMark
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->PointerBufferMark;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->PointerBufferMark = (global::System.IntPtr) value;
            }
        }

        public byte FBufferValid
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fBufferValid;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fBufferValid = value;
            }
        }

        public byte Unused
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Unused;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->Unused = value;
            }
        }

        public uint MaxCount
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->MaxCount;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->MaxCount = value;
            }
        }

        public uint Offset
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Offset;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->Offset = value;
            }
        }

        public uint ActualCount
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->ActualCount;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->ActualCount = value;
            }
        }

        public global::Sample.Delegates.Func_IntPtr_uint PfnAllocate
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pfnAllocate;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_IntPtr_uint));
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pfnAllocate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Action_IntPtr PfnFree
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pfnFree;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Action_IntPtr));
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pfnFree = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public byte* StackTop
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->StackTop;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->StackTop = (global::System.IntPtr) value;
            }
        }

        public byte* PPresentedType
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pPresentedType;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pPresentedType = (global::System.IntPtr) value;
            }
        }

        public byte* PTransmitType
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pTransmitType;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pTransmitType = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr SavedHandle
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->SavedHandle;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->SavedHandle = (global::System.IntPtr) value;
            }
        }

        public global::Sample.MIDL_STUB_DESC StubDesc
        {
            get
            {
                global::Sample.MIDL_STUB_DESC __result0;
                if (((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->StubDesc == IntPtr.Zero) __result0 = null;
                else if (global::Sample.MIDL_STUB_DESC.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->StubDesc))
                    __result0 = (global::Sample.MIDL_STUB_DESC) global::Sample.MIDL_STUB_DESC.NativeToManagedMap[((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->StubDesc];
                else __result0 = global::Sample.MIDL_STUB_DESC.__CreateInstance(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->StubDesc);
                return __result0;
            }
        }

        public global::Sample.FULL_PTR_XLAT_TABLES FullPtrXlatTables
        {
            get
            {
                global::Sample.FULL_PTR_XLAT_TABLES __result0;
                if (((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->FullPtrXlatTables == IntPtr.Zero) __result0 = null;
                else if (global::Sample.FULL_PTR_XLAT_TABLES.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->FullPtrXlatTables))
                    __result0 = (global::Sample.FULL_PTR_XLAT_TABLES) global::Sample.FULL_PTR_XLAT_TABLES.NativeToManagedMap[((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->FullPtrXlatTables];
                else __result0 = global::Sample.FULL_PTR_XLAT_TABLES.__CreateInstance(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->FullPtrXlatTables);
                return __result0;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->FullPtrXlatTables = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint FullPtrRefId
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->FullPtrRefId;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->FullPtrRefId = value;
            }
        }

        public int FCheckBounds
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fCheckBounds;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fCheckBounds = value;
            }
        }

        public int FInDontFree
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fInDontFree;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fInDontFree = value;
            }
        }

        public int FDontCallFreeInst
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fDontCallFreeInst;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fDontCallFreeInst = value;
            }
        }

        public int FInOnlyParam
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fInOnlyParam;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fInOnlyParam = value;
            }
        }

        public int FHasReturn
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->fHasReturn;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->fHasReturn = value;
            }
        }

        public uint DwDestContext
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->dwDestContext;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->dwDestContext = value;
            }
        }

        public global::System.IntPtr PvDestContext
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pvDestContext;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pvDestContext = (global::System.IntPtr) value;
            }
        }

        public void** SavedContextHandles
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->SavedContextHandles;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->SavedContextHandles = value;
            }
        }

        public int ParamNumber
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->ParamNumber;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->ParamNumber = value;
            }
        }

        public global::Sample.IRpcChannelBuffer PRpcChannelBuffer
        {
            get
            {
                global::Sample.IRpcChannelBuffer __result0;
                if (((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pRpcChannelBuffer == IntPtr.Zero) __result0 = null;
                else if (global::Sample.IRpcChannelBuffer.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pRpcChannelBuffer))
                    __result0 = (global::Sample.IRpcChannelBuffer) global::Sample.IRpcChannelBuffer.NativeToManagedMap[((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pRpcChannelBuffer];
                else __result0 = global::Sample.IRpcChannelBuffer.__CreateInstance(((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pRpcChannelBuffer);
                return __result0;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pRpcChannelBuffer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr PArrayInfo
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pArrayInfo;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pArrayInfo = (global::System.IntPtr) value;
            }
        }

        public uint* SizePtrCountArray
        {
            get
            {
                return (uint*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->SizePtrCountArray;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->SizePtrCountArray = (global::System.IntPtr) value;
            }
        }

        public uint* SizePtrOffsetArray
        {
            get
            {
                return (uint*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->SizePtrOffsetArray;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->SizePtrOffsetArray = (global::System.IntPtr) value;
            }
        }

        public uint* SizePtrLengthArray
        {
            get
            {
                return (uint*) ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->SizePtrLengthArray;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->SizePtrLengthArray = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr PArgQueue
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pArgQueue;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pArgQueue = (global::System.IntPtr) value;
            }
        }

        public uint DwStubPhase
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->dwStubPhase;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->dwStubPhase = value;
            }
        }

        public uint* PPipeDesc
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pPipeDesc;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pPipeDesc = (global::System.IntPtr) value;
            }
        }

        public uint* PAsyncMsg
        {
            get
            {
                return ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->pAsyncMsg;
            }

            set
            {
                ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->pAsyncMsg = (global::System.IntPtr) value;
            }
        }

        public uint[] Reserved
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Reserved != null)
                {
                    __value = new uint[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::Sample.MIDL_STUB_MESSAGE.__Internal*) __Instance)->Reserved[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::Sample.MIDL_STUB_MESSAGE.__Internal*)__Instance)->Reserved[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class RPC_MESSAGE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Handle;

            [FieldOffset(4)]
            internal uint DataRepresentation;

            [FieldOffset(8)]
            internal global::System.IntPtr Buffer;

            [FieldOffset(12)]
            internal uint BufferLength;

            [FieldOffset(16)]
            internal uint ProcNum;

            [FieldOffset(20)]
            internal global::System.IntPtr TransferSyntax;

            [FieldOffset(24)]
            internal global::System.IntPtr RpcInterfaceInformation;

            [FieldOffset(28)]
            internal global::System.IntPtr ReservedForRuntime;

            [FieldOffset(32)]
            internal global::System.IntPtr ManagerEpv;

            [FieldOffset(36)]
            internal global::System.IntPtr ImportContext;

            [FieldOffset(40)]
            internal uint RpcFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_RPC_MESSAGE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_MESSAGE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_MESSAGE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RPC_MESSAGE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RPC_MESSAGE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RPC_MESSAGE __CreateInstance(global::Sample.RPC_MESSAGE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RPC_MESSAGE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RPC_MESSAGE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_MESSAGE.__Internal));
            *(global::Sample.RPC_MESSAGE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RPC_MESSAGE(global::Sample.RPC_MESSAGE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RPC_MESSAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RPC_MESSAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_MESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RPC_MESSAGE(global::Sample.RPC_MESSAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_MESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.RPC_MESSAGE.__Internal*) __Instance) = *((global::Sample.RPC_MESSAGE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.RPC_MESSAGE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Handle
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->Handle;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->Handle = (global::System.IntPtr) value;
            }
        }

        public uint DataRepresentation
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->DataRepresentation;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->DataRepresentation = value;
            }
        }

        public global::System.IntPtr Buffer
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->Buffer;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->Buffer = (global::System.IntPtr) value;
            }
        }

        public uint BufferLength
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->BufferLength;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->BufferLength = value;
            }
        }

        public uint ProcNum
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->ProcNum;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->ProcNum = value;
            }
        }

        public global::Sample.RPC_SYNTAX_IDENTIFIER TransferSyntax
        {
            get
            {
                global::Sample.RPC_SYNTAX_IDENTIFIER __result0;
                if (((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->TransferSyntax == IntPtr.Zero) __result0 = null;
                else if (global::Sample.RPC_SYNTAX_IDENTIFIER.NativeToManagedMap.ContainsKey(((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->TransferSyntax))
                    __result0 = (global::Sample.RPC_SYNTAX_IDENTIFIER) global::Sample.RPC_SYNTAX_IDENTIFIER.NativeToManagedMap[((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->TransferSyntax];
                else __result0 = global::Sample.RPC_SYNTAX_IDENTIFIER.__CreateInstance(((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->TransferSyntax);
                return __result0;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->TransferSyntax = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr RpcInterfaceInformation
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->RpcInterfaceInformation;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->RpcInterfaceInformation = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr ReservedForRuntime
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->ReservedForRuntime;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->ReservedForRuntime = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr ManagerEpv
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->ManagerEpv;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->ManagerEpv = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr ImportContext
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->ImportContext;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->ImportContext = (global::System.IntPtr) value;
            }
        }

        public uint RpcFlags
        {
            get
            {
                return ((global::Sample.RPC_MESSAGE.__Internal*) __Instance)->RpcFlags;
            }

            set
            {
                ((global::Sample.RPC_MESSAGE.__Internal*)__Instance)->RpcFlags = value;
            }
        }
    }

    public unsafe partial struct MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pAutoHandle;

            [FieldOffset(0)]
            internal global::System.IntPtr pPrimitiveHandle;

            [FieldOffset(0)]
            internal global::System.IntPtr pGenericBindingInfo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal __instance;
        internal MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal __Instance { get { return __instance; } }

        internal static global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672 __CreateInstance(global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672(native, skipVTables);
        }

        private MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672(global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal*) native;
        }

        public MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672(global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672 _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public void** PAutoHandle
        {
            get
            {
                return __instance.pAutoHandle;
            }

            set
            {
                __instance.pAutoHandle = value;
            }
        }

        public void** PPrimitiveHandle
        {
            get
            {
                return __instance.pPrimitiveHandle;
            }

            set
            {
                __instance.pPrimitiveHandle = value;
            }
        }

        public global::Sample.GENERIC_BINDING_INFO PGenericBindingInfo
        {
            get
            {
                global::Sample.GENERIC_BINDING_INFO __result0;
                if (__instance.pGenericBindingInfo == IntPtr.Zero) __result0 = null;
                else if (global::Sample.GENERIC_BINDING_INFO.NativeToManagedMap.ContainsKey(__instance.pGenericBindingInfo))
                    __result0 = (global::Sample.GENERIC_BINDING_INFO) global::Sample.GENERIC_BINDING_INFO.NativeToManagedMap[__instance.pGenericBindingInfo];
                else __result0 = global::Sample.GENERIC_BINDING_INFO.__CreateInstance(__instance.pGenericBindingInfo);
                return __result0;
            }

            set
            {
                __instance.pGenericBindingInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class USER_MARSHAL_ROUTINE_QUADRUPLE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint pfnBufferSize;

            [FieldOffset(4)]
            internal uint pfnMarshall;

            [FieldOffset(8)]
            internal uint pfnUnmarshall;

            [FieldOffset(12)]
            internal uint pfnFree;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_USER_MARSHAL_ROUTINE_QUADRUPLE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE __CreateInstance(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal));
            *(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private USER_MARSHAL_ROUTINE_QUADRUPLE(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected USER_MARSHAL_ROUTINE_QUADRUPLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public USER_MARSHAL_ROUTINE_QUADRUPLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public USER_MARSHAL_ROUTINE_QUADRUPLE(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) __Instance) = *((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint PfnBufferSize
        {
            get
            {
                return ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) __Instance)->pfnBufferSize;
            }

            set
            {
                ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*)__Instance)->pfnBufferSize = value;
            }
        }

        public uint PfnMarshall
        {
            get
            {
                return ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) __Instance)->pfnMarshall;
            }

            set
            {
                ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*)__Instance)->pfnMarshall = value;
            }
        }

        public uint PfnUnmarshall
        {
            get
            {
                return ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) __Instance)->pfnUnmarshall;
            }

            set
            {
                ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*)__Instance)->pfnUnmarshall = value;
            }
        }

        public uint PfnFree
        {
            get
            {
                return ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*) __Instance)->pfnFree;
            }

            set
            {
                ((global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__Internal*)__Instance)->pfnFree = value;
            }
        }
    }

    public unsafe partial class MIDL_STUB_DESC : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr RpcInterfaceInformation;

            [FieldOffset(4)]
            internal global::System.IntPtr pfnAllocate;

            [FieldOffset(8)]
            internal global::System.IntPtr pfnFree;

            [FieldOffset(12)]
            internal global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__Internal IMPLICIT_HANDLE_INFO;

            [FieldOffset(16)]
            internal global::System.IntPtr apfnNdrRundownRoutines;

            [FieldOffset(20)]
            internal global::System.IntPtr aGenericBindingRoutinePairs;

            [FieldOffset(24)]
            internal global::System.IntPtr apfnExprEval;

            [FieldOffset(28)]
            internal global::System.IntPtr aXmitQuintuple;

            [FieldOffset(32)]
            internal global::System.IntPtr pFormatTypes;

            [FieldOffset(36)]
            internal int fCheckBounds;

            [FieldOffset(40)]
            internal uint Version;

            [FieldOffset(44)]
            internal global::System.IntPtr pMallocFreeStruct;

            [FieldOffset(48)]
            internal int MIDLVersion;

            [FieldOffset(52)]
            internal global::System.IntPtr CommFaultOffsets;

            [FieldOffset(56)]
            internal global::System.IntPtr aUserMarshalQuadruple;

            [FieldOffset(60)]
            internal int Reserved1;

            [FieldOffset(64)]
            internal int Reserved2;

            [FieldOffset(68)]
            internal int Reserved3;

            [FieldOffset(72)]
            internal int Reserved4;

            [FieldOffset(76)]
            internal int Reserved5;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MIDL_STUB_DESC@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MIDL_STUB_DESC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MIDL_STUB_DESC>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MIDL_STUB_DESC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_DESC(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MIDL_STUB_DESC __CreateInstance(global::Sample.MIDL_STUB_DESC.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MIDL_STUB_DESC(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MIDL_STUB_DESC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_DESC.__Internal));
            *(global::Sample.MIDL_STUB_DESC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MIDL_STUB_DESC(global::Sample.MIDL_STUB_DESC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MIDL_STUB_DESC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MIDL_STUB_DESC()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_DESC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MIDL_STUB_DESC(global::Sample.MIDL_STUB_DESC _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MIDL_STUB_DESC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance) = *((global::Sample.MIDL_STUB_DESC.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MIDL_STUB_DESC __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr RpcInterfaceInformation
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->RpcInterfaceInformation;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->RpcInterfaceInformation = (global::System.IntPtr) value;
            }
        }

        public global::Sample.Delegates.Func_IntPtr_uint PfnAllocate
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pfnAllocate;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_IntPtr_uint));
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->pfnAllocate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Action_IntPtr PfnFree
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pfnFree;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Action_IntPtr));
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->pfnFree = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO
        {
            get
            {
                return global::Sample.MIDL_STUB_DESC_E5BCB627D3738D8B5DEACC268C24AE672.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->IMPLICIT_HANDLE_INFO);
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->IMPLICIT_HANDLE_INFO = value.__Instance;
            }
        }

        public global::Sample.NDR_RUNDOWN ApfnNdrRundownRoutines
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->apfnNdrRundownRoutines;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.NDR_RUNDOWN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.NDR_RUNDOWN));
            }
        }

        public global::Sample.GENERIC_BINDING_ROUTINE_PAIR AGenericBindingRoutinePairs
        {
            get
            {
                global::Sample.GENERIC_BINDING_ROUTINE_PAIR __result0;
                if (((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aGenericBindingRoutinePairs == IntPtr.Zero) __result0 = null;
                else if (global::Sample.GENERIC_BINDING_ROUTINE_PAIR.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aGenericBindingRoutinePairs))
                    __result0 = (global::Sample.GENERIC_BINDING_ROUTINE_PAIR) global::Sample.GENERIC_BINDING_ROUTINE_PAIR.NativeToManagedMap[((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aGenericBindingRoutinePairs];
                else __result0 = global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aGenericBindingRoutinePairs);
                return __result0;
            }
        }

        public global::Sample.EXPR_EVAL ApfnExprEval
        {
            get
            {
                var __ptr0 = ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->apfnExprEval;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.EXPR_EVAL) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.EXPR_EVAL));
            }
        }

        public global::Sample.XMIT_ROUTINE_QUINTUPLE AXmitQuintuple
        {
            get
            {
                global::Sample.XMIT_ROUTINE_QUINTUPLE __result0;
                if (((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aXmitQuintuple == IntPtr.Zero) __result0 = null;
                else if (global::Sample.XMIT_ROUTINE_QUINTUPLE.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aXmitQuintuple))
                    __result0 = (global::Sample.XMIT_ROUTINE_QUINTUPLE) global::Sample.XMIT_ROUTINE_QUINTUPLE.NativeToManagedMap[((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aXmitQuintuple];
                else __result0 = global::Sample.XMIT_ROUTINE_QUINTUPLE.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aXmitQuintuple);
                return __result0;
            }
        }

        public byte* PFormatTypes
        {
            get
            {
                return (byte*) ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pFormatTypes;
            }
        }

        public int FCheckBounds
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->fCheckBounds;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->fCheckBounds = value;
            }
        }

        public uint Version
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Version;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Version = value;
            }
        }

        public global::Sample.MALLOC_FREE_STRUCT PMallocFreeStruct
        {
            get
            {
                global::Sample.MALLOC_FREE_STRUCT __result0;
                if (((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pMallocFreeStruct == IntPtr.Zero) __result0 = null;
                else if (global::Sample.MALLOC_FREE_STRUCT.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pMallocFreeStruct))
                    __result0 = (global::Sample.MALLOC_FREE_STRUCT) global::Sample.MALLOC_FREE_STRUCT.NativeToManagedMap[((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pMallocFreeStruct];
                else __result0 = global::Sample.MALLOC_FREE_STRUCT.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->pMallocFreeStruct);
                return __result0;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->pMallocFreeStruct = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int MIDLVersion
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->MIDLVersion;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->MIDLVersion = value;
            }
        }

        public global::Sample.COMM_FAULT_OFFSETS CommFaultOffsets
        {
            get
            {
                global::Sample.COMM_FAULT_OFFSETS __result0;
                if (((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->CommFaultOffsets == IntPtr.Zero) __result0 = null;
                else if (global::Sample.COMM_FAULT_OFFSETS.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->CommFaultOffsets))
                    __result0 = (global::Sample.COMM_FAULT_OFFSETS) global::Sample.COMM_FAULT_OFFSETS.NativeToManagedMap[((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->CommFaultOffsets];
                else __result0 = global::Sample.COMM_FAULT_OFFSETS.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->CommFaultOffsets);
                return __result0;
            }
        }

        public global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE AUserMarshalQuadruple
        {
            get
            {
                global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE __result0;
                if (((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aUserMarshalQuadruple == IntPtr.Zero) __result0 = null;
                else if (global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.NativeToManagedMap.ContainsKey(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aUserMarshalQuadruple))
                    __result0 = (global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE) global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.NativeToManagedMap[((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aUserMarshalQuadruple];
                else __result0 = global::Sample.USER_MARSHAL_ROUTINE_QUADRUPLE.__CreateInstance(((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->aUserMarshalQuadruple);
                return __result0;
            }
        }

        public int Reserved1
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Reserved1;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Reserved1 = value;
            }
        }

        public int Reserved2
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Reserved2;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Reserved2 = value;
            }
        }

        public int Reserved3
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Reserved3;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Reserved3 = value;
            }
        }

        public int Reserved4
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Reserved4;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Reserved4 = value;
            }
        }

        public int Reserved5
        {
            get
            {
                return ((global::Sample.MIDL_STUB_DESC.__Internal*) __Instance)->Reserved5;
            }

            set
            {
                ((global::Sample.MIDL_STUB_DESC.__Internal*)__Instance)->Reserved5 = value;
            }
        }
    }

    public unsafe partial class FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr XlatTable;

            [FieldOffset(4)]
            internal global::System.IntPtr StateTable;

            [FieldOffset(8)]
            internal uint NumberOfEntries;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 __CreateInstance(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal));
            *(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) __Instance) = *((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void** XlatTable
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) __Instance)->XlatTable;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*)__Instance)->XlatTable = (global::System.IntPtr) value;
            }
        }

        public byte* StateTable
        {
            get
            {
                return (byte*) ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) __Instance)->StateTable;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*)__Instance)->StateTable = (global::System.IntPtr) value;
            }
        }

        public uint NumberOfEntries
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) __Instance)->NumberOfEntries;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*)__Instance)->NumberOfEntries = value;
            }
        }
    }

    public unsafe partial class FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr XlatTable;

            [FieldOffset(4)]
            internal uint NumberOfBuckets;

            [FieldOffset(8)]
            internal uint HashMask;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D __CreateInstance(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal));
            *(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance) = *((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.FULL_PTR_TO_REFID_ELEMENT XlatTable
        {
            get
            {
                global::Sample.FULL_PTR_TO_REFID_ELEMENT __result0;
                if (((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->XlatTable == IntPtr.Zero) __result0 = null;
                else if (global::Sample.FULL_PTR_TO_REFID_ELEMENT.NativeToManagedMap.ContainsKey(((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->XlatTable))
                    __result0 = (global::Sample.FULL_PTR_TO_REFID_ELEMENT) global::Sample.FULL_PTR_TO_REFID_ELEMENT.NativeToManagedMap[((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->XlatTable];
                else __result0 = global::Sample.FULL_PTR_TO_REFID_ELEMENT.__CreateInstance(((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->XlatTable);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*)__Instance)->XlatTable = new global::System.IntPtr(&__value);
            }
        }

        public uint NumberOfBuckets
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->NumberOfBuckets;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*)__Instance)->NumberOfBuckets = value;
            }
        }

        public uint HashMask
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) __Instance)->HashMask;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*)__Instance)->HashMask = value;
            }
        }
    }

    public unsafe partial class FULL_PTR_XLAT_TABLES : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal RefIdToPointer;

            [FieldOffset(12)]
            internal global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal PointerToRefId;

            [FieldOffset(24)]
            internal uint NextRefId;

            [FieldOffset(28)]
            internal global::Sample.E2A6324B8E10DEE2666A6A5498DFC667B XlatSide;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FULL_PTR_XLAT_TABLES@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_XLAT_TABLES>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FULL_PTR_XLAT_TABLES __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FULL_PTR_XLAT_TABLES __CreateInstance(global::Sample.FULL_PTR_XLAT_TABLES.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_XLAT_TABLES(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FULL_PTR_XLAT_TABLES.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES.__Internal));
            *(global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FULL_PTR_XLAT_TABLES(global::Sample.FULL_PTR_XLAT_TABLES.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FULL_PTR_XLAT_TABLES(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FULL_PTR_XLAT_TABLES()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FULL_PTR_XLAT_TABLES(global::Sample.FULL_PTR_XLAT_TABLES _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_XLAT_TABLES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) __Instance) = *((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FULL_PTR_XLAT_TABLES __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7 RefIdToPointer
        {
            get
            {
                return global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__CreateInstance(new global::System.IntPtr(&((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) __Instance)->RefIdToPointer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*)__Instance)->RefIdToPointer = *(global::Sample.FULL_PTR_XLAT_TABLES_ECFFA09E862963CB530A7E2871127FDA7.__Internal*) value.__Instance;
            }
        }

        public global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D PointerToRefId
        {
            get
            {
                return global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__CreateInstance(new global::System.IntPtr(&((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) __Instance)->PointerToRefId));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*)__Instance)->PointerToRefId = *(global::Sample.FULL_PTR_XLAT_TABLES_E5B5EF811252786EBFBAAA3889BB4C68D.__Internal*) value.__Instance;
            }
        }

        public uint NextRefId
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) __Instance)->NextRefId;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*)__Instance)->NextRefId = value;
            }
        }

        public global::Sample.E2A6324B8E10DEE2666A6A5498DFC667B XlatSide
        {
            get
            {
                return ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*) __Instance)->XlatSide;
            }

            set
            {
                ((global::Sample.FULL_PTR_XLAT_TABLES.__Internal*)__Instance)->XlatSide = value;
            }
        }
    }

    public unsafe partial class E3FA64165D15A4602C29B2D9B0DA4A5E9 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal void* pad;

            [FieldOffset(8)]
            internal global::System.IntPtr userContext;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E3FA64165D15A4602C29B2D9B0DA4A5E9@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9 __CreateInstance(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal));
            *(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E3FA64165D15A4602C29B2D9B0DA4A5E9(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E3FA64165D15A4602C29B2D9B0DA4A5E9(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E3FA64165D15A4602C29B2D9B0DA4A5E9()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E3FA64165D15A4602C29B2D9B0DA4A5E9(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal*) __Instance) = *((global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        private global::System.IntPtr[] __pad;

        private bool __padInitialised;
        public global::System.IntPtr[] Pad
        {
            get
            {
                if (!__padInitialised)
                {
                    __pad = null;
                    __padInitialised = true;
                }
                return __pad;
            }

            set
            {
                __pad = value;
                if (!__padInitialised)
                {
                    __padInitialised = true;
                }
            }
        }

        public global::System.IntPtr UserContext
        {
            get
            {
                return ((global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal*) __Instance)->userContext;
            }

            set
            {
                ((global::Sample.E3FA64165D15A4602C29B2D9B0DA4A5E9.__Internal*)__Instance)->userContext = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class IRpcChannelBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr lpVtbl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IRpcChannelBuffer@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRpcChannelBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRpcChannelBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IRpcChannelBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IRpcChannelBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IRpcChannelBuffer __CreateInstance(global::Sample.IRpcChannelBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IRpcChannelBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IRpcChannelBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBuffer.__Internal));
            *(global::Sample.IRpcChannelBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IRpcChannelBuffer(global::Sample.IRpcChannelBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IRpcChannelBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IRpcChannelBuffer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IRpcChannelBuffer(global::Sample.IRpcChannelBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IRpcChannelBuffer.__Internal*) __Instance) = *((global::Sample.IRpcChannelBuffer.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IRpcChannelBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.IRpcChannelBufferVtbl LpVtbl
        {
            get
            {
                global::Sample.IRpcChannelBufferVtbl __result0;
                if (((global::Sample.IRpcChannelBuffer.__Internal*) __Instance)->lpVtbl == IntPtr.Zero) __result0 = null;
                else if (global::Sample.IRpcChannelBufferVtbl.NativeToManagedMap.ContainsKey(((global::Sample.IRpcChannelBuffer.__Internal*) __Instance)->lpVtbl))
                    __result0 = (global::Sample.IRpcChannelBufferVtbl) global::Sample.IRpcChannelBufferVtbl.NativeToManagedMap[((global::Sample.IRpcChannelBuffer.__Internal*) __Instance)->lpVtbl];
                else __result0 = global::Sample.IRpcChannelBufferVtbl.__CreateInstance(((global::Sample.IRpcChannelBuffer.__Internal*) __Instance)->lpVtbl);
                return __result0;
            }

            set
            {
                ((global::Sample.IRpcChannelBuffer.__Internal*)__Instance)->lpVtbl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ECC81E267BD8B32E89ADB7AE662C05BFA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int Dimension;

            [FieldOffset(4)]
            internal global::System.IntPtr BufferConformanceMark;

            [FieldOffset(8)]
            internal global::System.IntPtr BufferVarianceMark;

            [FieldOffset(12)]
            internal global::System.IntPtr MaxCountArray;

            [FieldOffset(16)]
            internal global::System.IntPtr OffsetArray;

            [FieldOffset(20)]
            internal global::System.IntPtr ActualCountArray;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0ECC81E267BD8B32E89ADB7AE662C05BFA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA __CreateInstance(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal));
            *(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ECC81E267BD8B32E89ADB7AE662C05BFA(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ECC81E267BD8B32E89ADB7AE662C05BFA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ECC81E267BD8B32E89ADB7AE662C05BFA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ECC81E267BD8B32E89ADB7AE662C05BFA(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance) = *((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Dimension
        {
            get
            {
                return ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->Dimension;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->Dimension = value;
            }
        }

        public uint* BufferConformanceMark
        {
            get
            {
                return (uint*) ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->BufferConformanceMark;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->BufferConformanceMark = (global::System.IntPtr) value;
            }
        }

        public uint* BufferVarianceMark
        {
            get
            {
                return (uint*) ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->BufferVarianceMark;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->BufferVarianceMark = (global::System.IntPtr) value;
            }
        }

        public uint* MaxCountArray
        {
            get
            {
                return (uint*) ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->MaxCountArray;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->MaxCountArray = (global::System.IntPtr) value;
            }
        }

        public uint* OffsetArray
        {
            get
            {
                return (uint*) ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->OffsetArray;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->OffsetArray = (global::System.IntPtr) value;
            }
        }

        public uint* ActualCountArray
        {
            get
            {
                return (uint*) ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*) __Instance)->ActualCountArray;
            }

            set
            {
                ((global::Sample.ECC81E267BD8B32E89ADB7AE662C05BFA.__Internal*)__Instance)->ActualCountArray = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class RPC_VERSION : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort MajorVersion;

            [FieldOffset(2)]
            internal ushort MinorVersion;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_RPC_VERSION@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_VERSION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_VERSION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RPC_VERSION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RPC_VERSION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RPC_VERSION __CreateInstance(global::Sample.RPC_VERSION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RPC_VERSION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RPC_VERSION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_VERSION.__Internal));
            *(global::Sample.RPC_VERSION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RPC_VERSION(global::Sample.RPC_VERSION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RPC_VERSION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RPC_VERSION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_VERSION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RPC_VERSION(global::Sample.RPC_VERSION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_VERSION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.RPC_VERSION.__Internal*) __Instance) = *((global::Sample.RPC_VERSION.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.RPC_VERSION __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort MajorVersion
        {
            get
            {
                return ((global::Sample.RPC_VERSION.__Internal*) __Instance)->MajorVersion;
            }

            set
            {
                ((global::Sample.RPC_VERSION.__Internal*)__Instance)->MajorVersion = value;
            }
        }

        public ushort MinorVersion
        {
            get
            {
                return ((global::Sample.RPC_VERSION.__Internal*) __Instance)->MinorVersion;
            }

            set
            {
                ((global::Sample.RPC_VERSION.__Internal*)__Instance)->MinorVersion = value;
            }
        }
    }

    public unsafe partial class RPC_SYNTAX_IDENTIFIER : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Sample.GUID.__Internal SyntaxGUID;

            [FieldOffset(16)]
            internal global::Sample.RPC_VERSION.__Internal SyntaxVersion;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_RPC_SYNTAX_IDENTIFIER@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_SYNTAX_IDENTIFIER> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RPC_SYNTAX_IDENTIFIER>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RPC_SYNTAX_IDENTIFIER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RPC_SYNTAX_IDENTIFIER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RPC_SYNTAX_IDENTIFIER __CreateInstance(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RPC_SYNTAX_IDENTIFIER(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal));
            *(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RPC_SYNTAX_IDENTIFIER(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RPC_SYNTAX_IDENTIFIER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RPC_SYNTAX_IDENTIFIER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RPC_SYNTAX_IDENTIFIER(global::Sample.RPC_SYNTAX_IDENTIFIER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*) __Instance) = *((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.RPC_SYNTAX_IDENTIFIER __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.GUID SyntaxGUID
        {
            get
            {
                return global::Sample.GUID.__CreateInstance(new global::System.IntPtr(&((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*) __Instance)->SyntaxGUID));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*)__Instance)->SyntaxGUID = *(global::Sample.GUID.__Internal*) value.__Instance;
            }
        }

        public global::Sample.RPC_VERSION SyntaxVersion
        {
            get
            {
                return global::Sample.RPC_VERSION.__CreateInstance(new global::System.IntPtr(&((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*) __Instance)->SyntaxVersion));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::Sample.RPC_SYNTAX_IDENTIFIER.__Internal*)__Instance)->SyntaxVersion = *(global::Sample.RPC_VERSION.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class GENERIC_BINDING_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pObj;

            [FieldOffset(4)]
            internal uint Size;

            [FieldOffset(8)]
            internal global::System.IntPtr pfnBind;

            [FieldOffset(12)]
            internal global::System.IntPtr pfnUnbind;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0__GENERIC_BINDING_INFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GENERIC_BINDING_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GENERIC_BINDING_INFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GENERIC_BINDING_INFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GENERIC_BINDING_INFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GENERIC_BINDING_INFO __CreateInstance(global::Sample.GENERIC_BINDING_INFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GENERIC_BINDING_INFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GENERIC_BINDING_INFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_INFO.__Internal));
            *(global::Sample.GENERIC_BINDING_INFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GENERIC_BINDING_INFO(global::Sample.GENERIC_BINDING_INFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GENERIC_BINDING_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GENERIC_BINDING_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public GENERIC_BINDING_INFO(global::Sample.GENERIC_BINDING_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.GENERIC_BINDING_INFO.__Internal*) __Instance) = *((global::Sample.GENERIC_BINDING_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.GENERIC_BINDING_INFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr PObj
        {
            get
            {
                return ((global::Sample.GENERIC_BINDING_INFO.__Internal*) __Instance)->pObj;
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_INFO.__Internal*)__Instance)->pObj = (global::System.IntPtr) value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::Sample.GENERIC_BINDING_INFO.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_INFO.__Internal*)__Instance)->Size = value;
            }
        }

        public global::Sample.GENERIC_BINDING_ROUTINE PfnBind
        {
            get
            {
                var __ptr0 = ((global::Sample.GENERIC_BINDING_INFO.__Internal*) __Instance)->pfnBind;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.GENERIC_BINDING_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.GENERIC_BINDING_ROUTINE));
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_INFO.__Internal*)__Instance)->pfnBind = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.GENERIC_UNBIND_ROUTINE PfnUnbind
        {
            get
            {
                var __ptr0 = ((global::Sample.GENERIC_BINDING_INFO.__Internal*) __Instance)->pfnUnbind;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.GENERIC_UNBIND_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.GENERIC_UNBIND_ROUTINE));
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_INFO.__Internal*)__Instance)->pfnUnbind = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class GENERIC_BINDING_ROUTINE_PAIR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pfnBind;

            [FieldOffset(4)]
            internal global::System.IntPtr pfnUnbind;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_GENERIC_BINDING_ROUTINE_PAIR@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GENERIC_BINDING_ROUTINE_PAIR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.GENERIC_BINDING_ROUTINE_PAIR>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.GENERIC_BINDING_ROUTINE_PAIR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.GENERIC_BINDING_ROUTINE_PAIR(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.GENERIC_BINDING_ROUTINE_PAIR __CreateInstance(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.GENERIC_BINDING_ROUTINE_PAIR(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal));
            *(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GENERIC_BINDING_ROUTINE_PAIR(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GENERIC_BINDING_ROUTINE_PAIR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GENERIC_BINDING_ROUTINE_PAIR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public GENERIC_BINDING_ROUTINE_PAIR(global::Sample.GENERIC_BINDING_ROUTINE_PAIR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*) __Instance) = *((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.GENERIC_BINDING_ROUTINE_PAIR __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.GENERIC_BINDING_ROUTINE PfnBind
        {
            get
            {
                var __ptr0 = ((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*) __Instance)->pfnBind;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.GENERIC_BINDING_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.GENERIC_BINDING_ROUTINE));
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*)__Instance)->pfnBind = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.GENERIC_UNBIND_ROUTINE PfnUnbind
        {
            get
            {
                var __ptr0 = ((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*) __Instance)->pfnUnbind;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.GENERIC_UNBIND_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.GENERIC_UNBIND_ROUTINE));
            }

            set
            {
                ((global::Sample.GENERIC_BINDING_ROUTINE_PAIR.__Internal*)__Instance)->pfnUnbind = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class XMIT_ROUTINE_QUINTUPLE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pfnTranslateToXmit;

            [FieldOffset(4)]
            internal global::System.IntPtr pfnTranslateFromXmit;

            [FieldOffset(8)]
            internal global::System.IntPtr pfnFreeXmit;

            [FieldOffset(12)]
            internal global::System.IntPtr pfnFreeInst;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_XMIT_ROUTINE_QUINTUPLE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.XMIT_ROUTINE_QUINTUPLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.XMIT_ROUTINE_QUINTUPLE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.XMIT_ROUTINE_QUINTUPLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.XMIT_ROUTINE_QUINTUPLE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.XMIT_ROUTINE_QUINTUPLE __CreateInstance(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.XMIT_ROUTINE_QUINTUPLE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal));
            *(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private XMIT_ROUTINE_QUINTUPLE(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected XMIT_ROUTINE_QUINTUPLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public XMIT_ROUTINE_QUINTUPLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public XMIT_ROUTINE_QUINTUPLE(global::Sample.XMIT_ROUTINE_QUINTUPLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) __Instance) = *((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.XMIT_ROUTINE_QUINTUPLE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.XMIT_HELPER_ROUTINE PfnTranslateToXmit
        {
            get
            {
                var __ptr0 = ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) __Instance)->pfnTranslateToXmit;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.XMIT_HELPER_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.XMIT_HELPER_ROUTINE));
            }

            set
            {
                ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*)__Instance)->pfnTranslateToXmit = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.XMIT_HELPER_ROUTINE PfnTranslateFromXmit
        {
            get
            {
                var __ptr0 = ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) __Instance)->pfnTranslateFromXmit;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.XMIT_HELPER_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.XMIT_HELPER_ROUTINE));
            }

            set
            {
                ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*)__Instance)->pfnTranslateFromXmit = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.XMIT_HELPER_ROUTINE PfnFreeXmit
        {
            get
            {
                var __ptr0 = ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) __Instance)->pfnFreeXmit;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.XMIT_HELPER_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.XMIT_HELPER_ROUTINE));
            }

            set
            {
                ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*)__Instance)->pfnFreeXmit = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.XMIT_HELPER_ROUTINE PfnFreeInst
        {
            get
            {
                var __ptr0 = ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*) __Instance)->pfnFreeInst;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.XMIT_HELPER_ROUTINE) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.XMIT_HELPER_ROUTINE));
            }

            set
            {
                ((global::Sample.XMIT_ROUTINE_QUINTUPLE.__Internal*)__Instance)->pfnFreeInst = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class MALLOC_FREE_STRUCT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pfnAllocate;

            [FieldOffset(4)]
            internal global::System.IntPtr pfnFree;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MALLOC_FREE_STRUCT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MALLOC_FREE_STRUCT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MALLOC_FREE_STRUCT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MALLOC_FREE_STRUCT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MALLOC_FREE_STRUCT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MALLOC_FREE_STRUCT __CreateInstance(global::Sample.MALLOC_FREE_STRUCT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MALLOC_FREE_STRUCT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MALLOC_FREE_STRUCT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MALLOC_FREE_STRUCT.__Internal));
            *(global::Sample.MALLOC_FREE_STRUCT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MALLOC_FREE_STRUCT(global::Sample.MALLOC_FREE_STRUCT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MALLOC_FREE_STRUCT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MALLOC_FREE_STRUCT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MALLOC_FREE_STRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MALLOC_FREE_STRUCT(global::Sample.MALLOC_FREE_STRUCT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MALLOC_FREE_STRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MALLOC_FREE_STRUCT.__Internal*) __Instance) = *((global::Sample.MALLOC_FREE_STRUCT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MALLOC_FREE_STRUCT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.Delegates.Func_IntPtr_uint PfnAllocate
        {
            get
            {
                var __ptr0 = ((global::Sample.MALLOC_FREE_STRUCT.__Internal*) __Instance)->pfnAllocate;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_IntPtr_uint));
            }

            set
            {
                ((global::Sample.MALLOC_FREE_STRUCT.__Internal*)__Instance)->pfnAllocate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Action_IntPtr PfnFree
        {
            get
            {
                var __ptr0 = ((global::Sample.MALLOC_FREE_STRUCT.__Internal*) __Instance)->pfnFree;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Action_IntPtr));
            }

            set
            {
                ((global::Sample.MALLOC_FREE_STRUCT.__Internal*)__Instance)->pfnFree = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class COMM_FAULT_OFFSETS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal short CommOffset;

            [FieldOffset(2)]
            internal short FaultOffset;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_COMM_FAULT_OFFSETS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COMM_FAULT_OFFSETS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COMM_FAULT_OFFSETS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.COMM_FAULT_OFFSETS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.COMM_FAULT_OFFSETS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.COMM_FAULT_OFFSETS __CreateInstance(global::Sample.COMM_FAULT_OFFSETS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.COMM_FAULT_OFFSETS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.COMM_FAULT_OFFSETS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.COMM_FAULT_OFFSETS.__Internal));
            *(global::Sample.COMM_FAULT_OFFSETS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private COMM_FAULT_OFFSETS(global::Sample.COMM_FAULT_OFFSETS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected COMM_FAULT_OFFSETS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public COMM_FAULT_OFFSETS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COMM_FAULT_OFFSETS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public COMM_FAULT_OFFSETS(global::Sample.COMM_FAULT_OFFSETS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COMM_FAULT_OFFSETS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.COMM_FAULT_OFFSETS.__Internal*) __Instance) = *((global::Sample.COMM_FAULT_OFFSETS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.COMM_FAULT_OFFSETS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public short CommOffset
        {
            get
            {
                return ((global::Sample.COMM_FAULT_OFFSETS.__Internal*) __Instance)->CommOffset;
            }

            set
            {
                ((global::Sample.COMM_FAULT_OFFSETS.__Internal*)__Instance)->CommOffset = value;
            }
        }

        public short FaultOffset
        {
            get
            {
                return ((global::Sample.COMM_FAULT_OFFSETS.__Internal*) __Instance)->FaultOffset;
            }

            set
            {
                ((global::Sample.COMM_FAULT_OFFSETS.__Internal*)__Instance)->FaultOffset = value;
            }
        }
    }

    public unsafe partial class FULL_PTR_TO_REFID_ELEMENT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Next;

            [FieldOffset(4)]
            internal global::System.IntPtr Pointer;

            [FieldOffset(8)]
            internal uint RefId;

            [FieldOffset(12)]
            internal byte State;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FULL_PTR_TO_REFID_ELEMENT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_TO_REFID_ELEMENT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FULL_PTR_TO_REFID_ELEMENT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FULL_PTR_TO_REFID_ELEMENT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_TO_REFID_ELEMENT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FULL_PTR_TO_REFID_ELEMENT __CreateInstance(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FULL_PTR_TO_REFID_ELEMENT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal));
            *(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FULL_PTR_TO_REFID_ELEMENT(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FULL_PTR_TO_REFID_ELEMENT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FULL_PTR_TO_REFID_ELEMENT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FULL_PTR_TO_REFID_ELEMENT(global::Sample.FULL_PTR_TO_REFID_ELEMENT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance) = *((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FULL_PTR_TO_REFID_ELEMENT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.FULL_PTR_TO_REFID_ELEMENT Next
        {
            get
            {
                global::Sample.FULL_PTR_TO_REFID_ELEMENT __result0;
                if (((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->Next == IntPtr.Zero) __result0 = null;
                else if (global::Sample.FULL_PTR_TO_REFID_ELEMENT.NativeToManagedMap.ContainsKey(((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->Next))
                    __result0 = (global::Sample.FULL_PTR_TO_REFID_ELEMENT) global::Sample.FULL_PTR_TO_REFID_ELEMENT.NativeToManagedMap[((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->Next];
                else __result0 = global::Sample.FULL_PTR_TO_REFID_ELEMENT.__CreateInstance(((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->Next);
                return __result0;
            }

            set
            {
                ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*)__Instance)->Next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr Pointer
        {
            get
            {
                return ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->Pointer;
            }

            set
            {
                ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*)__Instance)->Pointer = (global::System.IntPtr) value;
            }
        }

        public uint RefId
        {
            get
            {
                return ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->RefId;
            }

            set
            {
                ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*)__Instance)->RefId = value;
            }
        }

        public byte State
        {
            get
            {
                return ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*) __Instance)->State;
            }

            set
            {
                ((global::Sample.FULL_PTR_TO_REFID_ELEMENT.__Internal*)__Instance)->State = value;
            }
        }
    }

    public unsafe partial class IRpcChannelBufferVtbl : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr QueryInterface;

            [FieldOffset(4)]
            internal global::System.IntPtr AddRef;

            [FieldOffset(8)]
            internal global::System.IntPtr Release;

            [FieldOffset(12)]
            internal global::System.IntPtr GetBuffer;

            [FieldOffset(16)]
            internal global::System.IntPtr SendReceive;

            [FieldOffset(20)]
            internal global::System.IntPtr FreeBuffer;

            [FieldOffset(24)]
            internal global::System.IntPtr GetDestCtx;

            [FieldOffset(28)]
            internal global::System.IntPtr IsConnected;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0IRpcChannelBufferVtbl@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRpcChannelBufferVtbl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IRpcChannelBufferVtbl>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IRpcChannelBufferVtbl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IRpcChannelBufferVtbl(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IRpcChannelBufferVtbl __CreateInstance(global::Sample.IRpcChannelBufferVtbl.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IRpcChannelBufferVtbl(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IRpcChannelBufferVtbl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBufferVtbl.__Internal));
            *(global::Sample.IRpcChannelBufferVtbl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IRpcChannelBufferVtbl(global::Sample.IRpcChannelBufferVtbl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IRpcChannelBufferVtbl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IRpcChannelBufferVtbl()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBufferVtbl.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IRpcChannelBufferVtbl(global::Sample.IRpcChannelBufferVtbl _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IRpcChannelBufferVtbl.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance) = *((global::Sample.IRpcChannelBufferVtbl.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IRpcChannelBufferVtbl __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.Delegates.Func_int_IntPtr_IntPtr_voidPtrPtr QueryInterface
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->QueryInterface;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr_IntPtr_voidPtrPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr_IntPtr_voidPtrPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->QueryInterface = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_uint_IntPtr AddRef
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->AddRef;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_uint_IntPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->AddRef = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_uint_IntPtr Release
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_uint_IntPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_int_IntPtr_IntPtr_IntPtr GetBuffer
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->GetBuffer;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->GetBuffer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_int_IntPtr_IntPtr_uintPtr SendReceive
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->SendReceive;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr_IntPtr_uintPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr_IntPtr_uintPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->SendReceive = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_int_IntPtr_IntPtr FreeBuffer
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->FreeBuffer;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->FreeBuffer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_int_IntPtr_uintPtr_voidPtrPtr GetDestCtx
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->GetDestCtx;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr_uintPtr_voidPtrPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr_uintPtr_voidPtrPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->GetDestCtx = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::Sample.Delegates.Func_int_IntPtr IsConnected
        {
            get
            {
                var __ptr0 = ((global::Sample.IRpcChannelBufferVtbl.__Internal*) __Instance)->IsConnected;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::Sample.IRpcChannelBufferVtbl.__Internal*)__Instance)->IsConnected = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class TagRPCOLEMESSAGE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr reserved1;

            [FieldOffset(4)]
            internal uint dataRepresentation;

            [FieldOffset(8)]
            internal global::System.IntPtr Buffer;

            [FieldOffset(12)]
            internal uint cbBuffer;

            [FieldOffset(16)]
            internal uint iMethod;

            [FieldOffset(20)]
            internal void* reserved2;

            [FieldOffset(40)]
            internal uint rpcFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRPCOLEMESSAGE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRPCOLEMESSAGE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRPCOLEMESSAGE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRPCOLEMESSAGE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRPCOLEMESSAGE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRPCOLEMESSAGE __CreateInstance(global::Sample.TagRPCOLEMESSAGE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRPCOLEMESSAGE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRPCOLEMESSAGE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPCOLEMESSAGE.__Internal));
            *(global::Sample.TagRPCOLEMESSAGE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRPCOLEMESSAGE(global::Sample.TagRPCOLEMESSAGE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRPCOLEMESSAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRPCOLEMESSAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPCOLEMESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRPCOLEMESSAGE(global::Sample.TagRPCOLEMESSAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPCOLEMESSAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance) = *((global::Sample.TagRPCOLEMESSAGE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRPCOLEMESSAGE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Reserved1
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->reserved1;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->reserved1 = (global::System.IntPtr) value;
            }
        }

        public uint DataRepresentation
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->dataRepresentation;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->dataRepresentation = value;
            }
        }

        public global::System.IntPtr Buffer
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->Buffer;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->Buffer = (global::System.IntPtr) value;
            }
        }

        public uint CbBuffer
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->cbBuffer;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->cbBuffer = value;
            }
        }

        public uint IMethod
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->iMethod;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->iMethod = value;
            }
        }

        private global::System.IntPtr[] __reserved2;

        private bool __reserved2Initialised;
        public global::System.IntPtr[] Reserved2
        {
            get
            {
                if (!__reserved2Initialised)
                {
                    __reserved2 = null;
                    __reserved2Initialised = true;
                }
                return __reserved2;
            }

            set
            {
                __reserved2 = value;
                if (!__reserved2Initialised)
                {
                    __reserved2Initialised = true;
                }
            }
        }

        public uint RpcFlags
        {
            get
            {
                return ((global::Sample.TagRPCOLEMESSAGE.__Internal*) __Instance)->rpcFlags;
            }

            set
            {
                ((global::Sample.TagRPCOLEMESSAGE.__Internal*)__Instance)->rpcFlags = value;
            }
        }
    }

    public unsafe partial class TypeInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vfptr;

            [FieldOffset(4)]
            internal int _M_data;

            [FieldOffset(8)]
            internal sbyte[] _M_d_name;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0type_info@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TypeInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TypeInfo>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TypeInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TypeInfo(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TypeInfo __CreateInstance(global::Sample.TypeInfo.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TypeInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TypeInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TypeInfo.__Internal));
            *(global::Sample.TypeInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TypeInfo(global::Sample.TypeInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TypeInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TypeInfo(global::Sample.TypeInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TypeInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TypeInfo.__Internal*) __Instance) = *((global::Sample.TypeInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TypeInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Vfptr
        {
            get
            {
                return ((global::Sample.TypeInfo.__Internal*) __Instance)->vfptr;
            }

            set
            {
                ((global::Sample.TypeInfo.__Internal*)__Instance)->vfptr = (global::System.IntPtr) value;
            }
        }

        public int M_data
        {
            get
            {
                return ((global::Sample.TypeInfo.__Internal*) __Instance)->_M_data;
            }

            set
            {
                ((global::Sample.TypeInfo.__Internal*)__Instance)->_M_data = value;
            }
        }

        public sbyte[] M_dName
        {
            get
            {
                return ((global::Sample.TypeInfo.__Internal*) __Instance)->_M_d_name;
            }

            set
            {
                ((global::Sample.TypeInfo.__Internal*)__Instance)->_M_d_name = value;
            }
        }
    }

    public unsafe partial class IDClass16 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 2)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_IDClass_16@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDClass16> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDClass16>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDClass16 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDClass16(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDClass16 __CreateInstance(global::Sample.IDClass16.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDClass16(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDClass16.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass16.__Internal));
            *(global::Sample.IDClass16.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDClass16(global::Sample.IDClass16.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDClass16(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IDClass16()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass16.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IDClass16(global::Sample.IDClass16 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass16.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IDClass16.__Internal*) __Instance) = *((global::Sample.IDClass16.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IDClass16 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort Id
        {
            get
            {
                return ((global::Sample.IDClass16.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::Sample.IDClass16.__Internal*)__Instance)->id = value;
            }
        }
    }

    public unsafe partial class IDClass32 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_IDClass_32@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDClass32> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IDClass32>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IDClass32 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IDClass32(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IDClass32 __CreateInstance(global::Sample.IDClass32.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IDClass32(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IDClass32.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass32.__Internal));
            *(global::Sample.IDClass32.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDClass32(global::Sample.IDClass32.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDClass32(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IDClass32()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass32.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IDClass32(global::Sample.IDClass32 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IDClass32.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IDClass32.__Internal*) __Instance) = *((global::Sample.IDClass32.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IDClass32 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Id
        {
            get
            {
                return ((global::Sample.IDClass32.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::Sample.IDClass32.__Internal*)__Instance)->id = value;
            }
        }
    }

    public unsafe partial class AsyncContext : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0AsyncContext@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AsyncContext>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AsyncContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AsyncContext(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AsyncContext __CreateInstance(global::Sample.AsyncContext.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AsyncContext(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AsyncContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncContext.__Internal));
            *(global::Sample.AsyncContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AsyncContext(global::Sample.AsyncContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AsyncContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AsyncContext()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AsyncContext(global::Sample.AsyncContext _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.AsyncContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.AsyncContext.__Internal*) __Instance) = *((global::Sample.AsyncContext.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.AsyncContext __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MId
        {
            get
            {
                return ((global::Sample.AsyncContext.__Internal*) __Instance)->m_id;
            }

            set
            {
                ((global::Sample.AsyncContext.__Internal*)__Instance)->m_id = value;
            }
        }
    }

    public unsafe partial class Matrix4 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float _11;

            [FieldOffset(4)]
            internal float _12;

            [FieldOffset(8)]
            internal float _13;

            [FieldOffset(12)]
            internal float _14;

            [FieldOffset(16)]
            internal float _21;

            [FieldOffset(20)]
            internal float _22;

            [FieldOffset(24)]
            internal float _23;

            [FieldOffset(28)]
            internal float _24;

            [FieldOffset(32)]
            internal float _31;

            [FieldOffset(36)]
            internal float _32;

            [FieldOffset(40)]
            internal float _33;

            [FieldOffset(44)]
            internal float _34;

            [FieldOffset(48)]
            internal float _41;

            [FieldOffset(52)]
            internal float _42;

            [FieldOffset(56)]
            internal float _43;

            [FieldOffset(60)]
            internal float _44;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Matrix4@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Matrix4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Matrix4>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Matrix4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Matrix4(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Matrix4 __CreateInstance(global::Sample.Matrix4.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Matrix4(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Matrix4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Matrix4.__Internal));
            *(global::Sample.Matrix4.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Matrix4(global::Sample.Matrix4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Matrix4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Matrix4()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Matrix4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Matrix4(global::Sample.Matrix4 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Matrix4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.Matrix4.__Internal*) __Instance) = *((global::Sample.Matrix4.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.Matrix4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float _11
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_11;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_11 = value;
            }
        }

        public float _12
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_12;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_12 = value;
            }
        }

        public float _13
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_13;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_13 = value;
            }
        }

        public float _14
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_14;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_14 = value;
            }
        }

        public float _21
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_21;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_21 = value;
            }
        }

        public float _22
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_22;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_22 = value;
            }
        }

        public float _23
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_23;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_23 = value;
            }
        }

        public float _24
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_24;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_24 = value;
            }
        }

        public float _31
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_31;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_31 = value;
            }
        }

        public float _32
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_32;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_32 = value;
            }
        }

        public float _33
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_33;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_33 = value;
            }
        }

        public float _34
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_34;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_34 = value;
            }
        }

        public float _41
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_41;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_41 = value;
            }
        }

        public float _42
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_42;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_42 = value;
            }
        }

        public float _43
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_43;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_43 = value;
            }
        }

        public float _44
        {
            get
            {
                return ((global::Sample.Matrix4.__Internal*) __Instance)->_44;
            }

            set
            {
                ((global::Sample.Matrix4.__Internal*)__Instance)->_44 = value;
            }
        }
    }

    public unsafe partial class TResult : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_val;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0TResult@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TResult>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TResult __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TResult(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TResult __CreateInstance(global::Sample.TResult.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TResult(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TResult.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TResult.__Internal));
            *(global::Sample.TResult.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TResult(global::Sample.TResult.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TResult(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TResult()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TResult(global::Sample.TResult _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TResult.__Internal*) __Instance) = *((global::Sample.TResult.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TResult __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MVal
        {
            get
            {
                return ((global::Sample.TResult.__Internal*) __Instance)->m_val;
            }

            set
            {
                ((global::Sample.TResult.__Internal*)__Instance)->m_val = value;
            }
        }
    }

    public unsafe partial class TurbineGUID : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_data1;

            [FieldOffset(4)]
            internal ushort m_data2;

            [FieldOffset(6)]
            internal ushort m_data3;

            [FieldOffset(8)]
            internal fixed sbyte m_data4[8];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Turbine_GUID@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TurbineGUID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TurbineGUID>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TurbineGUID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TurbineGUID(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TurbineGUID __CreateInstance(global::Sample.TurbineGUID.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TurbineGUID(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TurbineGUID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TurbineGUID.__Internal));
            *(global::Sample.TurbineGUID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TurbineGUID(global::Sample.TurbineGUID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TurbineGUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TurbineGUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TurbineGUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TurbineGUID(global::Sample.TurbineGUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TurbineGUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TurbineGUID.__Internal*) __Instance) = *((global::Sample.TurbineGUID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TurbineGUID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MData1
        {
            get
            {
                return ((global::Sample.TurbineGUID.__Internal*) __Instance)->m_data1;
            }

            set
            {
                ((global::Sample.TurbineGUID.__Internal*)__Instance)->m_data1 = value;
            }
        }

        public ushort MData2
        {
            get
            {
                return ((global::Sample.TurbineGUID.__Internal*) __Instance)->m_data2;
            }

            set
            {
                ((global::Sample.TurbineGUID.__Internal*)__Instance)->m_data2 = value;
            }
        }

        public ushort MData3
        {
            get
            {
                return ((global::Sample.TurbineGUID.__Internal*) __Instance)->m_data3;
            }

            set
            {
                ((global::Sample.TurbineGUID.__Internal*)__Instance)->m_data3 = value;
            }
        }

        public sbyte[] MData4
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TurbineGUID.__Internal*) __Instance)->m_data4 != null)
                {
                    __value = new sbyte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.TurbineGUID.__Internal*) __Instance)->m_data4[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.TurbineGUID.__Internal*)__Instance)->m_data4[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class Vector3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float x;

            [FieldOffset(4)]
            internal float y;

            [FieldOffset(8)]
            internal float z;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Vector3@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Vector3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Vector3>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Vector3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Vector3(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Vector3 __CreateInstance(global::Sample.Vector3.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Vector3(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Vector3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Vector3.__Internal));
            *(global::Sample.Vector3.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Vector3(global::Sample.Vector3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Vector3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Vector3()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Vector3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Vector3(global::Sample.Vector3 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Vector3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.Vector3.__Internal*) __Instance) = *((global::Sample.Vector3.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.Vector3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((global::Sample.Vector3.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.Vector3.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::Sample.Vector3.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.Vector3.__Internal*)__Instance)->y = value;
            }
        }

        public float Z
        {
            get
            {
                return ((global::Sample.Vector3.__Internal*) __Instance)->z;
            }

            set
            {
                ((global::Sample.Vector3.__Internal*)__Instance)->z = value;
            }
        }
    }

    public unsafe partial class Quaternion : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float w;

            [FieldOffset(4)]
            internal float x;

            [FieldOffset(8)]
            internal float y;

            [FieldOffset(12)]
            internal float z;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Quaternion@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Quaternion> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Quaternion>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Quaternion __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Quaternion(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Quaternion __CreateInstance(global::Sample.Quaternion.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Quaternion(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Quaternion.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Quaternion.__Internal));
            *(global::Sample.Quaternion.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Quaternion(global::Sample.Quaternion.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Quaternion(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Quaternion()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Quaternion(global::Sample.Quaternion _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Quaternion.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.Quaternion.__Internal*) __Instance) = *((global::Sample.Quaternion.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.Quaternion __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float W
        {
            get
            {
                return ((global::Sample.Quaternion.__Internal*) __Instance)->w;
            }

            set
            {
                ((global::Sample.Quaternion.__Internal*)__Instance)->w = value;
            }
        }

        public float X
        {
            get
            {
                return ((global::Sample.Quaternion.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.Quaternion.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::Sample.Quaternion.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.Quaternion.__Internal*)__Instance)->y = value;
            }
        }

        public float Z
        {
            get
            {
                return ((global::Sample.Quaternion.__Internal*) __Instance)->z;
            }

            set
            {
                ((global::Sample.Quaternion.__Internal*)__Instance)->z = value;
            }
        }
    }

    public unsafe partial class RGBAColor : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float r;

            [FieldOffset(4)]
            internal float g;

            [FieldOffset(8)]
            internal float b;

            [FieldOffset(12)]
            internal float a;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0RGBAColor@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RGBAColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RGBAColor>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RGBAColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RGBAColor(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RGBAColor __CreateInstance(global::Sample.RGBAColor.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RGBAColor(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RGBAColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RGBAColor.__Internal));
            *(global::Sample.RGBAColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RGBAColor(global::Sample.RGBAColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RGBAColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RGBAColor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RGBAColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RGBAColor(global::Sample.RGBAColor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RGBAColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.RGBAColor.__Internal*) __Instance) = *((global::Sample.RGBAColor.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.RGBAColor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float R
        {
            get
            {
                return ((global::Sample.RGBAColor.__Internal*) __Instance)->r;
            }

            set
            {
                ((global::Sample.RGBAColor.__Internal*)__Instance)->r = value;
            }
        }

        public float G
        {
            get
            {
                return ((global::Sample.RGBAColor.__Internal*) __Instance)->g;
            }

            set
            {
                ((global::Sample.RGBAColor.__Internal*)__Instance)->g = value;
            }
        }

        public float B
        {
            get
            {
                return ((global::Sample.RGBAColor.__Internal*) __Instance)->b;
            }

            set
            {
                ((global::Sample.RGBAColor.__Internal*)__Instance)->b = value;
            }
        }

        public float A
        {
            get
            {
                return ((global::Sample.RGBAColor.__Internal*) __Instance)->a;
            }

            set
            {
                ((global::Sample.RGBAColor.__Internal*)__Instance)->a = value;
            }
        }
    }

    public unsafe partial class Heading : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float m_degrees;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0Heading@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Heading> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.Heading>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.Heading __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.Heading(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.Heading __CreateInstance(global::Sample.Heading.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.Heading(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.Heading.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.Heading.__Internal));
            *(global::Sample.Heading.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Heading(global::Sample.Heading.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Heading(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Heading()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Heading.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Heading(global::Sample.Heading _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.Heading.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.Heading.__Internal*) __Instance) = *((global::Sample.Heading.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.Heading __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float MDegrees
        {
            get
            {
                return ((global::Sample.Heading.__Internal*) __Instance)->m_degrees;
            }

            set
            {
                ((global::Sample.Heading.__Internal*)__Instance)->m_degrees = value;
            }
        }
    }

    public unsafe partial class TagEMR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint iType;

            [FieldOffset(4)]
            internal uint nSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagEMR@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagEMR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagEMR>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagEMR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagEMR(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagEMR __CreateInstance(global::Sample.TagEMR.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagEMR(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagEMR.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagEMR.__Internal));
            *(global::Sample.TagEMR.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagEMR(global::Sample.TagEMR.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagEMR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagEMR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagEMR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagEMR(global::Sample.TagEMR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagEMR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagEMR.__Internal*) __Instance) = *((global::Sample.TagEMR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagEMR __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint IType
        {
            get
            {
                return ((global::Sample.TagEMR.__Internal*) __Instance)->iType;
            }

            set
            {
                ((global::Sample.TagEMR.__Internal*)__Instance)->iType = value;
            }
        }

        public uint NSize
        {
            get
            {
                return ((global::Sample.TagEMR.__Internal*) __Instance)->nSize;
            }

            set
            {
                ((global::Sample.TagEMR.__Internal*)__Instance)->nSize = value;
            }
        }
    }

    public unsafe partial class RECTL : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int left;

            [FieldOffset(4)]
            internal int top;

            [FieldOffset(8)]
            internal int right;

            [FieldOffset(12)]
            internal int bottom;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_RECTL@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RECTL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.RECTL>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.RECTL __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.RECTL(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.RECTL __CreateInstance(global::Sample.RECTL.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.RECTL(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.RECTL.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.RECTL.__Internal));
            *(global::Sample.RECTL.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RECTL(global::Sample.RECTL.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RECTL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RECTL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RECTL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RECTL(global::Sample.RECTL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.RECTL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.RECTL.__Internal*) __Instance) = *((global::Sample.RECTL.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.RECTL __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Left
        {
            get
            {
                return ((global::Sample.RECTL.__Internal*) __Instance)->left;
            }

            set
            {
                ((global::Sample.RECTL.__Internal*)__Instance)->left = value;
            }
        }

        public int Top
        {
            get
            {
                return ((global::Sample.RECTL.__Internal*) __Instance)->top;
            }

            set
            {
                ((global::Sample.RECTL.__Internal*)__Instance)->top = value;
            }
        }

        public int Right
        {
            get
            {
                return ((global::Sample.RECTL.__Internal*) __Instance)->right;
            }

            set
            {
                ((global::Sample.RECTL.__Internal*)__Instance)->right = value;
            }
        }

        public int Bottom
        {
            get
            {
                return ((global::Sample.RECTL.__Internal*) __Instance)->bottom;
            }

            set
            {
                ((global::Sample.RECTL.__Internal*)__Instance)->bottom = value;
            }
        }
    }

    public unsafe partial class POINTL : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_POINTL@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.POINTL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.POINTL>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.POINTL __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.POINTL(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.POINTL __CreateInstance(global::Sample.POINTL.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.POINTL(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.POINTL.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.POINTL.__Internal));
            *(global::Sample.POINTL.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private POINTL(global::Sample.POINTL.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected POINTL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public POINTL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.POINTL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public POINTL(global::Sample.POINTL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.POINTL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.POINTL.__Internal*) __Instance) = *((global::Sample.POINTL.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.POINTL __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int X
        {
            get
            {
                return ((global::Sample.POINTL.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.POINTL.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::Sample.POINTL.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.POINTL.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class TagXFORM : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal float eM11;

            [FieldOffset(4)]
            internal float eM12;

            [FieldOffset(8)]
            internal float eM21;

            [FieldOffset(12)]
            internal float eM22;

            [FieldOffset(16)]
            internal float eDx;

            [FieldOffset(20)]
            internal float eDy;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagXFORM@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagXFORM> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagXFORM>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagXFORM __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagXFORM(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagXFORM __CreateInstance(global::Sample.TagXFORM.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagXFORM(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagXFORM.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagXFORM.__Internal));
            *(global::Sample.TagXFORM.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagXFORM(global::Sample.TagXFORM.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagXFORM(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagXFORM()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagXFORM.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagXFORM(global::Sample.TagXFORM _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagXFORM.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagXFORM.__Internal*) __Instance) = *((global::Sample.TagXFORM.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagXFORM __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float EM11
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eM11;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eM11 = value;
            }
        }

        public float EM12
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eM12;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eM12 = value;
            }
        }

        public float EM21
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eM21;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eM21 = value;
            }
        }

        public float EM22
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eM22;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eM22 = value;
            }
        }

        public float EDx
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eDx;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eDx = value;
            }
        }

        public float EDy
        {
            get
            {
                return ((global::Sample.TagXFORM.__Internal*) __Instance)->eDy;
            }

            set
            {
                ((global::Sample.TagXFORM.__Internal*)__Instance)->eDy = value;
            }
        }
    }

    public unsafe partial class TAPE_SET_DRIVE_PARAMETERS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte ECC;

            [FieldOffset(1)]
            internal sbyte Compression;

            [FieldOffset(2)]
            internal sbyte DataPadding;

            [FieldOffset(3)]
            internal sbyte ReportSetmarks;

            [FieldOffset(4)]
            internal uint EOTWarningZoneSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_TAPE_SET_DRIVE_PARAMETERS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TAPE_SET_DRIVE_PARAMETERS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TAPE_SET_DRIVE_PARAMETERS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TAPE_SET_DRIVE_PARAMETERS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TAPE_SET_DRIVE_PARAMETERS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TAPE_SET_DRIVE_PARAMETERS __CreateInstance(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TAPE_SET_DRIVE_PARAMETERS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal));
            *(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TAPE_SET_DRIVE_PARAMETERS(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TAPE_SET_DRIVE_PARAMETERS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TAPE_SET_DRIVE_PARAMETERS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TAPE_SET_DRIVE_PARAMETERS(global::Sample.TAPE_SET_DRIVE_PARAMETERS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance) = *((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TAPE_SET_DRIVE_PARAMETERS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte ECC
        {
            get
            {
                return ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance)->ECC;
            }

            set
            {
                ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*)__Instance)->ECC = value;
            }
        }

        public sbyte Compression
        {
            get
            {
                return ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance)->Compression;
            }

            set
            {
                ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*)__Instance)->Compression = value;
            }
        }

        public sbyte DataPadding
        {
            get
            {
                return ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance)->DataPadding;
            }

            set
            {
                ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*)__Instance)->DataPadding = value;
            }
        }

        public sbyte ReportSetmarks
        {
            get
            {
                return ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance)->ReportSetmarks;
            }

            set
            {
                ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*)__Instance)->ReportSetmarks = value;
            }
        }

        public uint EOTWarningZoneSize
        {
            get
            {
                return ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*) __Instance)->EOTWarningZoneSize;
            }

            set
            {
                ((global::Sample.TAPE_SET_DRIVE_PARAMETERS.__Internal*)__Instance)->EOTWarningZoneSize = value;
            }
        }
    }

    public unsafe partial class NETRESOURCEW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwScope;

            [FieldOffset(4)]
            internal uint dwType;

            [FieldOffset(8)]
            internal uint dwDisplayType;

            [FieldOffset(12)]
            internal uint dwUsage;

            [FieldOffset(16)]
            internal global::System.IntPtr lpLocalName;

            [FieldOffset(20)]
            internal global::System.IntPtr lpRemoteName;

            [FieldOffset(24)]
            internal global::System.IntPtr lpComment;

            [FieldOffset(28)]
            internal global::System.IntPtr lpProvider;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_NETRESOURCEW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NETRESOURCEW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.NETRESOURCEW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.NETRESOURCEW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.NETRESOURCEW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.NETRESOURCEW __CreateInstance(global::Sample.NETRESOURCEW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.NETRESOURCEW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.NETRESOURCEW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.NETRESOURCEW.__Internal));
            *(global::Sample.NETRESOURCEW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NETRESOURCEW(global::Sample.NETRESOURCEW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NETRESOURCEW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public NETRESOURCEW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.NETRESOURCEW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public NETRESOURCEW(global::Sample.NETRESOURCEW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.NETRESOURCEW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.NETRESOURCEW.__Internal*) __Instance) = *((global::Sample.NETRESOURCEW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.NETRESOURCEW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwScope
        {
            get
            {
                return ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->dwScope;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->dwScope = value;
            }
        }

        public uint DwType
        {
            get
            {
                return ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->dwType;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->dwType = value;
            }
        }

        public uint DwDisplayType
        {
            get
            {
                return ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->dwDisplayType;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->dwDisplayType = value;
            }
        }

        public uint DwUsage
        {
            get
            {
                return ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->dwUsage;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->dwUsage = value;
            }
        }

        public ushort* LpLocalName
        {
            get
            {
                return (ushort*) ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->lpLocalName;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->lpLocalName = (global::System.IntPtr) value;
            }
        }

        public ushort* LpRemoteName
        {
            get
            {
                return (ushort*) ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->lpRemoteName;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->lpRemoteName = (global::System.IntPtr) value;
            }
        }

        public ushort* LpComment
        {
            get
            {
                return (ushort*) ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->lpComment;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->lpComment = (global::System.IntPtr) value;
            }
        }

        public ushort* LpProvider
        {
            get
            {
                return (ushort*) ((global::Sample.NETRESOURCEW.__Internal*) __Instance)->lpProvider;
            }

            set
            {
                ((global::Sample.NETRESOURCEW.__Internal*)__Instance)->lpProvider = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class MidiproptempoTag : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbStruct;

            [FieldOffset(4)]
            internal uint dwTempo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0midiproptempo_tag@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MidiproptempoTag> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MidiproptempoTag>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MidiproptempoTag __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MidiproptempoTag(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MidiproptempoTag __CreateInstance(global::Sample.MidiproptempoTag.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MidiproptempoTag(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MidiproptempoTag.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MidiproptempoTag.__Internal));
            *(global::Sample.MidiproptempoTag.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MidiproptempoTag(global::Sample.MidiproptempoTag.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MidiproptempoTag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MidiproptempoTag()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MidiproptempoTag.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MidiproptempoTag(global::Sample.MidiproptempoTag _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MidiproptempoTag.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MidiproptempoTag.__Internal*) __Instance) = *((global::Sample.MidiproptempoTag.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MidiproptempoTag __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbStruct
        {
            get
            {
                return ((global::Sample.MidiproptempoTag.__Internal*) __Instance)->cbStruct;
            }

            set
            {
                ((global::Sample.MidiproptempoTag.__Internal*)__Instance)->cbStruct = value;
            }
        }

        public uint DwTempo
        {
            get
            {
                return ((global::Sample.MidiproptempoTag.__Internal*) __Instance)->dwTempo;
            }

            set
            {
                ((global::Sample.MidiproptempoTag.__Internal*)__Instance)->dwTempo = value;
            }
        }
    }

    public unsafe partial class CRYPTOAPI_BLOB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbData;

            [FieldOffset(4)]
            internal global::System.IntPtr pbData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPTOAPI_BLOB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPTOAPI_BLOB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPTOAPI_BLOB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPTOAPI_BLOB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPTOAPI_BLOB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPTOAPI_BLOB __CreateInstance(global::Sample.CRYPTOAPI_BLOB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPTOAPI_BLOB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPTOAPI_BLOB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPTOAPI_BLOB.__Internal));
            *(global::Sample.CRYPTOAPI_BLOB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPTOAPI_BLOB(global::Sample.CRYPTOAPI_BLOB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPTOAPI_BLOB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPTOAPI_BLOB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPTOAPI_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPTOAPI_BLOB(global::Sample.CRYPTOAPI_BLOB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPTOAPI_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPTOAPI_BLOB.__Internal*) __Instance) = *((global::Sample.CRYPTOAPI_BLOB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPTOAPI_BLOB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.CRYPTOAPI_BLOB.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.CRYPTOAPI_BLOB.__Internal*)__Instance)->cbData = value;
            }
        }

        public sbyte* PbData
        {
            get
            {
                return (sbyte*) ((global::Sample.CRYPTOAPI_BLOB.__Internal*) __Instance)->pbData;
            }

            set
            {
                ((global::Sample.CRYPTOAPI_BLOB.__Internal*)__Instance)->pbData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagCBTACTIVATESTRUCT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int fMouse;

            [FieldOffset(4)]
            internal global::System.IntPtr hWndActive;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagCBTACTIVATESTRUCT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCBTACTIVATESTRUCT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCBTACTIVATESTRUCT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagCBTACTIVATESTRUCT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagCBTACTIVATESTRUCT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagCBTACTIVATESTRUCT __CreateInstance(global::Sample.TagCBTACTIVATESTRUCT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagCBTACTIVATESTRUCT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagCBTACTIVATESTRUCT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagCBTACTIVATESTRUCT.__Internal));
            *(global::Sample.TagCBTACTIVATESTRUCT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCBTACTIVATESTRUCT(global::Sample.TagCBTACTIVATESTRUCT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagCBTACTIVATESTRUCT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagCBTACTIVATESTRUCT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCBTACTIVATESTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagCBTACTIVATESTRUCT(global::Sample.TagCBTACTIVATESTRUCT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCBTACTIVATESTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance) = *((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagCBTACTIVATESTRUCT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FMouse
        {
            get
            {
                return ((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance)->fMouse;
            }

            set
            {
                ((global::Sample.TagCBTACTIVATESTRUCT.__Internal*)__Instance)->fMouse = value;
            }
        }

        public global::Sample.HWND_ HWndActive
        {
            get
            {
                global::Sample.HWND_ __result0;
                if (((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance)->hWndActive == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HWND_.NativeToManagedMap.ContainsKey(((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance)->hWndActive))
                    __result0 = (global::Sample.HWND_) global::Sample.HWND_.NativeToManagedMap[((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance)->hWndActive];
                else __result0 = global::Sample.HWND_.__CreateInstance(((global::Sample.TagCBTACTIVATESTRUCT.__Internal*) __Instance)->hWndActive);
                return __result0;
            }

            set
            {
                ((global::Sample.TagCBTACTIVATESTRUCT.__Internal*)__Instance)->hWndActive = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class CRYPT_BIT_BLOB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbData;

            [FieldOffset(4)]
            internal global::System.IntPtr pbData;

            [FieldOffset(8)]
            internal uint cUnusedBits;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPT_BIT_BLOB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_BIT_BLOB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_BIT_BLOB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPT_BIT_BLOB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_BIT_BLOB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPT_BIT_BLOB __CreateInstance(global::Sample.CRYPT_BIT_BLOB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_BIT_BLOB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPT_BIT_BLOB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_BIT_BLOB.__Internal));
            *(global::Sample.CRYPT_BIT_BLOB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPT_BIT_BLOB(global::Sample.CRYPT_BIT_BLOB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPT_BIT_BLOB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPT_BIT_BLOB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_BIT_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPT_BIT_BLOB(global::Sample.CRYPT_BIT_BLOB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_BIT_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPT_BIT_BLOB.__Internal*) __Instance) = *((global::Sample.CRYPT_BIT_BLOB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPT_BIT_BLOB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.CRYPT_BIT_BLOB.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.CRYPT_BIT_BLOB.__Internal*)__Instance)->cbData = value;
            }
        }

        public sbyte* PbData
        {
            get
            {
                return (sbyte*) ((global::Sample.CRYPT_BIT_BLOB.__Internal*) __Instance)->pbData;
            }

            set
            {
                ((global::Sample.CRYPT_BIT_BLOB.__Internal*)__Instance)->pbData = (global::System.IntPtr) value;
            }
        }

        public uint CUnusedBits
        {
            get
            {
                return ((global::Sample.CRYPT_BIT_BLOB.__Internal*) __Instance)->cUnusedBits;
            }

            set
            {
                ((global::Sample.CRYPT_BIT_BLOB.__Internal*)__Instance)->cUnusedBits = value;
            }
        }
    }

    public unsafe partial class TagRemHGLOBAL : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int fNullHGlobal;

            [FieldOffset(4)]
            internal uint cbData;

            [FieldOffset(8)]
            internal fixed sbyte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRemHGLOBAL@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHGLOBAL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHGLOBAL>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRemHGLOBAL __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHGLOBAL(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRemHGLOBAL __CreateInstance(global::Sample.TagRemHGLOBAL.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHGLOBAL(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRemHGLOBAL.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHGLOBAL.__Internal));
            *(global::Sample.TagRemHGLOBAL.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRemHGLOBAL(global::Sample.TagRemHGLOBAL.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRemHGLOBAL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRemHGLOBAL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHGLOBAL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRemHGLOBAL(global::Sample.TagRemHGLOBAL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHGLOBAL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRemHGLOBAL.__Internal*) __Instance) = *((global::Sample.TagRemHGLOBAL.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRemHGLOBAL __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int FNullHGlobal
        {
            get
            {
                return ((global::Sample.TagRemHGLOBAL.__Internal*) __Instance)->fNullHGlobal;
            }

            set
            {
                ((global::Sample.TagRemHGLOBAL.__Internal*)__Instance)->fNullHGlobal = value;
            }
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.TagRemHGLOBAL.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.TagRemHGLOBAL.__Internal*)__Instance)->cbData = value;
            }
        }

        public sbyte[] Data
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagRemHGLOBAL.__Internal*) __Instance)->data != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.TagRemHGLOBAL.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.TagRemHGLOBAL.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class DWORD_BLOB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint clSize;

            [FieldOffset(4)]
            internal fixed uint alData[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DWORD_BLOB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DWORD_BLOB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DWORD_BLOB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DWORD_BLOB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DWORD_BLOB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DWORD_BLOB __CreateInstance(global::Sample.DWORD_BLOB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DWORD_BLOB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DWORD_BLOB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DWORD_BLOB.__Internal));
            *(global::Sample.DWORD_BLOB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DWORD_BLOB(global::Sample.DWORD_BLOB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DWORD_BLOB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DWORD_BLOB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DWORD_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DWORD_BLOB(global::Sample.DWORD_BLOB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DWORD_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DWORD_BLOB.__Internal*) __Instance) = *((global::Sample.DWORD_BLOB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DWORD_BLOB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ClSize
        {
            get
            {
                return ((global::Sample.DWORD_BLOB.__Internal*) __Instance)->clSize;
            }

            set
            {
                ((global::Sample.DWORD_BLOB.__Internal*)__Instance)->clSize = value;
            }
        }

        public uint[] AlData
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.DWORD_BLOB.__Internal*) __Instance)->alData != null)
                {
                    __value = new uint[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.DWORD_BLOB.__Internal*) __Instance)->alData[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.DWORD_BLOB.__Internal*)__Instance)->alData[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class AFPROTOCOLS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int iAddressFamily;

            [FieldOffset(4)]
            internal int iProtocol;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_AFPROTOCOLS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AFPROTOCOLS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.AFPROTOCOLS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.AFPROTOCOLS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.AFPROTOCOLS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.AFPROTOCOLS __CreateInstance(global::Sample.AFPROTOCOLS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.AFPROTOCOLS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.AFPROTOCOLS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.AFPROTOCOLS.__Internal));
            *(global::Sample.AFPROTOCOLS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AFPROTOCOLS(global::Sample.AFPROTOCOLS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AFPROTOCOLS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public AFPROTOCOLS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.AFPROTOCOLS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public AFPROTOCOLS(global::Sample.AFPROTOCOLS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.AFPROTOCOLS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.AFPROTOCOLS.__Internal*) __Instance) = *((global::Sample.AFPROTOCOLS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.AFPROTOCOLS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int IAddressFamily
        {
            get
            {
                return ((global::Sample.AFPROTOCOLS.__Internal*) __Instance)->iAddressFamily;
            }

            set
            {
                ((global::Sample.AFPROTOCOLS.__Internal*)__Instance)->iAddressFamily = value;
            }
        }

        public int IProtocol
        {
            get
            {
                return ((global::Sample.AFPROTOCOLS.__Internal*) __Instance)->iProtocol;
            }

            set
            {
                ((global::Sample.AFPROTOCOLS.__Internal*)__Instance)->iProtocol = value;
            }
        }
    }

    public unsafe partial class TagBLOB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal global::System.IntPtr pBlobData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagBLOB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBLOB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBLOB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagBLOB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagBLOB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagBLOB __CreateInstance(global::Sample.TagBLOB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagBLOB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagBLOB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagBLOB.__Internal));
            *(global::Sample.TagBLOB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagBLOB(global::Sample.TagBLOB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagBLOB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagBLOB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagBLOB(global::Sample.TagBLOB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagBLOB.__Internal*) __Instance) = *((global::Sample.TagBLOB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagBLOB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.TagBLOB.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TagBLOB.__Internal*)__Instance)->cbSize = value;
            }
        }

        public sbyte* PBlobData
        {
            get
            {
                return (sbyte*) ((global::Sample.TagBLOB.__Internal*) __Instance)->pBlobData;
            }

            set
            {
                ((global::Sample.TagBLOB.__Internal*)__Instance)->pBlobData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TOKEN_PRIMARY_GROUP : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr PrimaryGroup;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_TOKEN_PRIMARY_GROUP@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TOKEN_PRIMARY_GROUP> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TOKEN_PRIMARY_GROUP>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TOKEN_PRIMARY_GROUP __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TOKEN_PRIMARY_GROUP(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TOKEN_PRIMARY_GROUP __CreateInstance(global::Sample.TOKEN_PRIMARY_GROUP.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TOKEN_PRIMARY_GROUP(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TOKEN_PRIMARY_GROUP.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TOKEN_PRIMARY_GROUP.__Internal));
            *(global::Sample.TOKEN_PRIMARY_GROUP.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TOKEN_PRIMARY_GROUP(global::Sample.TOKEN_PRIMARY_GROUP.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TOKEN_PRIMARY_GROUP(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TOKEN_PRIMARY_GROUP()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TOKEN_PRIMARY_GROUP.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TOKEN_PRIMARY_GROUP(global::Sample.TOKEN_PRIMARY_GROUP _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TOKEN_PRIMARY_GROUP.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TOKEN_PRIMARY_GROUP.__Internal*) __Instance) = *((global::Sample.TOKEN_PRIMARY_GROUP.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TOKEN_PRIMARY_GROUP __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr PrimaryGroup
        {
            get
            {
                return ((global::Sample.TOKEN_PRIMARY_GROUP.__Internal*) __Instance)->PrimaryGroup;
            }

            set
            {
                ((global::Sample.TOKEN_PRIMARY_GROUP.__Internal*)__Instance)->PrimaryGroup = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class QUERY_SERVICE_CONFIGA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwServiceType;

            [FieldOffset(4)]
            internal uint dwStartType;

            [FieldOffset(8)]
            internal uint dwErrorControl;

            [FieldOffset(12)]
            internal global::System.IntPtr lpBinaryPathName;

            [FieldOffset(16)]
            internal global::System.IntPtr lpLoadOrderGroup;

            [FieldOffset(20)]
            internal uint dwTagId;

            [FieldOffset(24)]
            internal global::System.IntPtr lpDependencies;

            [FieldOffset(28)]
            internal global::System.IntPtr lpServiceStartName;

            [FieldOffset(32)]
            internal global::System.IntPtr lpDisplayName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_QUERY_SERVICE_CONFIGA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QUERY_SERVICE_CONFIGA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.QUERY_SERVICE_CONFIGA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.QUERY_SERVICE_CONFIGA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.QUERY_SERVICE_CONFIGA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.QUERY_SERVICE_CONFIGA __CreateInstance(global::Sample.QUERY_SERVICE_CONFIGA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.QUERY_SERVICE_CONFIGA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.QUERY_SERVICE_CONFIGA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.QUERY_SERVICE_CONFIGA.__Internal));
            *(global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUERY_SERVICE_CONFIGA(global::Sample.QUERY_SERVICE_CONFIGA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QUERY_SERVICE_CONFIGA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public QUERY_SERVICE_CONFIGA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.QUERY_SERVICE_CONFIGA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public QUERY_SERVICE_CONFIGA(global::Sample.QUERY_SERVICE_CONFIGA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.QUERY_SERVICE_CONFIGA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance) = *((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.QUERY_SERVICE_CONFIGA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwServiceType
        {
            get
            {
                return ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->dwServiceType;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->dwServiceType = value;
            }
        }

        public uint DwStartType
        {
            get
            {
                return ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->dwStartType;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->dwStartType = value;
            }
        }

        public uint DwErrorControl
        {
            get
            {
                return ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->dwErrorControl;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->dwErrorControl = value;
            }
        }

        public sbyte* LpBinaryPathName
        {
            get
            {
                return (sbyte*) ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->lpBinaryPathName;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->lpBinaryPathName = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpLoadOrderGroup
        {
            get
            {
                return (sbyte*) ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->lpLoadOrderGroup;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->lpLoadOrderGroup = (global::System.IntPtr) value;
            }
        }

        public uint DwTagId
        {
            get
            {
                return ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->dwTagId;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->dwTagId = value;
            }
        }

        public sbyte* LpDependencies
        {
            get
            {
                return (sbyte*) ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->lpDependencies;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->lpDependencies = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpServiceStartName
        {
            get
            {
                return (sbyte*) ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->lpServiceStartName;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->lpServiceStartName = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpDisplayName
        {
            get
            {
                return (sbyte*) ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*) __Instance)->lpDisplayName;
            }

            set
            {
                ((global::Sample.QUERY_SERVICE_CONFIGA.__Internal*)__Instance)->lpDisplayName = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class E2ACC251678A70CC660B42C50BE23747A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr hMem;

            [FieldOffset(4)]
            internal fixed uint dwReserved[3];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E2ACC251678A70CC660B42C50BE23747A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E2ACC251678A70CC660B42C50BE23747A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E2ACC251678A70CC660B42C50BE23747A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E2ACC251678A70CC660B42C50BE23747A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E2ACC251678A70CC660B42C50BE23747A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E2ACC251678A70CC660B42C50BE23747A __CreateInstance(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E2ACC251678A70CC660B42C50BE23747A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal));
            *(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E2ACC251678A70CC660B42C50BE23747A(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E2ACC251678A70CC660B42C50BE23747A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E2ACC251678A70CC660B42C50BE23747A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E2ACC251678A70CC660B42C50BE23747A(global::Sample.E2ACC251678A70CC660B42C50BE23747A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) __Instance) = *((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E2ACC251678A70CC660B42C50BE23747A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr HMem
        {
            get
            {
                return ((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) __Instance)->hMem;
            }

            set
            {
                ((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*)__Instance)->hMem = (global::System.IntPtr) value;
            }
        }

        public uint[] DwReserved
        {
            get
            {
                uint[] __value = null;
                if (((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) __Instance)->dwReserved != null)
                {
                    __value = new uint[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*) __Instance)->dwReserved[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::Sample.E2ACC251678A70CC660B42C50BE23747A.__Internal*)__Instance)->dwReserved[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class E03A236B16FC15461493BD6ADF5082600 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwCommittedSize;

            [FieldOffset(4)]
            internal uint dwUnCommittedSize;

            [FieldOffset(8)]
            internal global::System.IntPtr lpFirstBlock;

            [FieldOffset(12)]
            internal global::System.IntPtr lpLastBlock;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E03A236B16FC15461493BD6ADF5082600@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E03A236B16FC15461493BD6ADF5082600> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E03A236B16FC15461493BD6ADF5082600>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E03A236B16FC15461493BD6ADF5082600 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E03A236B16FC15461493BD6ADF5082600(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E03A236B16FC15461493BD6ADF5082600 __CreateInstance(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E03A236B16FC15461493BD6ADF5082600(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal));
            *(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E03A236B16FC15461493BD6ADF5082600(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E03A236B16FC15461493BD6ADF5082600(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E03A236B16FC15461493BD6ADF5082600()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E03A236B16FC15461493BD6ADF5082600(global::Sample.E03A236B16FC15461493BD6ADF5082600 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) __Instance) = *((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E03A236B16FC15461493BD6ADF5082600 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwCommittedSize
        {
            get
            {
                return ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) __Instance)->dwCommittedSize;
            }

            set
            {
                ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*)__Instance)->dwCommittedSize = value;
            }
        }

        public uint DwUnCommittedSize
        {
            get
            {
                return ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) __Instance)->dwUnCommittedSize;
            }

            set
            {
                ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*)__Instance)->dwUnCommittedSize = value;
            }
        }

        public global::System.IntPtr LpFirstBlock
        {
            get
            {
                return ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) __Instance)->lpFirstBlock;
            }

            set
            {
                ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*)__Instance)->lpFirstBlock = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr LpLastBlock
        {
            get
            {
                return ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*) __Instance)->lpLastBlock;
            }

            set
            {
                ((global::Sample.E03A236B16FC15461493BD6ADF5082600.__Internal*)__Instance)->lpLastBlock = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagPARAMDATA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr szName;

            [FieldOffset(4)]
            internal ushort vt;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagPARAMDATA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPARAMDATA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPARAMDATA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPARAMDATA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPARAMDATA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPARAMDATA __CreateInstance(global::Sample.TagPARAMDATA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPARAMDATA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPARAMDATA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPARAMDATA.__Internal));
            *(global::Sample.TagPARAMDATA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPARAMDATA(global::Sample.TagPARAMDATA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPARAMDATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagPARAMDATA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPARAMDATA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagPARAMDATA(global::Sample.TagPARAMDATA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPARAMDATA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagPARAMDATA.__Internal*) __Instance) = *((global::Sample.TagPARAMDATA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagPARAMDATA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* SzName
        {
            get
            {
                return (ushort*) ((global::Sample.TagPARAMDATA.__Internal*) __Instance)->szName;
            }

            set
            {
                ((global::Sample.TagPARAMDATA.__Internal*)__Instance)->szName = (global::System.IntPtr) value;
            }
        }

        public ushort Vt
        {
            get
            {
                return ((global::Sample.TagPARAMDATA.__Internal*) __Instance)->vt;
            }

            set
            {
                ((global::Sample.TagPARAMDATA.__Internal*)__Instance)->vt = value;
            }
        }
    }

    public unsafe partial class SID_AND_ATTRIBUTES : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr Sid;

            [FieldOffset(4)]
            internal uint Attributes;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SID_AND_ATTRIBUTES@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SID_AND_ATTRIBUTES> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SID_AND_ATTRIBUTES>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SID_AND_ATTRIBUTES __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SID_AND_ATTRIBUTES(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SID_AND_ATTRIBUTES __CreateInstance(global::Sample.SID_AND_ATTRIBUTES.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SID_AND_ATTRIBUTES(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SID_AND_ATTRIBUTES.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SID_AND_ATTRIBUTES.__Internal));
            *(global::Sample.SID_AND_ATTRIBUTES.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SID_AND_ATTRIBUTES(global::Sample.SID_AND_ATTRIBUTES.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SID_AND_ATTRIBUTES(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SID_AND_ATTRIBUTES()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SID_AND_ATTRIBUTES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SID_AND_ATTRIBUTES(global::Sample.SID_AND_ATTRIBUTES _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SID_AND_ATTRIBUTES.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SID_AND_ATTRIBUTES.__Internal*) __Instance) = *((global::Sample.SID_AND_ATTRIBUTES.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SID_AND_ATTRIBUTES __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Sid
        {
            get
            {
                return ((global::Sample.SID_AND_ATTRIBUTES.__Internal*) __Instance)->Sid;
            }

            set
            {
                ((global::Sample.SID_AND_ATTRIBUTES.__Internal*)__Instance)->Sid = (global::System.IntPtr) value;
            }
        }

        public uint Attributes
        {
            get
            {
                return ((global::Sample.SID_AND_ATTRIBUTES.__Internal*) __Instance)->Attributes;
            }

            set
            {
                ((global::Sample.SID_AND_ATTRIBUTES.__Internal*)__Instance)->Attributes = value;
            }
        }
    }

    public unsafe partial class MEMORY_BASIC_INFORMATION64 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong BaseAddress;

            [FieldOffset(8)]
            internal ulong AllocationBase;

            [FieldOffset(16)]
            internal uint AllocationProtect;

            [FieldOffset(20)]
            internal uint __alignment1;

            [FieldOffset(24)]
            internal ulong RegionSize;

            [FieldOffset(32)]
            internal uint State;

            [FieldOffset(36)]
            internal uint Protect;

            [FieldOffset(40)]
            internal uint Type;

            [FieldOffset(44)]
            internal uint __alignment2;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MEMORY_BASIC_INFORMATION64@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORY_BASIC_INFORMATION64> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MEMORY_BASIC_INFORMATION64>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MEMORY_BASIC_INFORMATION64 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MEMORY_BASIC_INFORMATION64(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MEMORY_BASIC_INFORMATION64 __CreateInstance(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MEMORY_BASIC_INFORMATION64(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal));
            *(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MEMORY_BASIC_INFORMATION64(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MEMORY_BASIC_INFORMATION64(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MEMORY_BASIC_INFORMATION64()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MEMORY_BASIC_INFORMATION64(global::Sample.MEMORY_BASIC_INFORMATION64 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MEMORY_BASIC_INFORMATION64.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance) = *((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MEMORY_BASIC_INFORMATION64 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong BaseAddress
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->BaseAddress;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->BaseAddress = value;
            }
        }

        public ulong AllocationBase
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->AllocationBase;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->AllocationBase = value;
            }
        }

        public uint AllocationProtect
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->AllocationProtect;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->AllocationProtect = value;
            }
        }

        public uint Alignment1
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->__alignment1;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->__alignment1 = value;
            }
        }

        public ulong RegionSize
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->RegionSize;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->RegionSize = value;
            }
        }

        public uint State
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->State;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->State = value;
            }
        }

        public uint Protect
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->Protect;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->Protect = value;
            }
        }

        public uint Type
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->Type;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->Type = value;
            }
        }

        public uint Alignment2
        {
            get
            {
                return ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*) __Instance)->__alignment2;
            }

            set
            {
                ((global::Sample.MEMORY_BASIC_INFORMATION64.__Internal*)__Instance)->__alignment2 = value;
            }
        }
    }

    public unsafe partial class TagMCI_SAVE_PARMSA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwCallback;

            [FieldOffset(4)]
            internal global::System.IntPtr lpfilename;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMCI_SAVE_PARMSA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SAVE_PARMSA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SAVE_PARMSA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMCI_SAVE_PARMSA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SAVE_PARMSA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMCI_SAVE_PARMSA __CreateInstance(global::Sample.TagMCI_SAVE_PARMSA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SAVE_PARMSA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMCI_SAVE_PARMSA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SAVE_PARMSA.__Internal));
            *(global::Sample.TagMCI_SAVE_PARMSA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMCI_SAVE_PARMSA(global::Sample.TagMCI_SAVE_PARMSA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMCI_SAVE_PARMSA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMCI_SAVE_PARMSA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SAVE_PARMSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMCI_SAVE_PARMSA(global::Sample.TagMCI_SAVE_PARMSA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SAVE_PARMSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) __Instance) = *((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMCI_SAVE_PARMSA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwCallback
        {
            get
            {
                return ((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) __Instance)->dwCallback;
            }

            set
            {
                ((global::Sample.TagMCI_SAVE_PARMSA.__Internal*)__Instance)->dwCallback = value;
            }
        }

        public string Lpfilename
        {
            get
            {
                if (((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) __Instance)->lpfilename == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) __Instance)->lpfilename;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::Sample.TagMCI_SAVE_PARMSA.__Internal*) __Instance)->lpfilename, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::Sample.TagMCI_SAVE_PARMSA.__Internal*)__Instance)->lpfilename = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class FAT_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint CreateHits;

            [FieldOffset(4)]
            internal uint SuccessfulCreates;

            [FieldOffset(8)]
            internal uint FailedCreates;

            [FieldOffset(12)]
            internal uint NonCachedReads;

            [FieldOffset(16)]
            internal uint NonCachedReadBytes;

            [FieldOffset(20)]
            internal uint NonCachedWrites;

            [FieldOffset(24)]
            internal uint NonCachedWriteBytes;

            [FieldOffset(28)]
            internal uint NonCachedDiskReads;

            [FieldOffset(32)]
            internal uint NonCachedDiskWrites;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FAT_STATISTICS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FAT_STATISTICS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FAT_STATISTICS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FAT_STATISTICS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FAT_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FAT_STATISTICS __CreateInstance(global::Sample.FAT_STATISTICS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FAT_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FAT_STATISTICS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FAT_STATISTICS.__Internal));
            *(global::Sample.FAT_STATISTICS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FAT_STATISTICS(global::Sample.FAT_STATISTICS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FAT_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FAT_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FAT_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FAT_STATISTICS(global::Sample.FAT_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FAT_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FAT_STATISTICS.__Internal*) __Instance) = *((global::Sample.FAT_STATISTICS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FAT_STATISTICS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CreateHits
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->CreateHits;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->CreateHits = value;
            }
        }

        public uint SuccessfulCreates
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->SuccessfulCreates;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->SuccessfulCreates = value;
            }
        }

        public uint FailedCreates
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->FailedCreates;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->FailedCreates = value;
            }
        }

        public uint NonCachedReads
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedReads;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedReads = value;
            }
        }

        public uint NonCachedReadBytes
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedReadBytes;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedReadBytes = value;
            }
        }

        public uint NonCachedWrites
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedWrites;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedWrites = value;
            }
        }

        public uint NonCachedWriteBytes
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedWriteBytes;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedWriteBytes = value;
            }
        }

        public uint NonCachedDiskReads
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedDiskReads;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedDiskReads = value;
            }
        }

        public uint NonCachedDiskWrites
        {
            get
            {
                return ((global::Sample.FAT_STATISTICS.__Internal*) __Instance)->NonCachedDiskWrites;
            }

            set
            {
                ((global::Sample.FAT_STATISTICS.__Internal*)__Instance)->NonCachedDiskWrites = value;
            }
        }
    }

    public unsafe partial class PROCESSOR_POWER_POLICY_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint TimeCheck;

            [FieldOffset(4)]
            internal uint DemoteLimit;

            [FieldOffset(8)]
            internal uint PromoteLimit;

            [FieldOffset(12)]
            internal sbyte DemotePercent;

            [FieldOffset(13)]
            internal sbyte PromotePercent;

            [FieldOffset(14)]
            internal fixed sbyte Spare[2];

            [FieldOffset(16)]
            internal uint AllowDemotion;

            [FieldOffset(16)]
            internal uint AllowPromotion;

            [FieldOffset(16)]
            internal uint Reserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PROCESSOR_POWER_POLICY_INFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PROCESSOR_POWER_POLICY_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PROCESSOR_POWER_POLICY_INFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PROCESSOR_POWER_POLICY_INFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PROCESSOR_POWER_POLICY_INFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PROCESSOR_POWER_POLICY_INFO __CreateInstance(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PROCESSOR_POWER_POLICY_INFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal));
            *(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PROCESSOR_POWER_POLICY_INFO(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PROCESSOR_POWER_POLICY_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PROCESSOR_POWER_POLICY_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PROCESSOR_POWER_POLICY_INFO(global::Sample.PROCESSOR_POWER_POLICY_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance) = *((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PROCESSOR_POWER_POLICY_INFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint TimeCheck
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->TimeCheck;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->TimeCheck = value;
            }
        }

        public uint DemoteLimit
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->DemoteLimit;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->DemoteLimit = value;
            }
        }

        public uint PromoteLimit
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->PromoteLimit;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->PromoteLimit = value;
            }
        }

        public sbyte DemotePercent
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->DemotePercent;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->DemotePercent = value;
            }
        }

        public sbyte PromotePercent
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->PromotePercent;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->PromotePercent = value;
            }
        }

        public sbyte[] Spare
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->Spare != null)
                {
                    __value = new sbyte[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->Spare[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->Spare[i] = value[i];
                }
            }
        }

        public uint AllowDemotion
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->AllowDemotion;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->AllowDemotion = value;
            }
        }

        public uint AllowPromotion
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->AllowPromotion;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->AllowPromotion = value;
            }
        }

        public uint Reserved
        {
            get
            {
                return ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*) __Instance)->Reserved;
            }

            set
            {
                ((global::Sample.PROCESSOR_POWER_POLICY_INFO.__Internal*)__Instance)->Reserved = value;
            }
        }
    }

    public unsafe partial class SB_IntrusiveSmartPointerAllocator : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0SB_IntrusiveSmartPointerAllocator@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SB_IntrusiveSmartPointerAllocator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SB_IntrusiveSmartPointerAllocator>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SB_IntrusiveSmartPointerAllocator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SB_IntrusiveSmartPointerAllocator(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SB_IntrusiveSmartPointerAllocator __CreateInstance(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SB_IntrusiveSmartPointerAllocator(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal));
            *(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SB_IntrusiveSmartPointerAllocator(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SB_IntrusiveSmartPointerAllocator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SB_IntrusiveSmartPointerAllocator()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SB_IntrusiveSmartPointerAllocator(global::Sample.SB_IntrusiveSmartPointerAllocator _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal*) __Instance) = *((global::Sample.SB_IntrusiveSmartPointerAllocator.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SB_IntrusiveSmartPointerAllocator __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class TagRemHMETAFILEPICT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int mm;

            [FieldOffset(4)]
            internal int xExt;

            [FieldOffset(8)]
            internal int yExt;

            [FieldOffset(12)]
            internal uint cbData;

            [FieldOffset(16)]
            internal fixed sbyte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRemHMETAFILEPICT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHMETAFILEPICT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHMETAFILEPICT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRemHMETAFILEPICT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHMETAFILEPICT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRemHMETAFILEPICT __CreateInstance(global::Sample.TagRemHMETAFILEPICT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHMETAFILEPICT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRemHMETAFILEPICT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHMETAFILEPICT.__Internal));
            *(global::Sample.TagRemHMETAFILEPICT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRemHMETAFILEPICT(global::Sample.TagRemHMETAFILEPICT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRemHMETAFILEPICT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRemHMETAFILEPICT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHMETAFILEPICT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRemHMETAFILEPICT(global::Sample.TagRemHMETAFILEPICT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHMETAFILEPICT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance) = *((global::Sample.TagRemHMETAFILEPICT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRemHMETAFILEPICT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Mm
        {
            get
            {
                return ((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->mm;
            }

            set
            {
                ((global::Sample.TagRemHMETAFILEPICT.__Internal*)__Instance)->mm = value;
            }
        }

        public int XExt
        {
            get
            {
                return ((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->xExt;
            }

            set
            {
                ((global::Sample.TagRemHMETAFILEPICT.__Internal*)__Instance)->xExt = value;
            }
        }

        public int YExt
        {
            get
            {
                return ((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->yExt;
            }

            set
            {
                ((global::Sample.TagRemHMETAFILEPICT.__Internal*)__Instance)->yExt = value;
            }
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.TagRemHMETAFILEPICT.__Internal*)__Instance)->cbData = value;
            }
        }

        public sbyte[] Data
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->data != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.TagRemHMETAFILEPICT.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.TagRemHMETAFILEPICT.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TagTOGGLEKEYS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal uint dwFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagTOGGLEKEYS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTOGGLEKEYS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagTOGGLEKEYS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagTOGGLEKEYS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagTOGGLEKEYS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagTOGGLEKEYS __CreateInstance(global::Sample.TagTOGGLEKEYS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagTOGGLEKEYS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagTOGGLEKEYS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagTOGGLEKEYS.__Internal));
            *(global::Sample.TagTOGGLEKEYS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagTOGGLEKEYS(global::Sample.TagTOGGLEKEYS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagTOGGLEKEYS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagTOGGLEKEYS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagTOGGLEKEYS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagTOGGLEKEYS(global::Sample.TagTOGGLEKEYS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagTOGGLEKEYS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagTOGGLEKEYS.__Internal*) __Instance) = *((global::Sample.TagTOGGLEKEYS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagTOGGLEKEYS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.TagTOGGLEKEYS.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TagTOGGLEKEYS.__Internal*)__Instance)->cbSize = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.TagTOGGLEKEYS.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.TagTOGGLEKEYS.__Internal*)__Instance)->dwFlags = value;
            }
        }
    }

    public unsafe partial class HDRVR_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HDRVR__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HDRVR_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HDRVR_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HDRVR_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HDRVR_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HDRVR_ __CreateInstance(global::Sample.HDRVR_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HDRVR_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HDRVR_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HDRVR_.__Internal));
            *(global::Sample.HDRVR_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HDRVR_(global::Sample.HDRVR_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HDRVR_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HDRVR_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HDRVR_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HDRVR_(global::Sample.HDRVR_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HDRVR_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HDRVR_.__Internal*) __Instance) = *((global::Sample.HDRVR_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HDRVR_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HDRVR_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HDRVR_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class E6361545E6B1EA29D9FF9117A8594F5B1 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr XlatTable;

            [FieldOffset(4)]
            internal global::System.IntPtr StateTable;

            [FieldOffset(8)]
            internal uint NumberOfEntries;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E6361545E6B1EA29D9FF9117A8594F5B1@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1 __CreateInstance(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal));
            *(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E6361545E6B1EA29D9FF9117A8594F5B1(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E6361545E6B1EA29D9FF9117A8594F5B1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E6361545E6B1EA29D9FF9117A8594F5B1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E6361545E6B1EA29D9FF9117A8594F5B1(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) __Instance) = *((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void** XlatTable
        {
            get
            {
                return ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) __Instance)->XlatTable;
            }

            set
            {
                ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*)__Instance)->XlatTable = (global::System.IntPtr) value;
            }
        }

        public sbyte* StateTable
        {
            get
            {
                return (sbyte*) ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) __Instance)->StateTable;
            }

            set
            {
                ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*)__Instance)->StateTable = (global::System.IntPtr) value;
            }
        }

        public uint NumberOfEntries
        {
            get
            {
                return ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*) __Instance)->NumberOfEntries;
            }

            set
            {
                ((global::Sample.E6361545E6B1EA29D9FF9117A8594F5B1.__Internal*)__Instance)->NumberOfEntries = value;
            }
        }
    }

    public unsafe partial class TagMCI_SEEK_PARMS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwCallback;

            [FieldOffset(4)]
            internal uint dwTo;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMCI_SEEK_PARMS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SEEK_PARMS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SEEK_PARMS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMCI_SEEK_PARMS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SEEK_PARMS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMCI_SEEK_PARMS __CreateInstance(global::Sample.TagMCI_SEEK_PARMS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SEEK_PARMS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMCI_SEEK_PARMS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SEEK_PARMS.__Internal));
            *(global::Sample.TagMCI_SEEK_PARMS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMCI_SEEK_PARMS(global::Sample.TagMCI_SEEK_PARMS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMCI_SEEK_PARMS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMCI_SEEK_PARMS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SEEK_PARMS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMCI_SEEK_PARMS(global::Sample.TagMCI_SEEK_PARMS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SEEK_PARMS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMCI_SEEK_PARMS.__Internal*) __Instance) = *((global::Sample.TagMCI_SEEK_PARMS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMCI_SEEK_PARMS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwCallback
        {
            get
            {
                return ((global::Sample.TagMCI_SEEK_PARMS.__Internal*) __Instance)->dwCallback;
            }

            set
            {
                ((global::Sample.TagMCI_SEEK_PARMS.__Internal*)__Instance)->dwCallback = value;
            }
        }

        public uint DwTo
        {
            get
            {
                return ((global::Sample.TagMCI_SEEK_PARMS.__Internal*) __Instance)->dwTo;
            }

            set
            {
                ((global::Sample.TagMCI_SEEK_PARMS.__Internal*)__Instance)->dwTo = value;
            }
        }
    }

    public unsafe partial class DOC_INFO_1W : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pDocName;

            [FieldOffset(4)]
            internal global::System.IntPtr pOutputFile;

            [FieldOffset(8)]
            internal global::System.IntPtr pDatatype;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DOC_INFO_1W@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_1W> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_1W>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DOC_INFO_1W __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_1W(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DOC_INFO_1W __CreateInstance(global::Sample.DOC_INFO_1W.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_1W(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DOC_INFO_1W.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_1W.__Internal));
            *(global::Sample.DOC_INFO_1W.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DOC_INFO_1W(global::Sample.DOC_INFO_1W.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DOC_INFO_1W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DOC_INFO_1W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_1W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DOC_INFO_1W(global::Sample.DOC_INFO_1W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_1W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DOC_INFO_1W.__Internal*) __Instance) = *((global::Sample.DOC_INFO_1W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DOC_INFO_1W __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* PDocName
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_1W.__Internal*) __Instance)->pDocName;
            }

            set
            {
                ((global::Sample.DOC_INFO_1W.__Internal*)__Instance)->pDocName = (global::System.IntPtr) value;
            }
        }

        public ushort* POutputFile
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_1W.__Internal*) __Instance)->pOutputFile;
            }

            set
            {
                ((global::Sample.DOC_INFO_1W.__Internal*)__Instance)->pOutputFile = (global::System.IntPtr) value;
            }
        }

        public ushort* PDatatype
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_1W.__Internal*) __Instance)->pDatatype;
            }

            set
            {
                ((global::Sample.DOC_INFO_1W.__Internal*)__Instance)->pDatatype = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagBITMAPFILEHEADER : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort bfType;

            [FieldOffset(4)]
            internal uint bfSize;

            [FieldOffset(8)]
            internal ushort bfReserved1;

            [FieldOffset(10)]
            internal ushort bfReserved2;

            [FieldOffset(12)]
            internal uint bfOffBits;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagBITMAPFILEHEADER@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPFILEHEADER> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBITMAPFILEHEADER>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagBITMAPFILEHEADER __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPFILEHEADER(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagBITMAPFILEHEADER __CreateInstance(global::Sample.TagBITMAPFILEHEADER.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagBITMAPFILEHEADER(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagBITMAPFILEHEADER.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPFILEHEADER.__Internal));
            *(global::Sample.TagBITMAPFILEHEADER.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagBITMAPFILEHEADER(global::Sample.TagBITMAPFILEHEADER.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagBITMAPFILEHEADER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagBITMAPFILEHEADER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPFILEHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagBITMAPFILEHEADER(global::Sample.TagBITMAPFILEHEADER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBITMAPFILEHEADER.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance) = *((global::Sample.TagBITMAPFILEHEADER.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagBITMAPFILEHEADER __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort BfType
        {
            get
            {
                return ((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance)->bfType;
            }

            set
            {
                ((global::Sample.TagBITMAPFILEHEADER.__Internal*)__Instance)->bfType = value;
            }
        }

        public uint BfSize
        {
            get
            {
                return ((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance)->bfSize;
            }

            set
            {
                ((global::Sample.TagBITMAPFILEHEADER.__Internal*)__Instance)->bfSize = value;
            }
        }

        public ushort BfReserved1
        {
            get
            {
                return ((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance)->bfReserved1;
            }

            set
            {
                ((global::Sample.TagBITMAPFILEHEADER.__Internal*)__Instance)->bfReserved1 = value;
            }
        }

        public ushort BfReserved2
        {
            get
            {
                return ((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance)->bfReserved2;
            }

            set
            {
                ((global::Sample.TagBITMAPFILEHEADER.__Internal*)__Instance)->bfReserved2 = value;
            }
        }

        public uint BfOffBits
        {
            get
            {
                return ((global::Sample.TagBITMAPFILEHEADER.__Internal*) __Instance)->bfOffBits;
            }

            set
            {
                ((global::Sample.TagBITMAPFILEHEADER.__Internal*)__Instance)->bfOffBits = value;
            }
        }
    }

    public unsafe partial struct EA5A483E05FC9B52B872A8DCFA58CFF52
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Offset;

            [FieldOffset(0)]
            internal global::System.IntPtr Pointer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EA5A483E05FC9B52B872A8DCFA58CFF52@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private EA5A483E05FC9B52B872A8DCFA58CFF52.__Internal __instance;
        internal EA5A483E05FC9B52B872A8DCFA58CFF52.__Internal __Instance { get { return __instance; } }

        internal static global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52 __CreateInstance(global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52(native, skipVTables);
        }

        private EA5A483E05FC9B52B872A8DCFA58CFF52(global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private EA5A483E05FC9B52B872A8DCFA58CFF52(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52.__Internal*) native;
        }

        public EA5A483E05FC9B52B872A8DCFA58CFF52(global::Sample.EA5A483E05FC9B52B872A8DCFA58CFF52 _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public uint Offset
        {
            get
            {
                return __instance.Offset;
            }

            set
            {
                __instance.Offset = value;
            }
        }

        public global::System.IntPtr Pointer
        {
            get
            {
                return __instance.Pointer;
            }

            set
            {
                __instance.Pointer = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class FLAGGED_BYTE_BLOB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint fFlags;

            [FieldOffset(4)]
            internal uint clSize;

            [FieldOffset(8)]
            internal fixed sbyte abData[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_FLAGGED_BYTE_BLOB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FLAGGED_BYTE_BLOB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.FLAGGED_BYTE_BLOB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.FLAGGED_BYTE_BLOB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.FLAGGED_BYTE_BLOB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.FLAGGED_BYTE_BLOB __CreateInstance(global::Sample.FLAGGED_BYTE_BLOB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.FLAGGED_BYTE_BLOB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.FLAGGED_BYTE_BLOB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.FLAGGED_BYTE_BLOB.__Internal));
            *(global::Sample.FLAGGED_BYTE_BLOB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FLAGGED_BYTE_BLOB(global::Sample.FLAGGED_BYTE_BLOB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FLAGGED_BYTE_BLOB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FLAGGED_BYTE_BLOB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FLAGGED_BYTE_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FLAGGED_BYTE_BLOB(global::Sample.FLAGGED_BYTE_BLOB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.FLAGGED_BYTE_BLOB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) __Instance) = *((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.FLAGGED_BYTE_BLOB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FFlags
        {
            get
            {
                return ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) __Instance)->fFlags;
            }

            set
            {
                ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*)__Instance)->fFlags = value;
            }
        }

        public uint ClSize
        {
            get
            {
                return ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) __Instance)->clSize;
            }

            set
            {
                ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*)__Instance)->clSize = value;
            }
        }

        public sbyte[] AbData
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) __Instance)->abData != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*) __Instance)->abData[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.FLAGGED_BYTE_BLOB.__Internal*)__Instance)->abData[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CRYPT_URL_ARRAY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cUrl;

            [FieldOffset(4)]
            internal global::System.IntPtr rgwszUrl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPT_URL_ARRAY@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_URL_ARRAY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_URL_ARRAY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPT_URL_ARRAY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_URL_ARRAY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPT_URL_ARRAY __CreateInstance(global::Sample.CRYPT_URL_ARRAY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_URL_ARRAY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPT_URL_ARRAY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_URL_ARRAY.__Internal));
            *(global::Sample.CRYPT_URL_ARRAY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPT_URL_ARRAY(global::Sample.CRYPT_URL_ARRAY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPT_URL_ARRAY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPT_URL_ARRAY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_URL_ARRAY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPT_URL_ARRAY(global::Sample.CRYPT_URL_ARRAY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_URL_ARRAY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPT_URL_ARRAY.__Internal*) __Instance) = *((global::Sample.CRYPT_URL_ARRAY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPT_URL_ARRAY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CUrl
        {
            get
            {
                return ((global::Sample.CRYPT_URL_ARRAY.__Internal*) __Instance)->cUrl;
            }

            set
            {
                ((global::Sample.CRYPT_URL_ARRAY.__Internal*)__Instance)->cUrl = value;
            }
        }

        public ushort** RgwszUrl
        {
            get
            {
                return (ushort**) ((global::Sample.CRYPT_URL_ARRAY.__Internal*) __Instance)->rgwszUrl;
            }

            set
            {
                ((global::Sample.CRYPT_URL_ARRAY.__Internal*)__Instance)->rgwszUrl = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagRPC_CALL_ATTRIBUTES_V1A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Version;

            [FieldOffset(4)]
            internal uint Flags;

            [FieldOffset(8)]
            internal uint ServerPrincipalNameBufferLength;

            [FieldOffset(12)]
            internal global::System.IntPtr ServerPrincipalName;

            [FieldOffset(16)]
            internal uint ClientPrincipalNameBufferLength;

            [FieldOffset(20)]
            internal global::System.IntPtr ClientPrincipalName;

            [FieldOffset(24)]
            internal uint AuthenticationLevel;

            [FieldOffset(28)]
            internal uint AuthenticationService;

            [FieldOffset(32)]
            internal int NullSession;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRPC_CALL_ATTRIBUTES_V1_A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRPC_CALL_ATTRIBUTES_V1A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRPC_CALL_ATTRIBUTES_V1A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRPC_CALL_ATTRIBUTES_V1A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRPC_CALL_ATTRIBUTES_V1A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRPC_CALL_ATTRIBUTES_V1A __CreateInstance(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRPC_CALL_ATTRIBUTES_V1A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal));
            *(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRPC_CALL_ATTRIBUTES_V1A(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRPC_CALL_ATTRIBUTES_V1A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRPC_CALL_ATTRIBUTES_V1A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRPC_CALL_ATTRIBUTES_V1A(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance) = *((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRPC_CALL_ATTRIBUTES_V1A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Version
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->Version;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->Version = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->Flags = value;
            }
        }

        public uint ServerPrincipalNameBufferLength
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->ServerPrincipalNameBufferLength;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->ServerPrincipalNameBufferLength = value;
            }
        }

        public sbyte* ServerPrincipalName
        {
            get
            {
                return (sbyte*) ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->ServerPrincipalName;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->ServerPrincipalName = (global::System.IntPtr) value;
            }
        }

        public uint ClientPrincipalNameBufferLength
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->ClientPrincipalNameBufferLength;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->ClientPrincipalNameBufferLength = value;
            }
        }

        public sbyte* ClientPrincipalName
        {
            get
            {
                return (sbyte*) ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->ClientPrincipalName;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->ClientPrincipalName = (global::System.IntPtr) value;
            }
        }

        public uint AuthenticationLevel
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->AuthenticationLevel;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->AuthenticationLevel = value;
            }
        }

        public uint AuthenticationService
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->AuthenticationService;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->AuthenticationService = value;
            }
        }

        public int NullSession
        {
            get
            {
                return ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*) __Instance)->NullSession;
            }

            set
            {
                ((global::Sample.TagRPC_CALL_ATTRIBUTES_V1A.__Internal*)__Instance)->NullSession = value;
            }
        }
    }

    public unsafe partial class TagREGISTERWORDA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr lpReading;

            [FieldOffset(4)]
            internal global::System.IntPtr lpWord;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagREGISTERWORDA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagREGISTERWORDA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagREGISTERWORDA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagREGISTERWORDA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagREGISTERWORDA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagREGISTERWORDA __CreateInstance(global::Sample.TagREGISTERWORDA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagREGISTERWORDA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagREGISTERWORDA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDA.__Internal));
            *(global::Sample.TagREGISTERWORDA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagREGISTERWORDA(global::Sample.TagREGISTERWORDA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagREGISTERWORDA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagREGISTERWORDA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagREGISTERWORDA(global::Sample.TagREGISTERWORDA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagREGISTERWORDA.__Internal*) __Instance) = *((global::Sample.TagREGISTERWORDA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagREGISTERWORDA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* LpReading
        {
            get
            {
                return (sbyte*) ((global::Sample.TagREGISTERWORDA.__Internal*) __Instance)->lpReading;
            }

            set
            {
                ((global::Sample.TagREGISTERWORDA.__Internal*)__Instance)->lpReading = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpWord
        {
            get
            {
                return (sbyte*) ((global::Sample.TagREGISTERWORDA.__Internal*) __Instance)->lpWord;
            }

            set
            {
                ((global::Sample.TagREGISTERWORDA.__Internal*)__Instance)->lpWord = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class JOBOBJECT_END_OF_JOB_TIME_INFORMATION : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint EndOfJobTimeAction;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_JOBOBJECT_END_OF_JOB_TIME_INFORMATION@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION __CreateInstance(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal));
            *(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private JOBOBJECT_END_OF_JOB_TIME_INFORMATION(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JOBOBJECT_END_OF_JOB_TIME_INFORMATION(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public JOBOBJECT_END_OF_JOB_TIME_INFORMATION()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public JOBOBJECT_END_OF_JOB_TIME_INFORMATION(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal*) __Instance) = *((global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint EndOfJobTimeAction
        {
            get
            {
                return ((global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal*) __Instance)->EndOfJobTimeAction;
            }

            set
            {
                ((global::Sample.JOBOBJECT_END_OF_JOB_TIME_INFORMATION.__Internal*)__Instance)->EndOfJobTimeAction = value;
            }
        }
    }

    public unsafe partial class TagDEBUGHOOKINFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint idThread;

            [FieldOffset(4)]
            internal uint idThreadInstaller;

            [FieldOffset(8)]
            internal int lParam;

            [FieldOffset(12)]
            internal uint wParam;

            [FieldOffset(16)]
            internal int code;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagDEBUGHOOKINFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagDEBUGHOOKINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagDEBUGHOOKINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagDEBUGHOOKINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagDEBUGHOOKINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagDEBUGHOOKINFO __CreateInstance(global::Sample.TagDEBUGHOOKINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagDEBUGHOOKINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagDEBUGHOOKINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagDEBUGHOOKINFO.__Internal));
            *(global::Sample.TagDEBUGHOOKINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagDEBUGHOOKINFO(global::Sample.TagDEBUGHOOKINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagDEBUGHOOKINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagDEBUGHOOKINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagDEBUGHOOKINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagDEBUGHOOKINFO(global::Sample.TagDEBUGHOOKINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagDEBUGHOOKINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance) = *((global::Sample.TagDEBUGHOOKINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagDEBUGHOOKINFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint IdThread
        {
            get
            {
                return ((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance)->idThread;
            }

            set
            {
                ((global::Sample.TagDEBUGHOOKINFO.__Internal*)__Instance)->idThread = value;
            }
        }

        public uint IdThreadInstaller
        {
            get
            {
                return ((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance)->idThreadInstaller;
            }

            set
            {
                ((global::Sample.TagDEBUGHOOKINFO.__Internal*)__Instance)->idThreadInstaller = value;
            }
        }

        public int LParam
        {
            get
            {
                return ((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance)->lParam;
            }

            set
            {
                ((global::Sample.TagDEBUGHOOKINFO.__Internal*)__Instance)->lParam = value;
            }
        }

        public uint WParam
        {
            get
            {
                return ((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance)->wParam;
            }

            set
            {
                ((global::Sample.TagDEBUGHOOKINFO.__Internal*)__Instance)->wParam = value;
            }
        }

        public int Code
        {
            get
            {
                return ((global::Sample.TagDEBUGHOOKINFO.__Internal*) __Instance)->code;
            }

            set
            {
                ((global::Sample.TagDEBUGHOOKINFO.__Internal*)__Instance)->code = value;
            }
        }
    }

    public unsafe partial class PORT_INFO_2A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pPortName;

            [FieldOffset(4)]
            internal global::System.IntPtr pMonitorName;

            [FieldOffset(8)]
            internal global::System.IntPtr pDescription;

            [FieldOffset(12)]
            internal uint fPortType;

            [FieldOffset(16)]
            internal uint Reserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PORT_INFO_2A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PORT_INFO_2A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PORT_INFO_2A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PORT_INFO_2A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PORT_INFO_2A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PORT_INFO_2A __CreateInstance(global::Sample.PORT_INFO_2A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PORT_INFO_2A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PORT_INFO_2A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_2A.__Internal));
            *(global::Sample.PORT_INFO_2A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PORT_INFO_2A(global::Sample.PORT_INFO_2A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PORT_INFO_2A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PORT_INFO_2A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_2A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PORT_INFO_2A(global::Sample.PORT_INFO_2A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_2A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PORT_INFO_2A.__Internal*) __Instance) = *((global::Sample.PORT_INFO_2A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PORT_INFO_2A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PPortName
        {
            get
            {
                return (sbyte*) ((global::Sample.PORT_INFO_2A.__Internal*) __Instance)->pPortName;
            }

            set
            {
                ((global::Sample.PORT_INFO_2A.__Internal*)__Instance)->pPortName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PMonitorName
        {
            get
            {
                return (sbyte*) ((global::Sample.PORT_INFO_2A.__Internal*) __Instance)->pMonitorName;
            }

            set
            {
                ((global::Sample.PORT_INFO_2A.__Internal*)__Instance)->pMonitorName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PDescription
        {
            get
            {
                return (sbyte*) ((global::Sample.PORT_INFO_2A.__Internal*) __Instance)->pDescription;
            }

            set
            {
                ((global::Sample.PORT_INFO_2A.__Internal*)__Instance)->pDescription = (global::System.IntPtr) value;
            }
        }

        public uint FPortType
        {
            get
            {
                return ((global::Sample.PORT_INFO_2A.__Internal*) __Instance)->fPortType;
            }

            set
            {
                ((global::Sample.PORT_INFO_2A.__Internal*)__Instance)->fPortType = value;
            }
        }

        public uint Reserved
        {
            get
            {
                return ((global::Sample.PORT_INFO_2A.__Internal*) __Instance)->Reserved;
            }

            set
            {
                ((global::Sample.PORT_INFO_2A.__Internal*)__Instance)->Reserved = value;
            }
        }
    }

    public unsafe partial class IMAGE_BOUND_FORWARDER_REF : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint TimeDateStamp;

            [FieldOffset(4)]
            internal ushort OffsetModuleName;

            [FieldOffset(6)]
            internal ushort Reserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_IMAGE_BOUND_FORWARDER_REF@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMAGE_BOUND_FORWARDER_REF> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMAGE_BOUND_FORWARDER_REF>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMAGE_BOUND_FORWARDER_REF __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMAGE_BOUND_FORWARDER_REF(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMAGE_BOUND_FORWARDER_REF __CreateInstance(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMAGE_BOUND_FORWARDER_REF(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal));
            *(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMAGE_BOUND_FORWARDER_REF(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMAGE_BOUND_FORWARDER_REF(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IMAGE_BOUND_FORWARDER_REF()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IMAGE_BOUND_FORWARDER_REF(global::Sample.IMAGE_BOUND_FORWARDER_REF _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) __Instance) = *((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IMAGE_BOUND_FORWARDER_REF __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint TimeDateStamp
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) __Instance)->TimeDateStamp;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*)__Instance)->TimeDateStamp = value;
            }
        }

        public ushort OffsetModuleName
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) __Instance)->OffsetModuleName;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*)__Instance)->OffsetModuleName = value;
            }
        }

        public ushort Reserved
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*) __Instance)->Reserved;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_FORWARDER_REF.__Internal*)__Instance)->Reserved = value;
            }
        }
    }

    public unsafe partial class MONITOR_INFO_2A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pName;

            [FieldOffset(4)]
            internal global::System.IntPtr pEnvironment;

            [FieldOffset(8)]
            internal global::System.IntPtr pDLLName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MONITOR_INFO_2A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MONITOR_INFO_2A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MONITOR_INFO_2A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MONITOR_INFO_2A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MONITOR_INFO_2A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MONITOR_INFO_2A __CreateInstance(global::Sample.MONITOR_INFO_2A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MONITOR_INFO_2A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MONITOR_INFO_2A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_2A.__Internal));
            *(global::Sample.MONITOR_INFO_2A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MONITOR_INFO_2A(global::Sample.MONITOR_INFO_2A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MONITOR_INFO_2A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MONITOR_INFO_2A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_2A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MONITOR_INFO_2A(global::Sample.MONITOR_INFO_2A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_2A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MONITOR_INFO_2A.__Internal*) __Instance) = *((global::Sample.MONITOR_INFO_2A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MONITOR_INFO_2A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PName
        {
            get
            {
                return (sbyte*) ((global::Sample.MONITOR_INFO_2A.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.MONITOR_INFO_2A.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PEnvironment
        {
            get
            {
                return (sbyte*) ((global::Sample.MONITOR_INFO_2A.__Internal*) __Instance)->pEnvironment;
            }

            set
            {
                ((global::Sample.MONITOR_INFO_2A.__Internal*)__Instance)->pEnvironment = (global::System.IntPtr) value;
            }
        }

        public sbyte* PDLLName
        {
            get
            {
                return (sbyte*) ((global::Sample.MONITOR_INFO_2A.__Internal*) __Instance)->pDLLName;
            }

            set
            {
                ((global::Sample.MONITOR_INFO_2A.__Internal*)__Instance)->pDLLName = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagCOPYDATASTRUCT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwData;

            [FieldOffset(4)]
            internal uint cbData;

            [FieldOffset(8)]
            internal global::System.IntPtr lpData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagCOPYDATASTRUCT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCOPYDATASTRUCT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCOPYDATASTRUCT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagCOPYDATASTRUCT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagCOPYDATASTRUCT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagCOPYDATASTRUCT __CreateInstance(global::Sample.TagCOPYDATASTRUCT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagCOPYDATASTRUCT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagCOPYDATASTRUCT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagCOPYDATASTRUCT.__Internal));
            *(global::Sample.TagCOPYDATASTRUCT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCOPYDATASTRUCT(global::Sample.TagCOPYDATASTRUCT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagCOPYDATASTRUCT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagCOPYDATASTRUCT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCOPYDATASTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagCOPYDATASTRUCT(global::Sample.TagCOPYDATASTRUCT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCOPYDATASTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagCOPYDATASTRUCT.__Internal*) __Instance) = *((global::Sample.TagCOPYDATASTRUCT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagCOPYDATASTRUCT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwData
        {
            get
            {
                return ((global::Sample.TagCOPYDATASTRUCT.__Internal*) __Instance)->dwData;
            }

            set
            {
                ((global::Sample.TagCOPYDATASTRUCT.__Internal*)__Instance)->dwData = value;
            }
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.TagCOPYDATASTRUCT.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.TagCOPYDATASTRUCT.__Internal*)__Instance)->cbData = value;
            }
        }

        public global::System.IntPtr LpData
        {
            get
            {
                return ((global::Sample.TagCOPYDATASTRUCT.__Internal*) __Instance)->lpData;
            }

            set
            {
                ((global::Sample.TagCOPYDATASTRUCT.__Internal*)__Instance)->lpData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagMIXERCONTROLDETAILS_LISTTEXTA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwParam1;

            [FieldOffset(4)]
            internal uint dwParam2;

            [FieldOffset(8)]
            internal fixed sbyte szName[64];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMIXERCONTROLDETAILS_LISTTEXTA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA __CreateInstance(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal));
            *(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMIXERCONTROLDETAILS_LISTTEXTA(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMIXERCONTROLDETAILS_LISTTEXTA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMIXERCONTROLDETAILS_LISTTEXTA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMIXERCONTROLDETAILS_LISTTEXTA(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) __Instance) = *((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwParam1
        {
            get
            {
                return ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) __Instance)->dwParam1;
            }

            set
            {
                ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*)__Instance)->dwParam1 = value;
            }
        }

        public uint DwParam2
        {
            get
            {
                return ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) __Instance)->dwParam2;
            }

            set
            {
                ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*)__Instance)->dwParam2 = value;
            }
        }

        public sbyte[] SzName
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) __Instance)->szName != null)
                {
                    __value = new sbyte[64];
                    for (int i = 0; i < 64; i++)
                        __value[i] = ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*) __Instance)->szName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((global::Sample.TagMIXERCONTROLDETAILS_LISTTEXTA.__Internal*)__Instance)->szName[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class LUID : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint LowPart;

            [FieldOffset(4)]
            internal int HighPart;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_LUID@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LUID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.LUID>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.LUID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.LUID(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.LUID __CreateInstance(global::Sample.LUID.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.LUID(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.LUID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.LUID.__Internal));
            *(global::Sample.LUID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LUID(global::Sample.LUID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LUID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public LUID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.LUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public LUID(global::Sample.LUID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.LUID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.LUID.__Internal*) __Instance) = *((global::Sample.LUID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.LUID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint LowPart
        {
            get
            {
                return ((global::Sample.LUID.__Internal*) __Instance)->LowPart;
            }

            set
            {
                ((global::Sample.LUID.__Internal*)__Instance)->LowPart = value;
            }
        }

        public int HighPart
        {
            get
            {
                return ((global::Sample.LUID.__Internal*) __Instance)->HighPart;
            }

            set
            {
                ((global::Sample.LUID.__Internal*)__Instance)->HighPart = value;
            }
        }
    }

    public unsafe partial class TagREGISTERWORDW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr lpReading;

            [FieldOffset(4)]
            internal global::System.IntPtr lpWord;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagREGISTERWORDW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagREGISTERWORDW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagREGISTERWORDW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagREGISTERWORDW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagREGISTERWORDW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagREGISTERWORDW __CreateInstance(global::Sample.TagREGISTERWORDW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagREGISTERWORDW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagREGISTERWORDW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDW.__Internal));
            *(global::Sample.TagREGISTERWORDW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagREGISTERWORDW(global::Sample.TagREGISTERWORDW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagREGISTERWORDW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagREGISTERWORDW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagREGISTERWORDW(global::Sample.TagREGISTERWORDW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagREGISTERWORDW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagREGISTERWORDW.__Internal*) __Instance) = *((global::Sample.TagREGISTERWORDW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagREGISTERWORDW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* LpReading
        {
            get
            {
                return (ushort*) ((global::Sample.TagREGISTERWORDW.__Internal*) __Instance)->lpReading;
            }

            set
            {
                ((global::Sample.TagREGISTERWORDW.__Internal*)__Instance)->lpReading = (global::System.IntPtr) value;
            }
        }

        public ushort* LpWord
        {
            get
            {
                return (ushort*) ((global::Sample.TagREGISTERWORDW.__Internal*) __Instance)->lpWord;
            }

            set
            {
                ((global::Sample.TagREGISTERWORDW.__Internal*)__Instance)->lpWord = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class PORT_INFO_1A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PORT_INFO_1A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PORT_INFO_1A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PORT_INFO_1A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PORT_INFO_1A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PORT_INFO_1A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PORT_INFO_1A __CreateInstance(global::Sample.PORT_INFO_1A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PORT_INFO_1A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PORT_INFO_1A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_1A.__Internal));
            *(global::Sample.PORT_INFO_1A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PORT_INFO_1A(global::Sample.PORT_INFO_1A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PORT_INFO_1A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PORT_INFO_1A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PORT_INFO_1A(global::Sample.PORT_INFO_1A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PORT_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PORT_INFO_1A.__Internal*) __Instance) = *((global::Sample.PORT_INFO_1A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PORT_INFO_1A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PName
        {
            get
            {
                return (sbyte*) ((global::Sample.PORT_INFO_1A.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.PORT_INFO_1A.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial struct E444B8AF3F414656C8F88F98B3D40B8AE
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint hKeyEncryptionKey;

            [FieldOffset(0)]
            internal global::System.IntPtr pvKeyEncryptionKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E444B8AF3F414656C8F88F98B3D40B8AE@@QAE@ABT0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        private E444B8AF3F414656C8F88F98B3D40B8AE.__Internal __instance;
        internal E444B8AF3F414656C8F88F98B3D40B8AE.__Internal __Instance { get { return __instance; } }

        internal static global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE __CreateInstance(global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE(native, skipVTables);
        }

        private E444B8AF3F414656C8F88F98B3D40B8AE(global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE.__Internal native, bool skipVTables = false)
            : this()
        {
            __instance = native;
        }

        private E444B8AF3F414656C8F88F98B3D40B8AE(void* native, bool skipVTables = false) : this()
        {
            __instance = *(global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE.__Internal*) native;
        }

        public E444B8AF3F414656C8F88F98B3D40B8AE(global::Sample.E444B8AF3F414656C8F88F98B3D40B8AE _0)
            : this()
        {
            var ____arg0 = _0.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            fixed (__Internal* __instancePtr = &__instance)
            {
                __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
            }
        }

        public uint HKeyEncryptionKey
        {
            get
            {
                return __instance.hKeyEncryptionKey;
            }

            set
            {
                __instance.hKeyEncryptionKey = value;
            }
        }

        public global::System.IntPtr PvKeyEncryptionKey
        {
            get
            {
                return __instance.pvKeyEncryptionKey;
            }

            set
            {
                __instance.pvKeyEncryptionKey = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagSCROLLINFO : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal uint fMask;

            [FieldOffset(8)]
            internal int nMin;

            [FieldOffset(12)]
            internal int nMax;

            [FieldOffset(16)]
            internal uint nPage;

            [FieldOffset(20)]
            internal int nPos;

            [FieldOffset(24)]
            internal int nTrackPos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagSCROLLINFO@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSCROLLINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSCROLLINFO>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagSCROLLINFO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagSCROLLINFO(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagSCROLLINFO __CreateInstance(global::Sample.TagSCROLLINFO.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagSCROLLINFO(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagSCROLLINFO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagSCROLLINFO.__Internal));
            *(global::Sample.TagSCROLLINFO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagSCROLLINFO(global::Sample.TagSCROLLINFO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagSCROLLINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagSCROLLINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSCROLLINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagSCROLLINFO(global::Sample.TagSCROLLINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSCROLLINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagSCROLLINFO.__Internal*) __Instance) = *((global::Sample.TagSCROLLINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagSCROLLINFO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->cbSize = value;
            }
        }

        public uint FMask
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->fMask;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->fMask = value;
            }
        }

        public int NMin
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->nMin;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->nMin = value;
            }
        }

        public int NMax
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->nMax;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->nMax = value;
            }
        }

        public uint NPage
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->nPage;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->nPage = value;
            }
        }

        public int NPos
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->nPos;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->nPos = value;
            }
        }

        public int NTrackPos
        {
            get
            {
                return ((global::Sample.TagSCROLLINFO.__Internal*) __Instance)->nTrackPos;
            }

            set
            {
                ((global::Sample.TagSCROLLINFO.__Internal*)__Instance)->nTrackPos = value;
            }
        }
    }

    public unsafe partial class IMAGE_BOUND_IMPORT_DESCRIPTOR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint TimeDateStamp;

            [FieldOffset(4)]
            internal ushort OffsetModuleName;

            [FieldOffset(6)]
            internal ushort NumberOfModuleForwarderRefs;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_IMAGE_BOUND_IMPORT_DESCRIPTOR@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR __CreateInstance(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal));
            *(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IMAGE_BOUND_IMPORT_DESCRIPTOR(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IMAGE_BOUND_IMPORT_DESCRIPTOR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public IMAGE_BOUND_IMPORT_DESCRIPTOR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IMAGE_BOUND_IMPORT_DESCRIPTOR(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) __Instance) = *((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint TimeDateStamp
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) __Instance)->TimeDateStamp;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*)__Instance)->TimeDateStamp = value;
            }
        }

        public ushort OffsetModuleName
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) __Instance)->OffsetModuleName;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*)__Instance)->OffsetModuleName = value;
            }
        }

        public ushort NumberOfModuleForwarderRefs
        {
            get
            {
                return ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*) __Instance)->NumberOfModuleForwarderRefs;
            }

            set
            {
                ((global::Sample.IMAGE_BOUND_IMPORT_DESCRIPTOR.__Internal*)__Instance)->NumberOfModuleForwarderRefs = value;
            }
        }
    }

    public unsafe partial class SID_IDENTIFIER_AUTHORITY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 6)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed sbyte Value[6];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SID_IDENTIFIER_AUTHORITY@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SID_IDENTIFIER_AUTHORITY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SID_IDENTIFIER_AUTHORITY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SID_IDENTIFIER_AUTHORITY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SID_IDENTIFIER_AUTHORITY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SID_IDENTIFIER_AUTHORITY __CreateInstance(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SID_IDENTIFIER_AUTHORITY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal));
            *(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SID_IDENTIFIER_AUTHORITY(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SID_IDENTIFIER_AUTHORITY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SID_IDENTIFIER_AUTHORITY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SID_IDENTIFIER_AUTHORITY(global::Sample.SID_IDENTIFIER_AUTHORITY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*) __Instance) = *((global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SID_IDENTIFIER_AUTHORITY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] Value
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*) __Instance)->Value != null)
                {
                    __value = new sbyte[6];
                    for (int i = 0; i < 6; i++)
                        __value[i] = ((global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*) __Instance)->Value[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 6; i++)
                        ((global::Sample.SID_IDENTIFIER_AUTHORITY.__Internal*)__Instance)->Value[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CRYPT_KEY_PROV_PARAM : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwParam;

            [FieldOffset(4)]
            internal global::System.IntPtr pbData;

            [FieldOffset(8)]
            internal uint cbData;

            [FieldOffset(12)]
            internal uint dwFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPT_KEY_PROV_PARAM@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_KEY_PROV_PARAM> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_KEY_PROV_PARAM>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPT_KEY_PROV_PARAM __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_KEY_PROV_PARAM(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPT_KEY_PROV_PARAM __CreateInstance(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_KEY_PROV_PARAM(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal));
            *(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPT_KEY_PROV_PARAM(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPT_KEY_PROV_PARAM(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPT_KEY_PROV_PARAM()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPT_KEY_PROV_PARAM(global::Sample.CRYPT_KEY_PROV_PARAM _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_KEY_PROV_PARAM.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) __Instance) = *((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPT_KEY_PROV_PARAM __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwParam
        {
            get
            {
                return ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) __Instance)->dwParam;
            }

            set
            {
                ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*)__Instance)->dwParam = value;
            }
        }

        public sbyte* PbData
        {
            get
            {
                return (sbyte*) ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) __Instance)->pbData;
            }

            set
            {
                ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*)__Instance)->pbData = (global::System.IntPtr) value;
            }
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*)__Instance)->cbData = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.CRYPT_KEY_PROV_PARAM.__Internal*)__Instance)->dwFlags = value;
            }
        }
    }

    public unsafe partial class TagPANOSE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 10)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte bFamilyType;

            [FieldOffset(1)]
            internal sbyte bSerifStyle;

            [FieldOffset(2)]
            internal sbyte bWeight;

            [FieldOffset(3)]
            internal sbyte bProportion;

            [FieldOffset(4)]
            internal sbyte bContrast;

            [FieldOffset(5)]
            internal sbyte bStrokeVariation;

            [FieldOffset(6)]
            internal sbyte bArmStyle;

            [FieldOffset(7)]
            internal sbyte bLetterform;

            [FieldOffset(8)]
            internal sbyte bMidline;

            [FieldOffset(9)]
            internal sbyte bXHeight;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagPANOSE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPANOSE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPANOSE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPANOSE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPANOSE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPANOSE __CreateInstance(global::Sample.TagPANOSE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPANOSE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPANOSE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPANOSE.__Internal));
            *(global::Sample.TagPANOSE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPANOSE(global::Sample.TagPANOSE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPANOSE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagPANOSE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPANOSE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagPANOSE(global::Sample.TagPANOSE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPANOSE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagPANOSE.__Internal*) __Instance) = *((global::Sample.TagPANOSE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagPANOSE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte BFamilyType
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bFamilyType;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bFamilyType = value;
            }
        }

        public sbyte BSerifStyle
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bSerifStyle;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bSerifStyle = value;
            }
        }

        public sbyte BWeight
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bWeight;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bWeight = value;
            }
        }

        public sbyte BProportion
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bProportion;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bProportion = value;
            }
        }

        public sbyte BContrast
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bContrast;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bContrast = value;
            }
        }

        public sbyte BStrokeVariation
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bStrokeVariation;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bStrokeVariation = value;
            }
        }

        public sbyte BArmStyle
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bArmStyle;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bArmStyle = value;
            }
        }

        public sbyte BLetterform
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bLetterform;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bLetterform = value;
            }
        }

        public sbyte BMidline
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bMidline;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bMidline = value;
            }
        }

        public sbyte BXHeight
        {
            get
            {
                return ((global::Sample.TagPANOSE.__Internal*) __Instance)->bXHeight;
            }

            set
            {
                ((global::Sample.TagPANOSE.__Internal*)__Instance)->bXHeight = value;
            }
        }
    }

    public unsafe partial class TagPALETTEENTRY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte peRed;

            [FieldOffset(1)]
            internal sbyte peGreen;

            [FieldOffset(2)]
            internal sbyte peBlue;

            [FieldOffset(3)]
            internal sbyte peFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagPALETTEENTRY@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPALETTEENTRY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPALETTEENTRY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPALETTEENTRY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPALETTEENTRY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPALETTEENTRY __CreateInstance(global::Sample.TagPALETTEENTRY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPALETTEENTRY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPALETTEENTRY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPALETTEENTRY.__Internal));
            *(global::Sample.TagPALETTEENTRY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPALETTEENTRY(global::Sample.TagPALETTEENTRY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPALETTEENTRY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagPALETTEENTRY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPALETTEENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagPALETTEENTRY(global::Sample.TagPALETTEENTRY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPALETTEENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagPALETTEENTRY.__Internal*) __Instance) = *((global::Sample.TagPALETTEENTRY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagPALETTEENTRY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte PeRed
        {
            get
            {
                return ((global::Sample.TagPALETTEENTRY.__Internal*) __Instance)->peRed;
            }

            set
            {
                ((global::Sample.TagPALETTEENTRY.__Internal*)__Instance)->peRed = value;
            }
        }

        public sbyte PeGreen
        {
            get
            {
                return ((global::Sample.TagPALETTEENTRY.__Internal*) __Instance)->peGreen;
            }

            set
            {
                ((global::Sample.TagPALETTEENTRY.__Internal*)__Instance)->peGreen = value;
            }
        }

        public sbyte PeBlue
        {
            get
            {
                return ((global::Sample.TagPALETTEENTRY.__Internal*) __Instance)->peBlue;
            }

            set
            {
                ((global::Sample.TagPALETTEENTRY.__Internal*)__Instance)->peBlue = value;
            }
        }

        public sbyte PeFlags
        {
            get
            {
                return ((global::Sample.TagPALETTEENTRY.__Internal*) __Instance)->peFlags;
            }

            set
            {
                ((global::Sample.TagPALETTEENTRY.__Internal*)__Instance)->peFlags = value;
            }
        }
    }

    public unsafe partial class DCB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint DCBlength;

            [FieldOffset(4)]
            internal uint BaudRate;

            [FieldOffset(8)]
            internal uint fBinary;

            [FieldOffset(8)]
            internal uint fParity;

            [FieldOffset(8)]
            internal uint fOutxCtsFlow;

            [FieldOffset(8)]
            internal uint fOutxDsrFlow;

            [FieldOffset(8)]
            internal uint fDtrControl;

            [FieldOffset(8)]
            internal uint fDsrSensitivity;

            [FieldOffset(8)]
            internal uint fTXContinueOnXoff;

            [FieldOffset(9)]
            internal uint fOutX;

            [FieldOffset(9)]
            internal uint fInX;

            [FieldOffset(9)]
            internal uint fErrorChar;

            [FieldOffset(9)]
            internal uint fNull;

            [FieldOffset(9)]
            internal uint fRtsControl;

            [FieldOffset(9)]
            internal uint fAbortOnError;

            [FieldOffset(9)]
            internal uint fDummy2;

            [FieldOffset(12)]
            internal ushort wReserved;

            [FieldOffset(14)]
            internal ushort XonLim;

            [FieldOffset(16)]
            internal ushort XoffLim;

            [FieldOffset(18)]
            internal sbyte ByteSize;

            [FieldOffset(19)]
            internal sbyte Parity;

            [FieldOffset(20)]
            internal sbyte StopBits;

            [FieldOffset(21)]
            internal sbyte XonChar;

            [FieldOffset(22)]
            internal sbyte XoffChar;

            [FieldOffset(23)]
            internal sbyte ErrorChar;

            [FieldOffset(24)]
            internal sbyte EofChar;

            [FieldOffset(25)]
            internal sbyte EvtChar;

            [FieldOffset(26)]
            internal ushort wReserved1;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DCB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DCB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DCB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DCB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DCB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DCB __CreateInstance(global::Sample.DCB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DCB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DCB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DCB.__Internal));
            *(global::Sample.DCB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCB(global::Sample.DCB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DCB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DCB(global::Sample.DCB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DCB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DCB.__Internal*) __Instance) = *((global::Sample.DCB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DCB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DCBlength
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->DCBlength;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->DCBlength = value;
            }
        }

        public uint BaudRate
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->BaudRate;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->BaudRate = value;
            }
        }

        public uint FBinary
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fBinary;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fBinary = value;
            }
        }

        public uint FParity
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fParity;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fParity = value;
            }
        }

        public uint FOutxCtsFlow
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fOutxCtsFlow;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fOutxCtsFlow = value;
            }
        }

        public uint FOutxDsrFlow
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fOutxDsrFlow;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fOutxDsrFlow = value;
            }
        }

        public uint FDtrControl
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fDtrControl;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fDtrControl = value;
            }
        }

        public uint FDsrSensitivity
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fDsrSensitivity;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fDsrSensitivity = value;
            }
        }

        public uint FTXContinueOnXoff
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fTXContinueOnXoff;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fTXContinueOnXoff = value;
            }
        }

        public uint FOutX
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fOutX;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fOutX = value;
            }
        }

        public uint FInX
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fInX;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fInX = value;
            }
        }

        public uint FErrorChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fErrorChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fErrorChar = value;
            }
        }

        public uint FNull
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fNull;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fNull = value;
            }
        }

        public uint FRtsControl
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fRtsControl;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fRtsControl = value;
            }
        }

        public uint FAbortOnError
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fAbortOnError;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fAbortOnError = value;
            }
        }

        public uint FDummy2
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->fDummy2;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->fDummy2 = value;
            }
        }

        public ushort WReserved
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->wReserved;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->wReserved = value;
            }
        }

        public ushort XonLim
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->XonLim;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->XonLim = value;
            }
        }

        public ushort XoffLim
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->XoffLim;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->XoffLim = value;
            }
        }

        public sbyte ByteSize
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->ByteSize;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->ByteSize = value;
            }
        }

        public sbyte Parity
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->Parity;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->Parity = value;
            }
        }

        public sbyte StopBits
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->StopBits;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->StopBits = value;
            }
        }

        public sbyte XonChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->XonChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->XonChar = value;
            }
        }

        public sbyte XoffChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->XoffChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->XoffChar = value;
            }
        }

        public sbyte ErrorChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->ErrorChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->ErrorChar = value;
            }
        }

        public sbyte EofChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->EofChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->EofChar = value;
            }
        }

        public sbyte EvtChar
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->EvtChar;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->EvtChar = value;
            }
        }

        public ushort WReserved1
        {
            get
            {
                return ((global::Sample.DCB.__Internal*) __Instance)->wReserved1;
            }

            set
            {
                ((global::Sample.DCB.__Internal*)__Instance)->wReserved1 = value;
            }
        }
    }

    public unsafe partial class OSVERSIONINFOEXW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 284)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwOSVersionInfoSize;

            [FieldOffset(4)]
            internal uint dwMajorVersion;

            [FieldOffset(8)]
            internal uint dwMinorVersion;

            [FieldOffset(12)]
            internal uint dwBuildNumber;

            [FieldOffset(16)]
            internal uint dwPlatformId;

            [FieldOffset(20)]
            internal fixed ushort szCSDVersion[128];

            [FieldOffset(276)]
            internal ushort wServicePackMajor;

            [FieldOffset(278)]
            internal ushort wServicePackMinor;

            [FieldOffset(280)]
            internal ushort wSuiteMask;

            [FieldOffset(282)]
            internal sbyte wProductType;

            [FieldOffset(283)]
            internal sbyte wReserved;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_OSVERSIONINFOEXW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSVERSIONINFOEXW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.OSVERSIONINFOEXW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.OSVERSIONINFOEXW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.OSVERSIONINFOEXW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.OSVERSIONINFOEXW __CreateInstance(global::Sample.OSVERSIONINFOEXW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.OSVERSIONINFOEXW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.OSVERSIONINFOEXW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOEXW.__Internal));
            *(global::Sample.OSVERSIONINFOEXW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OSVERSIONINFOEXW(global::Sample.OSVERSIONINFOEXW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OSVERSIONINFOEXW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public OSVERSIONINFOEXW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOEXW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public OSVERSIONINFOEXW(global::Sample.OSVERSIONINFOEXW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.OSVERSIONINFOEXW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance) = *((global::Sample.OSVERSIONINFOEXW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.OSVERSIONINFOEXW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwOSVersionInfoSize
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->dwOSVersionInfoSize;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->dwOSVersionInfoSize = value;
            }
        }

        public uint DwMajorVersion
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->dwMajorVersion;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->dwMajorVersion = value;
            }
        }

        public uint DwMinorVersion
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->dwMinorVersion;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->dwMinorVersion = value;
            }
        }

        public uint DwBuildNumber
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->dwBuildNumber;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->dwBuildNumber = value;
            }
        }

        public uint DwPlatformId
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->dwPlatformId;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->dwPlatformId = value;
            }
        }

        public ushort[] SzCSDVersion
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->szCSDVersion != null)
                {
                    __value = new ushort[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->szCSDVersion[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->szCSDVersion[i] = value[i];
                }
            }
        }

        public ushort WServicePackMajor
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->wServicePackMajor;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->wServicePackMajor = value;
            }
        }

        public ushort WServicePackMinor
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->wServicePackMinor;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->wServicePackMinor = value;
            }
        }

        public ushort WSuiteMask
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->wSuiteMask;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->wSuiteMask = value;
            }
        }

        public sbyte WProductType
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->wProductType;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->wProductType = value;
            }
        }

        public sbyte WReserved
        {
            get
            {
                return ((global::Sample.OSVERSIONINFOEXW.__Internal*) __Instance)->wReserved;
            }

            set
            {
                ((global::Sample.OSVERSIONINFOEXW.__Internal*)__Instance)->wReserved = value;
            }
        }
    }

    public unsafe partial class PRINTER_NOTIFY_OPTIONS_TYPE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort Type;

            [FieldOffset(2)]
            internal ushort Reserved0;

            [FieldOffset(4)]
            internal uint Reserved1;

            [FieldOffset(8)]
            internal uint Reserved2;

            [FieldOffset(12)]
            internal uint Count;

            [FieldOffset(16)]
            internal global::System.IntPtr pFields;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PRINTER_NOTIFY_OPTIONS_TYPE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE __CreateInstance(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal));
            *(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PRINTER_NOTIFY_OPTIONS_TYPE(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PRINTER_NOTIFY_OPTIONS_TYPE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PRINTER_NOTIFY_OPTIONS_TYPE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PRINTER_NOTIFY_OPTIONS_TYPE(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance) = *((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort Type
        {
            get
            {
                return ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->Type;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->Type = value;
            }
        }

        public ushort Reserved0
        {
            get
            {
                return ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->Reserved0;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->Reserved0 = value;
            }
        }

        public uint Reserved1
        {
            get
            {
                return ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->Reserved1;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->Reserved1 = value;
            }
        }

        public uint Reserved2
        {
            get
            {
                return ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->Reserved2;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->Reserved2 = value;
            }
        }

        public uint Count
        {
            get
            {
                return ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->Count;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->Count = value;
            }
        }

        public ushort* PFields
        {
            get
            {
                return (ushort*) ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*) __Instance)->pFields;
            }

            set
            {
                ((global::Sample.PRINTER_NOTIFY_OPTIONS_TYPE.__Internal*)__Instance)->pFields = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagMIDIOUTCAPSA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wMid;

            [FieldOffset(2)]
            internal ushort wPid;

            [FieldOffset(4)]
            internal uint vDriverVersion;

            [FieldOffset(8)]
            internal fixed sbyte szPname[32];

            [FieldOffset(40)]
            internal ushort wTechnology;

            [FieldOffset(42)]
            internal ushort wVoices;

            [FieldOffset(44)]
            internal ushort wNotes;

            [FieldOffset(46)]
            internal ushort wChannelMask;

            [FieldOffset(48)]
            internal uint dwSupport;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMIDIOUTCAPSA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMIDIOUTCAPSA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMIDIOUTCAPSA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMIDIOUTCAPSA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMIDIOUTCAPSA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMIDIOUTCAPSA __CreateInstance(global::Sample.TagMIDIOUTCAPSA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMIDIOUTCAPSA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMIDIOUTCAPSA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIDIOUTCAPSA.__Internal));
            *(global::Sample.TagMIDIOUTCAPSA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMIDIOUTCAPSA(global::Sample.TagMIDIOUTCAPSA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMIDIOUTCAPSA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMIDIOUTCAPSA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIDIOUTCAPSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMIDIOUTCAPSA(global::Sample.TagMIDIOUTCAPSA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMIDIOUTCAPSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance) = *((global::Sample.TagMIDIOUTCAPSA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMIDIOUTCAPSA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WMid
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wMid;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wMid = value;
            }
        }

        public ushort WPid
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wPid;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wPid = value;
            }
        }

        public uint VDriverVersion
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->vDriverVersion;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->vDriverVersion = value;
            }
        }

        public sbyte[] SzPname
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->szPname != null)
                {
                    __value = new sbyte[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->szPname[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->szPname[i] = value[i];
                }
            }
        }

        public ushort WTechnology
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wTechnology;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wTechnology = value;
            }
        }

        public ushort WVoices
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wVoices;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wVoices = value;
            }
        }

        public ushort WNotes
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wNotes;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wNotes = value;
            }
        }

        public ushort WChannelMask
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->wChannelMask;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->wChannelMask = value;
            }
        }

        public uint DwSupport
        {
            get
            {
                return ((global::Sample.TagMIDIOUTCAPSA.__Internal*) __Instance)->dwSupport;
            }

            set
            {
                ((global::Sample.TagMIDIOUTCAPSA.__Internal*)__Instance)->dwSupport = value;
            }
        }
    }

    public unsafe partial class STARTUPINFOW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cb;

            [FieldOffset(4)]
            internal global::System.IntPtr lpReserved;

            [FieldOffset(8)]
            internal global::System.IntPtr lpDesktop;

            [FieldOffset(12)]
            internal global::System.IntPtr lpTitle;

            [FieldOffset(16)]
            internal uint dwX;

            [FieldOffset(20)]
            internal uint dwY;

            [FieldOffset(24)]
            internal uint dwXSize;

            [FieldOffset(28)]
            internal uint dwYSize;

            [FieldOffset(32)]
            internal uint dwXCountChars;

            [FieldOffset(36)]
            internal uint dwYCountChars;

            [FieldOffset(40)]
            internal uint dwFillAttribute;

            [FieldOffset(44)]
            internal uint dwFlags;

            [FieldOffset(48)]
            internal ushort wShowWindow;

            [FieldOffset(50)]
            internal ushort cbReserved2;

            [FieldOffset(52)]
            internal global::System.IntPtr lpReserved2;

            [FieldOffset(56)]
            internal global::System.IntPtr hStdInput;

            [FieldOffset(60)]
            internal global::System.IntPtr hStdOutput;

            [FieldOffset(64)]
            internal global::System.IntPtr hStdError;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_STARTUPINFOW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STARTUPINFOW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.STARTUPINFOW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.STARTUPINFOW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.STARTUPINFOW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.STARTUPINFOW __CreateInstance(global::Sample.STARTUPINFOW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.STARTUPINFOW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.STARTUPINFOW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOW.__Internal));
            *(global::Sample.STARTUPINFOW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private STARTUPINFOW(global::Sample.STARTUPINFOW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected STARTUPINFOW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public STARTUPINFOW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public STARTUPINFOW(global::Sample.STARTUPINFOW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.STARTUPINFOW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.STARTUPINFOW.__Internal*) __Instance) = *((global::Sample.STARTUPINFOW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.STARTUPINFOW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->cb;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->cb = value;
            }
        }

        public ushort* LpReserved
        {
            get
            {
                return (ushort*) ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->lpReserved;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->lpReserved = (global::System.IntPtr) value;
            }
        }

        public ushort* LpDesktop
        {
            get
            {
                return (ushort*) ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->lpDesktop;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->lpDesktop = (global::System.IntPtr) value;
            }
        }

        public ushort* LpTitle
        {
            get
            {
                return (ushort*) ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->lpTitle;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->lpTitle = (global::System.IntPtr) value;
            }
        }

        public uint DwX
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwX;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwX = value;
            }
        }

        public uint DwY
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwY;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwY = value;
            }
        }

        public uint DwXSize
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwXSize;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwXSize = value;
            }
        }

        public uint DwYSize
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwYSize;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwYSize = value;
            }
        }

        public uint DwXCountChars
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwXCountChars;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwXCountChars = value;
            }
        }

        public uint DwYCountChars
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwYCountChars;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwYCountChars = value;
            }
        }

        public uint DwFillAttribute
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwFillAttribute;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwFillAttribute = value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->dwFlags = value;
            }
        }

        public ushort WShowWindow
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->wShowWindow;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->wShowWindow = value;
            }
        }

        public ushort CbReserved2
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->cbReserved2;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->cbReserved2 = value;
            }
        }

        public sbyte* LpReserved2
        {
            get
            {
                return (sbyte*) ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->lpReserved2;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->lpReserved2 = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdInput
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->hStdInput;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->hStdInput = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdOutput
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->hStdOutput;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->hStdOutput = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr HStdError
        {
            get
            {
                return ((global::Sample.STARTUPINFOW.__Internal*) __Instance)->hStdError;
            }

            set
            {
                ((global::Sample.STARTUPINFOW.__Internal*)__Instance)->hStdError = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagJOYCAPSA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 404)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wMid;

            [FieldOffset(2)]
            internal ushort wPid;

            [FieldOffset(4)]
            internal fixed sbyte szPname[32];

            [FieldOffset(36)]
            internal uint wXmin;

            [FieldOffset(40)]
            internal uint wXmax;

            [FieldOffset(44)]
            internal uint wYmin;

            [FieldOffset(48)]
            internal uint wYmax;

            [FieldOffset(52)]
            internal uint wZmin;

            [FieldOffset(56)]
            internal uint wZmax;

            [FieldOffset(60)]
            internal uint wNumButtons;

            [FieldOffset(64)]
            internal uint wPeriodMin;

            [FieldOffset(68)]
            internal uint wPeriodMax;

            [FieldOffset(72)]
            internal uint wRmin;

            [FieldOffset(76)]
            internal uint wRmax;

            [FieldOffset(80)]
            internal uint wUmin;

            [FieldOffset(84)]
            internal uint wUmax;

            [FieldOffset(88)]
            internal uint wVmin;

            [FieldOffset(92)]
            internal uint wVmax;

            [FieldOffset(96)]
            internal uint wCaps;

            [FieldOffset(100)]
            internal uint wMaxAxes;

            [FieldOffset(104)]
            internal uint wNumAxes;

            [FieldOffset(108)]
            internal uint wMaxButtons;

            [FieldOffset(112)]
            internal fixed sbyte szRegKey[32];

            [FieldOffset(144)]
            internal fixed sbyte szOEMVxD[260];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagJOYCAPSA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagJOYCAPSA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagJOYCAPSA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagJOYCAPSA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagJOYCAPSA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagJOYCAPSA __CreateInstance(global::Sample.TagJOYCAPSA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagJOYCAPSA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagJOYCAPSA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSA.__Internal));
            *(global::Sample.TagJOYCAPSA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagJOYCAPSA(global::Sample.TagJOYCAPSA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagJOYCAPSA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagJOYCAPSA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagJOYCAPSA(global::Sample.TagJOYCAPSA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagJOYCAPSA.__Internal*) __Instance) = *((global::Sample.TagJOYCAPSA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagJOYCAPSA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WMid
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wMid;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wMid = value;
            }
        }

        public ushort WPid
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wPid;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wPid = value;
            }
        }

        public sbyte[] SzPname
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szPname != null)
                {
                    __value = new sbyte[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szPname[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->szPname[i] = value[i];
                }
            }
        }

        public uint WXmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wXmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wXmin = value;
            }
        }

        public uint WXmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wXmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wXmax = value;
            }
        }

        public uint WYmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wYmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wYmin = value;
            }
        }

        public uint WYmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wYmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wYmax = value;
            }
        }

        public uint WZmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wZmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wZmin = value;
            }
        }

        public uint WZmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wZmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wZmax = value;
            }
        }

        public uint WNumButtons
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wNumButtons;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wNumButtons = value;
            }
        }

        public uint WPeriodMin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wPeriodMin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wPeriodMin = value;
            }
        }

        public uint WPeriodMax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wPeriodMax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wPeriodMax = value;
            }
        }

        public uint WRmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wRmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wRmin = value;
            }
        }

        public uint WRmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wRmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wRmax = value;
            }
        }

        public uint WUmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wUmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wUmin = value;
            }
        }

        public uint WUmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wUmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wUmax = value;
            }
        }

        public uint WVmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wVmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wVmin = value;
            }
        }

        public uint WVmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wVmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wVmax = value;
            }
        }

        public uint WCaps
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wCaps;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wCaps = value;
            }
        }

        public uint WMaxAxes
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wMaxAxes;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wMaxAxes = value;
            }
        }

        public uint WNumAxes
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wNumAxes;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wNumAxes = value;
            }
        }

        public uint WMaxButtons
        {
            get
            {
                return ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->wMaxButtons;
            }

            set
            {
                ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->wMaxButtons = value;
            }
        }

        public sbyte[] SzRegKey
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szRegKey != null)
                {
                    __value = new sbyte[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szRegKey[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->szRegKey[i] = value[i];
                }
            }
        }

        public sbyte[] SzOEMVxD
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szOEMVxD != null)
                {
                    __value = new sbyte[260];
                    for (int i = 0; i < 260; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSA.__Internal*) __Instance)->szOEMVxD[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 260; i++)
                        ((global::Sample.TagJOYCAPSA.__Internal*)__Instance)->szOEMVxD[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class DLGTEMPLATE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint style;

            [FieldOffset(4)]
            internal uint dwExtendedStyle;

            [FieldOffset(8)]
            internal ushort cdit;

            [FieldOffset(10)]
            internal short x;

            [FieldOffset(12)]
            internal short y;

            [FieldOffset(14)]
            internal short cx;

            [FieldOffset(16)]
            internal short cy;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0DLGTEMPLATE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DLGTEMPLATE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DLGTEMPLATE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DLGTEMPLATE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DLGTEMPLATE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DLGTEMPLATE __CreateInstance(global::Sample.DLGTEMPLATE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DLGTEMPLATE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DLGTEMPLATE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DLGTEMPLATE.__Internal));
            *(global::Sample.DLGTEMPLATE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DLGTEMPLATE(global::Sample.DLGTEMPLATE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DLGTEMPLATE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DLGTEMPLATE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DLGTEMPLATE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DLGTEMPLATE(global::Sample.DLGTEMPLATE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DLGTEMPLATE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DLGTEMPLATE.__Internal*) __Instance) = *((global::Sample.DLGTEMPLATE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DLGTEMPLATE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Style
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->style;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->style = value;
            }
        }

        public uint DwExtendedStyle
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->dwExtendedStyle;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->dwExtendedStyle = value;
            }
        }

        public ushort Cdit
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->cdit;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->cdit = value;
            }
        }

        public short X
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->x = value;
            }
        }

        public short Y
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->y = value;
            }
        }

        public short Cx
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->cx;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->cx = value;
            }
        }

        public short Cy
        {
            get
            {
                return ((global::Sample.DLGTEMPLATE.__Internal*) __Instance)->cy;
            }

            set
            {
                ((global::Sample.DLGTEMPLATE.__Internal*)__Instance)->cy = value;
            }
        }
    }

    public unsafe partial class ACTIVATION_CONTEXT_QUERY_INDEX : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint ulAssemblyIndex;

            [FieldOffset(4)]
            internal uint ulFileIndexInAssembly;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_ACTIVATION_CONTEXT_QUERY_INDEX@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX __CreateInstance(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal));
            *(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ACTIVATION_CONTEXT_QUERY_INDEX(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ACTIVATION_CONTEXT_QUERY_INDEX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ACTIVATION_CONTEXT_QUERY_INDEX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ACTIVATION_CONTEXT_QUERY_INDEX(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*) __Instance) = *((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint UlAssemblyIndex
        {
            get
            {
                return ((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*) __Instance)->ulAssemblyIndex;
            }

            set
            {
                ((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*)__Instance)->ulAssemblyIndex = value;
            }
        }

        public uint UlFileIndexInAssembly
        {
            get
            {
                return ((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*) __Instance)->ulFileIndexInAssembly;
            }

            set
            {
                ((global::Sample.ACTIVATION_CONTEXT_QUERY_INDEX.__Internal*)__Instance)->ulFileIndexInAssembly = value;
            }
        }
    }

    public unsafe partial class EFEAB62C056B7B19C610CD18E991278A7 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbBuf;

            [FieldOffset(4)]
            internal global::System.IntPtr pBuf;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EFEAB62C056B7B19C610CD18E991278A7@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EFEAB62C056B7B19C610CD18E991278A7> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EFEAB62C056B7B19C610CD18E991278A7>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EFEAB62C056B7B19C610CD18E991278A7 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EFEAB62C056B7B19C610CD18E991278A7(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EFEAB62C056B7B19C610CD18E991278A7 __CreateInstance(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EFEAB62C056B7B19C610CD18E991278A7(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal));
            *(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EFEAB62C056B7B19C610CD18E991278A7(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EFEAB62C056B7B19C610CD18E991278A7(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EFEAB62C056B7B19C610CD18E991278A7()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EFEAB62C056B7B19C610CD18E991278A7(global::Sample.EFEAB62C056B7B19C610CD18E991278A7 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*) __Instance) = *((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EFEAB62C056B7B19C610CD18E991278A7 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbBuf
        {
            get
            {
                return ((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*) __Instance)->cbBuf;
            }

            set
            {
                ((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*)__Instance)->cbBuf = value;
            }
        }

        public global::System.IntPtr PBuf
        {
            get
            {
                return ((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*) __Instance)->pBuf;
            }

            set
            {
                ((global::Sample.EFEAB62C056B7B19C610CD18E991278A7.__Internal*)__Instance)->pBuf = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class CTL_USAGE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cUsageIdentifier;

            [FieldOffset(4)]
            internal global::System.IntPtr rgpszUsageIdentifier;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CTL_USAGE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTL_USAGE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CTL_USAGE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CTL_USAGE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CTL_USAGE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CTL_USAGE __CreateInstance(global::Sample.CTL_USAGE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CTL_USAGE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CTL_USAGE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CTL_USAGE.__Internal));
            *(global::Sample.CTL_USAGE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CTL_USAGE(global::Sample.CTL_USAGE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CTL_USAGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CTL_USAGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CTL_USAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CTL_USAGE(global::Sample.CTL_USAGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CTL_USAGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CTL_USAGE.__Internal*) __Instance) = *((global::Sample.CTL_USAGE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CTL_USAGE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CUsageIdentifier
        {
            get
            {
                return ((global::Sample.CTL_USAGE.__Internal*) __Instance)->cUsageIdentifier;
            }

            set
            {
                ((global::Sample.CTL_USAGE.__Internal*)__Instance)->cUsageIdentifier = value;
            }
        }

        public sbyte** RgpszUsageIdentifier
        {
            get
            {
                return (sbyte**) ((global::Sample.CTL_USAGE.__Internal*) __Instance)->rgpszUsageIdentifier;
            }

            set
            {
                ((global::Sample.CTL_USAGE.__Internal*)__Instance)->rgpszUsageIdentifier = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class CERT_TRUST_STATUS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwErrorStatus;

            [FieldOffset(4)]
            internal uint dwInfoStatus;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CERT_TRUST_STATUS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CERT_TRUST_STATUS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CERT_TRUST_STATUS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CERT_TRUST_STATUS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CERT_TRUST_STATUS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CERT_TRUST_STATUS __CreateInstance(global::Sample.CERT_TRUST_STATUS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CERT_TRUST_STATUS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CERT_TRUST_STATUS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CERT_TRUST_STATUS.__Internal));
            *(global::Sample.CERT_TRUST_STATUS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CERT_TRUST_STATUS(global::Sample.CERT_TRUST_STATUS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CERT_TRUST_STATUS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CERT_TRUST_STATUS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CERT_TRUST_STATUS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CERT_TRUST_STATUS(global::Sample.CERT_TRUST_STATUS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CERT_TRUST_STATUS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CERT_TRUST_STATUS.__Internal*) __Instance) = *((global::Sample.CERT_TRUST_STATUS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CERT_TRUST_STATUS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwErrorStatus
        {
            get
            {
                return ((global::Sample.CERT_TRUST_STATUS.__Internal*) __Instance)->dwErrorStatus;
            }

            set
            {
                ((global::Sample.CERT_TRUST_STATUS.__Internal*)__Instance)->dwErrorStatus = value;
            }
        }

        public uint DwInfoStatus
        {
            get
            {
                return ((global::Sample.CERT_TRUST_STATUS.__Internal*) __Instance)->dwInfoStatus;
            }

            set
            {
                ((global::Sample.CERT_TRUST_STATUS.__Internal*)__Instance)->dwInfoStatus = value;
            }
        }
    }

    public unsafe partial class ValContext : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int valuelen;

            [FieldOffset(4)]
            internal global::System.IntPtr value_context;

            [FieldOffset(8)]
            internal global::System.IntPtr val_buff_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0val_context@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ValContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.ValContext>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.ValContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.ValContext(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.ValContext __CreateInstance(global::Sample.ValContext.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.ValContext(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.ValContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.ValContext.__Internal));
            *(global::Sample.ValContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ValContext(global::Sample.ValContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ValContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ValContext()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ValContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ValContext(global::Sample.ValContext _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.ValContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.ValContext.__Internal*) __Instance) = *((global::Sample.ValContext.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.ValContext __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Valuelen
        {
            get
            {
                return ((global::Sample.ValContext.__Internal*) __Instance)->valuelen;
            }

            set
            {
                ((global::Sample.ValContext.__Internal*)__Instance)->valuelen = value;
            }
        }

        public global::System.IntPtr ValueContext
        {
            get
            {
                return ((global::Sample.ValContext.__Internal*) __Instance)->value_context;
            }

            set
            {
                ((global::Sample.ValContext.__Internal*)__Instance)->value_context = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr ValBuffPtr
        {
            get
            {
                return ((global::Sample.ValContext.__Internal*) __Instance)->val_buff_ptr;
            }

            set
            {
                ((global::Sample.ValContext.__Internal*)__Instance)->val_buff_ptr = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class CurrencyfmtA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint NumDigits;

            [FieldOffset(4)]
            internal uint LeadingZero;

            [FieldOffset(8)]
            internal uint Grouping;

            [FieldOffset(12)]
            internal global::System.IntPtr lpDecimalSep;

            [FieldOffset(16)]
            internal global::System.IntPtr lpThousandSep;

            [FieldOffset(20)]
            internal uint NegativeOrder;

            [FieldOffset(24)]
            internal uint PositiveOrder;

            [FieldOffset(28)]
            internal global::System.IntPtr lpCurrencySymbol;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_currencyfmtA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CurrencyfmtA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CurrencyfmtA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CurrencyfmtA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CurrencyfmtA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CurrencyfmtA __CreateInstance(global::Sample.CurrencyfmtA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CurrencyfmtA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CurrencyfmtA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CurrencyfmtA.__Internal));
            *(global::Sample.CurrencyfmtA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CurrencyfmtA(global::Sample.CurrencyfmtA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CurrencyfmtA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CurrencyfmtA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CurrencyfmtA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CurrencyfmtA(global::Sample.CurrencyfmtA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CurrencyfmtA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CurrencyfmtA.__Internal*) __Instance) = *((global::Sample.CurrencyfmtA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CurrencyfmtA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NumDigits
        {
            get
            {
                return ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->NumDigits;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->NumDigits = value;
            }
        }

        public uint LeadingZero
        {
            get
            {
                return ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->LeadingZero;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->LeadingZero = value;
            }
        }

        public uint Grouping
        {
            get
            {
                return ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->Grouping;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->Grouping = value;
            }
        }

        public sbyte* LpDecimalSep
        {
            get
            {
                return (sbyte*) ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->lpDecimalSep;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->lpDecimalSep = (global::System.IntPtr) value;
            }
        }

        public sbyte* LpThousandSep
        {
            get
            {
                return (sbyte*) ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->lpThousandSep;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->lpThousandSep = (global::System.IntPtr) value;
            }
        }

        public uint NegativeOrder
        {
            get
            {
                return ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->NegativeOrder;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->NegativeOrder = value;
            }
        }

        public uint PositiveOrder
        {
            get
            {
                return ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->PositiveOrder;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->PositiveOrder = value;
            }
        }

        public sbyte* LpCurrencySymbol
        {
            get
            {
                return (sbyte*) ((global::Sample.CurrencyfmtA.__Internal*) __Instance)->lpCurrencySymbol;
            }

            set
            {
                ((global::Sample.CurrencyfmtA.__Internal*)__Instance)->lpCurrencySymbol = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagLOGFONTW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 92)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int lfHeight;

            [FieldOffset(4)]
            internal int lfWidth;

            [FieldOffset(8)]
            internal int lfEscapement;

            [FieldOffset(12)]
            internal int lfOrientation;

            [FieldOffset(16)]
            internal int lfWeight;

            [FieldOffset(20)]
            internal sbyte lfItalic;

            [FieldOffset(21)]
            internal sbyte lfUnderline;

            [FieldOffset(22)]
            internal sbyte lfStrikeOut;

            [FieldOffset(23)]
            internal sbyte lfCharSet;

            [FieldOffset(24)]
            internal sbyte lfOutPrecision;

            [FieldOffset(25)]
            internal sbyte lfClipPrecision;

            [FieldOffset(26)]
            internal sbyte lfQuality;

            [FieldOffset(27)]
            internal sbyte lfPitchAndFamily;

            [FieldOffset(28)]
            internal fixed ushort lfFaceName[32];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagLOGFONTW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagLOGFONTW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagLOGFONTW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagLOGFONTW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagLOGFONTW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagLOGFONTW __CreateInstance(global::Sample.TagLOGFONTW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagLOGFONTW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagLOGFONTW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagLOGFONTW.__Internal));
            *(global::Sample.TagLOGFONTW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagLOGFONTW(global::Sample.TagLOGFONTW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagLOGFONTW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagLOGFONTW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagLOGFONTW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagLOGFONTW(global::Sample.TagLOGFONTW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagLOGFONTW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagLOGFONTW.__Internal*) __Instance) = *((global::Sample.TagLOGFONTW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagLOGFONTW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int LfHeight
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfHeight;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfHeight = value;
            }
        }

        public int LfWidth
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfWidth;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfWidth = value;
            }
        }

        public int LfEscapement
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfEscapement;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfEscapement = value;
            }
        }

        public int LfOrientation
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfOrientation;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfOrientation = value;
            }
        }

        public int LfWeight
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfWeight;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfWeight = value;
            }
        }

        public sbyte LfItalic
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfItalic;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfItalic = value;
            }
        }

        public sbyte LfUnderline
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfUnderline;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfUnderline = value;
            }
        }

        public sbyte LfStrikeOut
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfStrikeOut;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfStrikeOut = value;
            }
        }

        public sbyte LfCharSet
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfCharSet;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfCharSet = value;
            }
        }

        public sbyte LfOutPrecision
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfOutPrecision;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfOutPrecision = value;
            }
        }

        public sbyte LfClipPrecision
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfClipPrecision;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfClipPrecision = value;
            }
        }

        public sbyte LfQuality
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfQuality;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfQuality = value;
            }
        }

        public sbyte LfPitchAndFamily
        {
            get
            {
                return ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfPitchAndFamily;
            }

            set
            {
                ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfPitchAndFamily = value;
            }
        }

        public ushort[] LfFaceName
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfFaceName != null)
                {
                    __value = new ushort[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagLOGFONTW.__Internal*) __Instance)->lfFaceName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagLOGFONTW.__Internal*)__Instance)->lfFaceName[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class PRINTER_INFO_5A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pPrinterName;

            [FieldOffset(4)]
            internal global::System.IntPtr pPortName;

            [FieldOffset(8)]
            internal uint Attributes;

            [FieldOffset(12)]
            internal uint DeviceNotSelectedTimeout;

            [FieldOffset(16)]
            internal uint TransmissionRetryTimeout;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PRINTER_INFO_5A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_INFO_5A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_INFO_5A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PRINTER_INFO_5A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_INFO_5A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PRINTER_INFO_5A __CreateInstance(global::Sample.PRINTER_INFO_5A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_INFO_5A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PRINTER_INFO_5A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_5A.__Internal));
            *(global::Sample.PRINTER_INFO_5A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PRINTER_INFO_5A(global::Sample.PRINTER_INFO_5A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PRINTER_INFO_5A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PRINTER_INFO_5A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_5A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PRINTER_INFO_5A(global::Sample.PRINTER_INFO_5A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_5A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance) = *((global::Sample.PRINTER_INFO_5A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PRINTER_INFO_5A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PPrinterName
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance)->pPrinterName;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_5A.__Internal*)__Instance)->pPrinterName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PPortName
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance)->pPortName;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_5A.__Internal*)__Instance)->pPortName = (global::System.IntPtr) value;
            }
        }

        public uint Attributes
        {
            get
            {
                return ((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance)->Attributes;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_5A.__Internal*)__Instance)->Attributes = value;
            }
        }

        public uint DeviceNotSelectedTimeout
        {
            get
            {
                return ((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance)->DeviceNotSelectedTimeout;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_5A.__Internal*)__Instance)->DeviceNotSelectedTimeout = value;
            }
        }

        public uint TransmissionRetryTimeout
        {
            get
            {
                return ((global::Sample.PRINTER_INFO_5A.__Internal*) __Instance)->TransmissionRetryTimeout;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_5A.__Internal*)__Instance)->TransmissionRetryTimeout = value;
            }
        }
    }

    public unsafe partial class TagPRINTPAGERANGE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint nFromPage;

            [FieldOffset(4)]
            internal uint nToPage;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagPRINTPAGERANGE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPRINTPAGERANGE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagPRINTPAGERANGE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagPRINTPAGERANGE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagPRINTPAGERANGE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagPRINTPAGERANGE __CreateInstance(global::Sample.TagPRINTPAGERANGE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagPRINTPAGERANGE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagPRINTPAGERANGE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagPRINTPAGERANGE.__Internal));
            *(global::Sample.TagPRINTPAGERANGE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagPRINTPAGERANGE(global::Sample.TagPRINTPAGERANGE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagPRINTPAGERANGE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagPRINTPAGERANGE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPRINTPAGERANGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagPRINTPAGERANGE(global::Sample.TagPRINTPAGERANGE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagPRINTPAGERANGE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagPRINTPAGERANGE.__Internal*) __Instance) = *((global::Sample.TagPRINTPAGERANGE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagPRINTPAGERANGE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint NFromPage
        {
            get
            {
                return ((global::Sample.TagPRINTPAGERANGE.__Internal*) __Instance)->nFromPage;
            }

            set
            {
                ((global::Sample.TagPRINTPAGERANGE.__Internal*)__Instance)->nFromPage = value;
            }
        }

        public uint NToPage
        {
            get
            {
                return ((global::Sample.TagPRINTPAGERANGE.__Internal*) __Instance)->nToPage;
            }

            set
            {
                ((global::Sample.TagPRINTPAGERANGE.__Internal*)__Instance)->nToPage = value;
            }
        }
    }

    public unsafe partial class DOC_INFO_2W : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pDocName;

            [FieldOffset(4)]
            internal global::System.IntPtr pOutputFile;

            [FieldOffset(8)]
            internal global::System.IntPtr pDatatype;

            [FieldOffset(12)]
            internal uint dwMode;

            [FieldOffset(16)]
            internal uint JobId;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DOC_INFO_2W@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_2W> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_2W>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DOC_INFO_2W __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_2W(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DOC_INFO_2W __CreateInstance(global::Sample.DOC_INFO_2W.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_2W(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DOC_INFO_2W.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_2W.__Internal));
            *(global::Sample.DOC_INFO_2W.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DOC_INFO_2W(global::Sample.DOC_INFO_2W.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DOC_INFO_2W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DOC_INFO_2W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_2W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DOC_INFO_2W(global::Sample.DOC_INFO_2W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_2W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DOC_INFO_2W.__Internal*) __Instance) = *((global::Sample.DOC_INFO_2W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DOC_INFO_2W __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* PDocName
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_2W.__Internal*) __Instance)->pDocName;
            }

            set
            {
                ((global::Sample.DOC_INFO_2W.__Internal*)__Instance)->pDocName = (global::System.IntPtr) value;
            }
        }

        public ushort* POutputFile
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_2W.__Internal*) __Instance)->pOutputFile;
            }

            set
            {
                ((global::Sample.DOC_INFO_2W.__Internal*)__Instance)->pOutputFile = (global::System.IntPtr) value;
            }
        }

        public ushort* PDatatype
        {
            get
            {
                return (ushort*) ((global::Sample.DOC_INFO_2W.__Internal*) __Instance)->pDatatype;
            }

            set
            {
                ((global::Sample.DOC_INFO_2W.__Internal*)__Instance)->pDatatype = (global::System.IntPtr) value;
            }
        }

        public uint DwMode
        {
            get
            {
                return ((global::Sample.DOC_INFO_2W.__Internal*) __Instance)->dwMode;
            }

            set
            {
                ((global::Sample.DOC_INFO_2W.__Internal*)__Instance)->dwMode = value;
            }
        }

        public uint JobId
        {
            get
            {
                return ((global::Sample.DOC_INFO_2W.__Internal*) __Instance)->JobId;
            }

            set
            {
                ((global::Sample.DOC_INFO_2W.__Internal*)__Instance)->JobId = value;
            }
        }
    }

    public unsafe partial class HDC_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HDC__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HDC_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HDC_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HDC_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HDC_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HDC_ __CreateInstance(global::Sample.HDC_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HDC_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HDC_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HDC_.__Internal));
            *(global::Sample.HDC_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HDC_(global::Sample.HDC_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HDC_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HDC_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HDC_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HDC_(global::Sample.HDC_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HDC_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HDC_.__Internal*) __Instance) = *((global::Sample.HDC_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HDC_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HDC_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HDC_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class TagNMHDR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr hwndFrom;

            [FieldOffset(4)]
            internal uint idFrom;

            [FieldOffset(8)]
            internal uint code;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagNMHDR@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagNMHDR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagNMHDR>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagNMHDR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagNMHDR(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagNMHDR __CreateInstance(global::Sample.TagNMHDR.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagNMHDR(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagNMHDR.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagNMHDR.__Internal));
            *(global::Sample.TagNMHDR.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagNMHDR(global::Sample.TagNMHDR.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagNMHDR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagNMHDR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagNMHDR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagNMHDR(global::Sample.TagNMHDR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagNMHDR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagNMHDR.__Internal*) __Instance) = *((global::Sample.TagNMHDR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagNMHDR __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::Sample.HWND_ HwndFrom
        {
            get
            {
                global::Sample.HWND_ __result0;
                if (((global::Sample.TagNMHDR.__Internal*) __Instance)->hwndFrom == IntPtr.Zero) __result0 = null;
                else if (global::Sample.HWND_.NativeToManagedMap.ContainsKey(((global::Sample.TagNMHDR.__Internal*) __Instance)->hwndFrom))
                    __result0 = (global::Sample.HWND_) global::Sample.HWND_.NativeToManagedMap[((global::Sample.TagNMHDR.__Internal*) __Instance)->hwndFrom];
                else __result0 = global::Sample.HWND_.__CreateInstance(((global::Sample.TagNMHDR.__Internal*) __Instance)->hwndFrom);
                return __result0;
            }

            set
            {
                ((global::Sample.TagNMHDR.__Internal*)__Instance)->hwndFrom = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint IdFrom
        {
            get
            {
                return ((global::Sample.TagNMHDR.__Internal*) __Instance)->idFrom;
            }

            set
            {
                ((global::Sample.TagNMHDR.__Internal*)__Instance)->idFrom = value;
            }
        }

        public uint Code
        {
            get
            {
                return ((global::Sample.TagNMHDR.__Internal*) __Instance)->code;
            }

            set
            {
                ((global::Sample.TagNMHDR.__Internal*)__Instance)->code = value;
            }
        }
    }

    public unsafe partial class SERVICE_TABLE_ENTRYW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr lpServiceName;

            [FieldOffset(4)]
            internal global::System.IntPtr lpServiceProc;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_SERVICE_TABLE_ENTRYW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SERVICE_TABLE_ENTRYW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.SERVICE_TABLE_ENTRYW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.SERVICE_TABLE_ENTRYW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.SERVICE_TABLE_ENTRYW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.SERVICE_TABLE_ENTRYW __CreateInstance(global::Sample.SERVICE_TABLE_ENTRYW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.SERVICE_TABLE_ENTRYW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.SERVICE_TABLE_ENTRYW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.SERVICE_TABLE_ENTRYW.__Internal));
            *(global::Sample.SERVICE_TABLE_ENTRYW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SERVICE_TABLE_ENTRYW(global::Sample.SERVICE_TABLE_ENTRYW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SERVICE_TABLE_ENTRYW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SERVICE_TABLE_ENTRYW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SERVICE_TABLE_ENTRYW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SERVICE_TABLE_ENTRYW(global::Sample.SERVICE_TABLE_ENTRYW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.SERVICE_TABLE_ENTRYW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*) __Instance) = *((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.SERVICE_TABLE_ENTRYW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* LpServiceName
        {
            get
            {
                return (ushort*) ((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*) __Instance)->lpServiceName;
            }

            set
            {
                ((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*)__Instance)->lpServiceName = (global::System.IntPtr) value;
            }
        }

        public global::Sample.Delegates.Action_uint_ushortPtrPtr LpServiceProc
        {
            get
            {
                var __ptr0 = ((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*) __Instance)->lpServiceProc;
                return __ptr0 == IntPtr.Zero? null : (global::Sample.Delegates.Action_uint_ushortPtrPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::Sample.Delegates.Action_uint_ushortPtrPtr));
            }

            set
            {
                ((global::Sample.SERVICE_TABLE_ENTRYW.__Internal*)__Instance)->lpServiceProc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class DRIVER_INFO_5A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cVersion;

            [FieldOffset(4)]
            internal global::System.IntPtr pName;

            [FieldOffset(8)]
            internal global::System.IntPtr pEnvironment;

            [FieldOffset(12)]
            internal global::System.IntPtr pDriverPath;

            [FieldOffset(16)]
            internal global::System.IntPtr pDataFile;

            [FieldOffset(20)]
            internal global::System.IntPtr pConfigFile;

            [FieldOffset(24)]
            internal uint dwDriverAttributes;

            [FieldOffset(28)]
            internal uint dwConfigVersion;

            [FieldOffset(32)]
            internal uint dwDriverVersion;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DRIVER_INFO_5A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DRIVER_INFO_5A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DRIVER_INFO_5A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DRIVER_INFO_5A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DRIVER_INFO_5A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DRIVER_INFO_5A __CreateInstance(global::Sample.DRIVER_INFO_5A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DRIVER_INFO_5A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DRIVER_INFO_5A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DRIVER_INFO_5A.__Internal));
            *(global::Sample.DRIVER_INFO_5A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DRIVER_INFO_5A(global::Sample.DRIVER_INFO_5A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DRIVER_INFO_5A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DRIVER_INFO_5A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DRIVER_INFO_5A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DRIVER_INFO_5A(global::Sample.DRIVER_INFO_5A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DRIVER_INFO_5A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance) = *((global::Sample.DRIVER_INFO_5A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DRIVER_INFO_5A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CVersion
        {
            get
            {
                return ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->cVersion;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->cVersion = value;
            }
        }

        public sbyte* PName
        {
            get
            {
                return (sbyte*) ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PEnvironment
        {
            get
            {
                return (sbyte*) ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->pEnvironment;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->pEnvironment = (global::System.IntPtr) value;
            }
        }

        public sbyte* PDriverPath
        {
            get
            {
                return (sbyte*) ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->pDriverPath;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->pDriverPath = (global::System.IntPtr) value;
            }
        }

        public sbyte* PDataFile
        {
            get
            {
                return (sbyte*) ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->pDataFile;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->pDataFile = (global::System.IntPtr) value;
            }
        }

        public sbyte* PConfigFile
        {
            get
            {
                return (sbyte*) ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->pConfigFile;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->pConfigFile = (global::System.IntPtr) value;
            }
        }

        public uint DwDriverAttributes
        {
            get
            {
                return ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->dwDriverAttributes;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->dwDriverAttributes = value;
            }
        }

        public uint DwConfigVersion
        {
            get
            {
                return ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->dwConfigVersion;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->dwConfigVersion = value;
            }
        }

        public uint DwDriverVersion
        {
            get
            {
                return ((global::Sample.DRIVER_INFO_5A.__Internal*) __Instance)->dwDriverVersion;
            }

            set
            {
                ((global::Sample.DRIVER_INFO_5A.__Internal*)__Instance)->dwDriverVersion = value;
            }
        }
    }

    public unsafe partial class TagDVTARGETDEVICE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint tdSize;

            [FieldOffset(4)]
            internal ushort tdDriverNameOffset;

            [FieldOffset(6)]
            internal ushort tdDeviceNameOffset;

            [FieldOffset(8)]
            internal ushort tdPortNameOffset;

            [FieldOffset(10)]
            internal ushort tdExtDevmodeOffset;

            [FieldOffset(12)]
            internal fixed sbyte tdData[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagDVTARGETDEVICE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagDVTARGETDEVICE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagDVTARGETDEVICE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagDVTARGETDEVICE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagDVTARGETDEVICE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagDVTARGETDEVICE __CreateInstance(global::Sample.TagDVTARGETDEVICE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagDVTARGETDEVICE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagDVTARGETDEVICE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagDVTARGETDEVICE.__Internal));
            *(global::Sample.TagDVTARGETDEVICE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagDVTARGETDEVICE(global::Sample.TagDVTARGETDEVICE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagDVTARGETDEVICE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagDVTARGETDEVICE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagDVTARGETDEVICE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagDVTARGETDEVICE(global::Sample.TagDVTARGETDEVICE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagDVTARGETDEVICE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance) = *((global::Sample.TagDVTARGETDEVICE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagDVTARGETDEVICE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint TdSize
        {
            get
            {
                return ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdSize;
            }

            set
            {
                ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdSize = value;
            }
        }

        public ushort TdDriverNameOffset
        {
            get
            {
                return ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdDriverNameOffset;
            }

            set
            {
                ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdDriverNameOffset = value;
            }
        }

        public ushort TdDeviceNameOffset
        {
            get
            {
                return ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdDeviceNameOffset;
            }

            set
            {
                ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdDeviceNameOffset = value;
            }
        }

        public ushort TdPortNameOffset
        {
            get
            {
                return ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdPortNameOffset;
            }

            set
            {
                ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdPortNameOffset = value;
            }
        }

        public ushort TdExtDevmodeOffset
        {
            get
            {
                return ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdExtDevmodeOffset;
            }

            set
            {
                ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdExtDevmodeOffset = value;
            }
        }

        public sbyte[] TdData
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdData != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.TagDVTARGETDEVICE.__Internal*) __Instance)->tdData[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.TagDVTARGETDEVICE.__Internal*)__Instance)->tdData[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class HENHMETAFILE_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HENHMETAFILE__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HENHMETAFILE_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HENHMETAFILE_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HENHMETAFILE_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HENHMETAFILE_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HENHMETAFILE_ __CreateInstance(global::Sample.HENHMETAFILE_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HENHMETAFILE_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HENHMETAFILE_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HENHMETAFILE_.__Internal));
            *(global::Sample.HENHMETAFILE_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HENHMETAFILE_(global::Sample.HENHMETAFILE_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HENHMETAFILE_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HENHMETAFILE_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HENHMETAFILE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HENHMETAFILE_(global::Sample.HENHMETAFILE_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HENHMETAFILE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HENHMETAFILE_.__Internal*) __Instance) = *((global::Sample.HENHMETAFILE_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HENHMETAFILE_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HENHMETAFILE_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HENHMETAFILE_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class EB950AFB169DC87688B328897744C612F : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint LowPart;

            [FieldOffset(4)]
            internal uint HighPart;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EB950AFB169DC87688B328897744C612F@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EB950AFB169DC87688B328897744C612F> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EB950AFB169DC87688B328897744C612F>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EB950AFB169DC87688B328897744C612F __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EB950AFB169DC87688B328897744C612F(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EB950AFB169DC87688B328897744C612F __CreateInstance(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EB950AFB169DC87688B328897744C612F(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal));
            *(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EB950AFB169DC87688B328897744C612F(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EB950AFB169DC87688B328897744C612F(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EB950AFB169DC87688B328897744C612F()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EB950AFB169DC87688B328897744C612F(global::Sample.EB950AFB169DC87688B328897744C612F _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EB950AFB169DC87688B328897744C612F.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*) __Instance) = *((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EB950AFB169DC87688B328897744C612F __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint LowPart
        {
            get
            {
                return ((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*) __Instance)->LowPart;
            }

            set
            {
                ((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*)__Instance)->LowPart = value;
            }
        }

        public uint HighPart
        {
            get
            {
                return ((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*) __Instance)->HighPart;
            }

            set
            {
                ((global::Sample.EB950AFB169DC87688B328897744C612F.__Internal*)__Instance)->HighPart = value;
            }
        }
    }

    public unsafe partial class TagBIND_OPTS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbStruct;

            [FieldOffset(4)]
            internal uint grfFlags;

            [FieldOffset(8)]
            internal uint grfMode;

            [FieldOffset(12)]
            internal uint dwTickCountDeadline;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagBIND_OPTS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBIND_OPTS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagBIND_OPTS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagBIND_OPTS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagBIND_OPTS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagBIND_OPTS __CreateInstance(global::Sample.TagBIND_OPTS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagBIND_OPTS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagBIND_OPTS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagBIND_OPTS.__Internal));
            *(global::Sample.TagBIND_OPTS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagBIND_OPTS(global::Sample.TagBIND_OPTS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagBIND_OPTS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagBIND_OPTS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBIND_OPTS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagBIND_OPTS(global::Sample.TagBIND_OPTS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagBIND_OPTS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagBIND_OPTS.__Internal*) __Instance) = *((global::Sample.TagBIND_OPTS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagBIND_OPTS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbStruct
        {
            get
            {
                return ((global::Sample.TagBIND_OPTS.__Internal*) __Instance)->cbStruct;
            }

            set
            {
                ((global::Sample.TagBIND_OPTS.__Internal*)__Instance)->cbStruct = value;
            }
        }

        public uint GrfFlags
        {
            get
            {
                return ((global::Sample.TagBIND_OPTS.__Internal*) __Instance)->grfFlags;
            }

            set
            {
                ((global::Sample.TagBIND_OPTS.__Internal*)__Instance)->grfFlags = value;
            }
        }

        public uint GrfMode
        {
            get
            {
                return ((global::Sample.TagBIND_OPTS.__Internal*) __Instance)->grfMode;
            }

            set
            {
                ((global::Sample.TagBIND_OPTS.__Internal*)__Instance)->grfMode = value;
            }
        }

        public uint DwTickCountDeadline
        {
            get
            {
                return ((global::Sample.TagBIND_OPTS.__Internal*) __Instance)->dwTickCountDeadline;
            }

            set
            {
                ((global::Sample.TagBIND_OPTS.__Internal*)__Instance)->dwTickCountDeadline = value;
            }
        }
    }

    public unsafe partial class TagRGBTRIPLE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 3)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte rgbtBlue;

            [FieldOffset(1)]
            internal sbyte rgbtGreen;

            [FieldOffset(2)]
            internal sbyte rgbtRed;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRGBTRIPLE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRGBTRIPLE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRGBTRIPLE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRGBTRIPLE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRGBTRIPLE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRGBTRIPLE __CreateInstance(global::Sample.TagRGBTRIPLE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRGBTRIPLE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRGBTRIPLE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBTRIPLE.__Internal));
            *(global::Sample.TagRGBTRIPLE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRGBTRIPLE(global::Sample.TagRGBTRIPLE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRGBTRIPLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRGBTRIPLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRGBTRIPLE(global::Sample.TagRGBTRIPLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRGBTRIPLE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRGBTRIPLE.__Internal*) __Instance) = *((global::Sample.TagRGBTRIPLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRGBTRIPLE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte RgbtBlue
        {
            get
            {
                return ((global::Sample.TagRGBTRIPLE.__Internal*) __Instance)->rgbtBlue;
            }

            set
            {
                ((global::Sample.TagRGBTRIPLE.__Internal*)__Instance)->rgbtBlue = value;
            }
        }

        public sbyte RgbtGreen
        {
            get
            {
                return ((global::Sample.TagRGBTRIPLE.__Internal*) __Instance)->rgbtGreen;
            }

            set
            {
                ((global::Sample.TagRGBTRIPLE.__Internal*)__Instance)->rgbtGreen = value;
            }
        }

        public sbyte RgbtRed
        {
            get
            {
                return ((global::Sample.TagRGBTRIPLE.__Internal*) __Instance)->rgbtRed;
            }

            set
            {
                ((global::Sample.TagRGBTRIPLE.__Internal*)__Instance)->rgbtRed = value;
            }
        }
    }

    public unsafe partial class MONITOR_INFO_1W : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_MONITOR_INFO_1W@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MONITOR_INFO_1W> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.MONITOR_INFO_1W>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.MONITOR_INFO_1W __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.MONITOR_INFO_1W(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.MONITOR_INFO_1W __CreateInstance(global::Sample.MONITOR_INFO_1W.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.MONITOR_INFO_1W(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.MONITOR_INFO_1W.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_1W.__Internal));
            *(global::Sample.MONITOR_INFO_1W.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MONITOR_INFO_1W(global::Sample.MONITOR_INFO_1W.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MONITOR_INFO_1W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public MONITOR_INFO_1W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_1W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public MONITOR_INFO_1W(global::Sample.MONITOR_INFO_1W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.MONITOR_INFO_1W.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.MONITOR_INFO_1W.__Internal*) __Instance) = *((global::Sample.MONITOR_INFO_1W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.MONITOR_INFO_1W __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort* PName
        {
            get
            {
                return (ushort*) ((global::Sample.MONITOR_INFO_1W.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.MONITOR_INFO_1W.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class COMSTAT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint fCtsHold;

            [FieldOffset(0)]
            internal uint fDsrHold;

            [FieldOffset(0)]
            internal uint fRlsdHold;

            [FieldOffset(0)]
            internal uint fXoffHold;

            [FieldOffset(0)]
            internal uint fXoffSent;

            [FieldOffset(0)]
            internal uint fEof;

            [FieldOffset(0)]
            internal uint fTxim;

            [FieldOffset(0)]
            internal uint fReserved;

            [FieldOffset(4)]
            internal uint cbInQue;

            [FieldOffset(8)]
            internal uint cbOutQue;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_COMSTAT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COMSTAT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.COMSTAT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.COMSTAT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.COMSTAT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.COMSTAT __CreateInstance(global::Sample.COMSTAT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.COMSTAT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.COMSTAT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.COMSTAT.__Internal));
            *(global::Sample.COMSTAT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private COMSTAT(global::Sample.COMSTAT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected COMSTAT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public COMSTAT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COMSTAT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public COMSTAT(global::Sample.COMSTAT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.COMSTAT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.COMSTAT.__Internal*) __Instance) = *((global::Sample.COMSTAT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.COMSTAT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint FCtsHold
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fCtsHold;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fCtsHold = value;
            }
        }

        public uint FDsrHold
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fDsrHold;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fDsrHold = value;
            }
        }

        public uint FRlsdHold
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fRlsdHold;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fRlsdHold = value;
            }
        }

        public uint FXoffHold
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fXoffHold;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fXoffHold = value;
            }
        }

        public uint FXoffSent
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fXoffSent;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fXoffSent = value;
            }
        }

        public uint FEof
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fEof;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fEof = value;
            }
        }

        public uint FTxim
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fTxim;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fTxim = value;
            }
        }

        public uint FReserved
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->fReserved;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->fReserved = value;
            }
        }

        public uint CbInQue
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->cbInQue;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->cbInQue = value;
            }
        }

        public uint CbOutQue
        {
            get
            {
                return ((global::Sample.COMSTAT.__Internal*) __Instance)->cbOutQue;
            }

            set
            {
                ((global::Sample.COMSTAT.__Internal*)__Instance)->cbOutQue = value;
            }
        }
    }

    public unsafe partial class DLGITEMTEMPLATE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint style;

            [FieldOffset(4)]
            internal uint dwExtendedStyle;

            [FieldOffset(8)]
            internal short x;

            [FieldOffset(10)]
            internal short y;

            [FieldOffset(12)]
            internal short cx;

            [FieldOffset(14)]
            internal short cy;

            [FieldOffset(16)]
            internal ushort id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0DLGITEMTEMPLATE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DLGITEMTEMPLATE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DLGITEMTEMPLATE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DLGITEMTEMPLATE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DLGITEMTEMPLATE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DLGITEMTEMPLATE __CreateInstance(global::Sample.DLGITEMTEMPLATE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DLGITEMTEMPLATE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DLGITEMTEMPLATE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DLGITEMTEMPLATE.__Internal));
            *(global::Sample.DLGITEMTEMPLATE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DLGITEMTEMPLATE(global::Sample.DLGITEMTEMPLATE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DLGITEMTEMPLATE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DLGITEMTEMPLATE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DLGITEMTEMPLATE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DLGITEMTEMPLATE(global::Sample.DLGITEMTEMPLATE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DLGITEMTEMPLATE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance) = *((global::Sample.DLGITEMTEMPLATE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DLGITEMTEMPLATE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Style
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->style;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->style = value;
            }
        }

        public uint DwExtendedStyle
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->dwExtendedStyle;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->dwExtendedStyle = value;
            }
        }

        public short X
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->x = value;
            }
        }

        public short Y
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->y = value;
            }
        }

        public short Cx
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->cx;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->cx = value;
            }
        }

        public short Cy
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->cy;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->cy = value;
            }
        }

        public ushort Id
        {
            get
            {
                return ((global::Sample.DLGITEMTEMPLATE.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::Sample.DLGITEMTEMPLATE.__Internal*)__Instance)->id = value;
            }
        }
    }

    public unsafe partial class DISPLAY_DEVICEW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 840)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cb;

            [FieldOffset(4)]
            internal fixed ushort DeviceName[32];

            [FieldOffset(68)]
            internal fixed ushort DeviceString[128];

            [FieldOffset(324)]
            internal uint StateFlags;

            [FieldOffset(328)]
            internal fixed ushort DeviceID[128];

            [FieldOffset(584)]
            internal fixed ushort DeviceKey[128];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DISPLAY_DEVICEW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DISPLAY_DEVICEW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DISPLAY_DEVICEW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DISPLAY_DEVICEW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DISPLAY_DEVICEW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DISPLAY_DEVICEW __CreateInstance(global::Sample.DISPLAY_DEVICEW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DISPLAY_DEVICEW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DISPLAY_DEVICEW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DISPLAY_DEVICEW.__Internal));
            *(global::Sample.DISPLAY_DEVICEW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DISPLAY_DEVICEW(global::Sample.DISPLAY_DEVICEW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DISPLAY_DEVICEW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DISPLAY_DEVICEW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DISPLAY_DEVICEW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DISPLAY_DEVICEW(global::Sample.DISPLAY_DEVICEW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DISPLAY_DEVICEW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance) = *((global::Sample.DISPLAY_DEVICEW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DISPLAY_DEVICEW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Cb
        {
            get
            {
                return ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->cb;
            }

            set
            {
                ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->cb = value;
            }
        }

        public ushort[] DeviceName
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceName != null)
                {
                    __value = new ushort[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceName[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->DeviceName[i] = value[i];
                }
            }
        }

        public ushort[] DeviceString
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceString != null)
                {
                    __value = new ushort[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceString[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->DeviceString[i] = value[i];
                }
            }
        }

        public uint StateFlags
        {
            get
            {
                return ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->StateFlags;
            }

            set
            {
                ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->StateFlags = value;
            }
        }

        public ushort[] DeviceID
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceID != null)
                {
                    __value = new ushort[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceID[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->DeviceID[i] = value[i];
                }
            }
        }

        public ushort[] DeviceKey
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceKey != null)
                {
                    __value = new ushort[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = ((global::Sample.DISPLAY_DEVICEW.__Internal*) __Instance)->DeviceKey[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((global::Sample.DISPLAY_DEVICEW.__Internal*)__Instance)->DeviceKey[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class CRYPT_OID_FUNC_ENTRY : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pszOID;

            [FieldOffset(4)]
            internal global::System.IntPtr pvFuncAddr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPT_OID_FUNC_ENTRY@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_OID_FUNC_ENTRY> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_OID_FUNC_ENTRY>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPT_OID_FUNC_ENTRY __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_OID_FUNC_ENTRY(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPT_OID_FUNC_ENTRY __CreateInstance(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_OID_FUNC_ENTRY(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal));
            *(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPT_OID_FUNC_ENTRY(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPT_OID_FUNC_ENTRY(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPT_OID_FUNC_ENTRY()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPT_OID_FUNC_ENTRY(global::Sample.CRYPT_OID_FUNC_ENTRY _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) __Instance) = *((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPT_OID_FUNC_ENTRY __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string PszOID
        {
            get
            {
                if (((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) __Instance)->pszOID == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) __Instance)->pszOID;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) __Instance)->pszOID, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*)__Instance)->pszOID = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public global::System.IntPtr PvFuncAddr
        {
            get
            {
                return ((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*) __Instance)->pvFuncAddr;
            }

            set
            {
                ((global::Sample.CRYPT_OID_FUNC_ENTRY.__Internal*)__Instance)->pvFuncAddr = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class DOC_INFO_3A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pDocName;

            [FieldOffset(4)]
            internal global::System.IntPtr pOutputFile;

            [FieldOffset(8)]
            internal global::System.IntPtr pDatatype;

            [FieldOffset(12)]
            internal uint dwFlags;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_DOC_INFO_3A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_3A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DOC_INFO_3A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DOC_INFO_3A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_3A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DOC_INFO_3A __CreateInstance(global::Sample.DOC_INFO_3A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DOC_INFO_3A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DOC_INFO_3A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_3A.__Internal));
            *(global::Sample.DOC_INFO_3A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DOC_INFO_3A(global::Sample.DOC_INFO_3A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DOC_INFO_3A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DOC_INFO_3A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_3A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DOC_INFO_3A(global::Sample.DOC_INFO_3A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DOC_INFO_3A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DOC_INFO_3A.__Internal*) __Instance) = *((global::Sample.DOC_INFO_3A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DOC_INFO_3A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PDocName
        {
            get
            {
                return (sbyte*) ((global::Sample.DOC_INFO_3A.__Internal*) __Instance)->pDocName;
            }

            set
            {
                ((global::Sample.DOC_INFO_3A.__Internal*)__Instance)->pDocName = (global::System.IntPtr) value;
            }
        }

        public sbyte* POutputFile
        {
            get
            {
                return (sbyte*) ((global::Sample.DOC_INFO_3A.__Internal*) __Instance)->pOutputFile;
            }

            set
            {
                ((global::Sample.DOC_INFO_3A.__Internal*)__Instance)->pOutputFile = (global::System.IntPtr) value;
            }
        }

        public sbyte* PDatatype
        {
            get
            {
                return (sbyte*) ((global::Sample.DOC_INFO_3A.__Internal*) __Instance)->pDatatype;
            }

            set
            {
                ((global::Sample.DOC_INFO_3A.__Internal*)__Instance)->pDatatype = (global::System.IntPtr) value;
            }
        }

        public uint DwFlags
        {
            get
            {
                return ((global::Sample.DOC_INFO_3A.__Internal*) __Instance)->dwFlags;
            }

            set
            {
                ((global::Sample.DOC_INFO_3A.__Internal*)__Instance)->dwFlags = value;
            }
        }
    }

    public unsafe partial class HMENU_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HMENU__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMENU_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMENU_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HMENU_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HMENU_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HMENU_ __CreateInstance(global::Sample.HMENU_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HMENU_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HMENU_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HMENU_.__Internal));
            *(global::Sample.HMENU_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HMENU_(global::Sample.HMENU_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HMENU_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HMENU_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMENU_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HMENU_(global::Sample.HMENU_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMENU_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HMENU_.__Internal*) __Instance) = *((global::Sample.HMENU_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HMENU_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HMENU_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HMENU_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class TagMINIMIZEDMETRICS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal int iWidth;

            [FieldOffset(8)]
            internal int iHorzGap;

            [FieldOffset(12)]
            internal int iVertGap;

            [FieldOffset(16)]
            internal int iArrange;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMINIMIZEDMETRICS@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMINIMIZEDMETRICS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMINIMIZEDMETRICS>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMINIMIZEDMETRICS __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMINIMIZEDMETRICS(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMINIMIZEDMETRICS __CreateInstance(global::Sample.TagMINIMIZEDMETRICS.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMINIMIZEDMETRICS(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMINIMIZEDMETRICS.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMINIMIZEDMETRICS.__Internal));
            *(global::Sample.TagMINIMIZEDMETRICS.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMINIMIZEDMETRICS(global::Sample.TagMINIMIZEDMETRICS.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMINIMIZEDMETRICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMINIMIZEDMETRICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMINIMIZEDMETRICS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMINIMIZEDMETRICS(global::Sample.TagMINIMIZEDMETRICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMINIMIZEDMETRICS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance) = *((global::Sample.TagMINIMIZEDMETRICS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMINIMIZEDMETRICS __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.TagMINIMIZEDMETRICS.__Internal*)__Instance)->cbSize = value;
            }
        }

        public int IWidth
        {
            get
            {
                return ((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance)->iWidth;
            }

            set
            {
                ((global::Sample.TagMINIMIZEDMETRICS.__Internal*)__Instance)->iWidth = value;
            }
        }

        public int IHorzGap
        {
            get
            {
                return ((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance)->iHorzGap;
            }

            set
            {
                ((global::Sample.TagMINIMIZEDMETRICS.__Internal*)__Instance)->iHorzGap = value;
            }
        }

        public int IVertGap
        {
            get
            {
                return ((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance)->iVertGap;
            }

            set
            {
                ((global::Sample.TagMINIMIZEDMETRICS.__Internal*)__Instance)->iVertGap = value;
            }
        }

        public int IArrange
        {
            get
            {
                return ((global::Sample.TagMINIMIZEDMETRICS.__Internal*) __Instance)->iArrange;
            }

            set
            {
                ((global::Sample.TagMINIMIZEDMETRICS.__Internal*)__Instance)->iArrange = value;
            }
        }
    }

    public unsafe partial class HMIDIIN_ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int unused;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0HMIDIIN__@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMIDIIN_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.HMIDIIN_>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.HMIDIIN_ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.HMIDIIN_(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.HMIDIIN_ __CreateInstance(global::Sample.HMIDIIN_.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.HMIDIIN_(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.HMIDIIN_.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.HMIDIIN_.__Internal));
            *(global::Sample.HMIDIIN_.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HMIDIIN_(global::Sample.HMIDIIN_.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HMIDIIN_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HMIDIIN_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMIDIIN_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HMIDIIN_(global::Sample.HMIDIIN_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.HMIDIIN_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.HMIDIIN_.__Internal*) __Instance) = *((global::Sample.HMIDIIN_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.HMIDIIN_ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Unused
        {
            get
            {
                return ((global::Sample.HMIDIIN_.__Internal*) __Instance)->unused;
            }

            set
            {
                ((global::Sample.HMIDIIN_.__Internal*)__Instance)->unused = value;
            }
        }
    }

    public unsafe partial class CRYPT_DECRYPT_MESSAGE_PARA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbSize;

            [FieldOffset(4)]
            internal uint dwMsgAndCertEncodingType;

            [FieldOffset(8)]
            internal uint cCertStore;

            [FieldOffset(12)]
            internal global::System.IntPtr rghCertStore;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_CRYPT_DECRYPT_MESSAGE_PARA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_DECRYPT_MESSAGE_PARA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.CRYPT_DECRYPT_MESSAGE_PARA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.CRYPT_DECRYPT_MESSAGE_PARA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_DECRYPT_MESSAGE_PARA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.CRYPT_DECRYPT_MESSAGE_PARA __CreateInstance(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.CRYPT_DECRYPT_MESSAGE_PARA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal));
            *(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CRYPT_DECRYPT_MESSAGE_PARA(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRYPT_DECRYPT_MESSAGE_PARA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public CRYPT_DECRYPT_MESSAGE_PARA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CRYPT_DECRYPT_MESSAGE_PARA(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) __Instance) = *((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.CRYPT_DECRYPT_MESSAGE_PARA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbSize
        {
            get
            {
                return ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) __Instance)->cbSize;
            }

            set
            {
                ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*)__Instance)->cbSize = value;
            }
        }

        public uint DwMsgAndCertEncodingType
        {
            get
            {
                return ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) __Instance)->dwMsgAndCertEncodingType;
            }

            set
            {
                ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*)__Instance)->dwMsgAndCertEncodingType = value;
            }
        }

        public uint CCertStore
        {
            get
            {
                return ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) __Instance)->cCertStore;
            }

            set
            {
                ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*)__Instance)->cCertStore = value;
            }
        }

        public void** RghCertStore
        {
            get
            {
                return ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*) __Instance)->rghCertStore;
            }

            set
            {
                ((global::Sample.CRYPT_DECRYPT_MESSAGE_PARA.__Internal*)__Instance)->rghCertStore = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TypeDescriptor : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pVFTable;

            [FieldOffset(4)]
            internal global::System.IntPtr spare;

            [FieldOffset(8)]
            internal sbyte[] name;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_TypeDescriptor@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TypeDescriptor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TypeDescriptor>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TypeDescriptor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TypeDescriptor(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TypeDescriptor __CreateInstance(global::Sample.TypeDescriptor.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TypeDescriptor(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TypeDescriptor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TypeDescriptor.__Internal));
            *(global::Sample.TypeDescriptor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TypeDescriptor(global::Sample.TypeDescriptor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TypeDescriptor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TypeDescriptor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TypeDescriptor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TypeDescriptor(global::Sample.TypeDescriptor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TypeDescriptor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TypeDescriptor.__Internal*) __Instance) = *((global::Sample.TypeDescriptor.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TypeDescriptor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr PVFTable
        {
            get
            {
                return ((global::Sample.TypeDescriptor.__Internal*) __Instance)->pVFTable;
            }
        }

        public global::System.IntPtr Spare
        {
            get
            {
                return ((global::Sample.TypeDescriptor.__Internal*) __Instance)->spare;
            }

            set
            {
                ((global::Sample.TypeDescriptor.__Internal*)__Instance)->spare = (global::System.IntPtr) value;
            }
        }

        public sbyte[] Name
        {
            get
            {
                return ((global::Sample.TypeDescriptor.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::Sample.TypeDescriptor.__Internal*)__Instance)->name = value;
            }
        }
    }

    public unsafe partial class PMD : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int mdisp;

            [FieldOffset(4)]
            internal int pdisp;

            [FieldOffset(8)]
            internal int vdisp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PMD@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PMD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PMD>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PMD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PMD(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PMD __CreateInstance(global::Sample.PMD.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PMD(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PMD.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PMD.__Internal));
            *(global::Sample.PMD.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PMD(global::Sample.PMD.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PMD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PMD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PMD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PMD(global::Sample.PMD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PMD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PMD.__Internal*) __Instance) = *((global::Sample.PMD.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PMD __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Mdisp
        {
            get
            {
                return ((global::Sample.PMD.__Internal*) __Instance)->mdisp;
            }

            set
            {
                ((global::Sample.PMD.__Internal*)__Instance)->mdisp = value;
            }
        }

        public int Pdisp
        {
            get
            {
                return ((global::Sample.PMD.__Internal*) __Instance)->pdisp;
            }

            set
            {
                ((global::Sample.PMD.__Internal*)__Instance)->pdisp = value;
            }
        }

        public int Vdisp
        {
            get
            {
                return ((global::Sample.PMD.__Internal*) __Instance)->vdisp;
            }

            set
            {
                ((global::Sample.PMD.__Internal*)__Instance)->vdisp = value;
            }
        }
    }

    public unsafe partial class TagJOYCAPSW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 728)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort wMid;

            [FieldOffset(2)]
            internal ushort wPid;

            [FieldOffset(4)]
            internal fixed ushort szPname[32];

            [FieldOffset(68)]
            internal uint wXmin;

            [FieldOffset(72)]
            internal uint wXmax;

            [FieldOffset(76)]
            internal uint wYmin;

            [FieldOffset(80)]
            internal uint wYmax;

            [FieldOffset(84)]
            internal uint wZmin;

            [FieldOffset(88)]
            internal uint wZmax;

            [FieldOffset(92)]
            internal uint wNumButtons;

            [FieldOffset(96)]
            internal uint wPeriodMin;

            [FieldOffset(100)]
            internal uint wPeriodMax;

            [FieldOffset(104)]
            internal uint wRmin;

            [FieldOffset(108)]
            internal uint wRmax;

            [FieldOffset(112)]
            internal uint wUmin;

            [FieldOffset(116)]
            internal uint wUmax;

            [FieldOffset(120)]
            internal uint wVmin;

            [FieldOffset(124)]
            internal uint wVmax;

            [FieldOffset(128)]
            internal uint wCaps;

            [FieldOffset(132)]
            internal uint wMaxAxes;

            [FieldOffset(136)]
            internal uint wNumAxes;

            [FieldOffset(140)]
            internal uint wMaxButtons;

            [FieldOffset(144)]
            internal fixed ushort szRegKey[32];

            [FieldOffset(208)]
            internal fixed ushort szOEMVxD[260];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagJOYCAPSW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagJOYCAPSW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagJOYCAPSW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagJOYCAPSW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagJOYCAPSW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagJOYCAPSW __CreateInstance(global::Sample.TagJOYCAPSW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagJOYCAPSW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagJOYCAPSW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSW.__Internal));
            *(global::Sample.TagJOYCAPSW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagJOYCAPSW(global::Sample.TagJOYCAPSW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagJOYCAPSW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagJOYCAPSW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagJOYCAPSW(global::Sample.TagJOYCAPSW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagJOYCAPSW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagJOYCAPSW.__Internal*) __Instance) = *((global::Sample.TagJOYCAPSW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagJOYCAPSW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WMid
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wMid;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wMid = value;
            }
        }

        public ushort WPid
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wPid;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wPid = value;
            }
        }

        public ushort[] SzPname
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szPname != null)
                {
                    __value = new ushort[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szPname[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->szPname[i] = value[i];
                }
            }
        }

        public uint WXmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wXmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wXmin = value;
            }
        }

        public uint WXmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wXmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wXmax = value;
            }
        }

        public uint WYmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wYmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wYmin = value;
            }
        }

        public uint WYmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wYmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wYmax = value;
            }
        }

        public uint WZmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wZmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wZmin = value;
            }
        }

        public uint WZmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wZmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wZmax = value;
            }
        }

        public uint WNumButtons
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wNumButtons;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wNumButtons = value;
            }
        }

        public uint WPeriodMin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wPeriodMin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wPeriodMin = value;
            }
        }

        public uint WPeriodMax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wPeriodMax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wPeriodMax = value;
            }
        }

        public uint WRmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wRmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wRmin = value;
            }
        }

        public uint WRmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wRmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wRmax = value;
            }
        }

        public uint WUmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wUmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wUmin = value;
            }
        }

        public uint WUmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wUmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wUmax = value;
            }
        }

        public uint WVmin
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wVmin;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wVmin = value;
            }
        }

        public uint WVmax
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wVmax;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wVmax = value;
            }
        }

        public uint WCaps
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wCaps;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wCaps = value;
            }
        }

        public uint WMaxAxes
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wMaxAxes;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wMaxAxes = value;
            }
        }

        public uint WNumAxes
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wNumAxes;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wNumAxes = value;
            }
        }

        public uint WMaxButtons
        {
            get
            {
                return ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->wMaxButtons;
            }

            set
            {
                ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->wMaxButtons = value;
            }
        }

        public ushort[] SzRegKey
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szRegKey != null)
                {
                    __value = new ushort[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szRegKey[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->szRegKey[i] = value[i];
                }
            }
        }

        public ushort[] SzOEMVxD
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szOEMVxD != null)
                {
                    __value = new ushort[260];
                    for (int i = 0; i < 260; i++)
                        __value[i] = ((global::Sample.TagJOYCAPSW.__Internal*) __Instance)->szOEMVxD[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 260; i++)
                        ((global::Sample.TagJOYCAPSW.__Internal*)__Instance)->szOEMVxD[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TagCIEXYZ : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int ciexyzX;

            [FieldOffset(4)]
            internal int ciexyzY;

            [FieldOffset(8)]
            internal int ciexyzZ;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagCIEXYZ@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCIEXYZ> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCIEXYZ>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagCIEXYZ __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagCIEXYZ(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagCIEXYZ __CreateInstance(global::Sample.TagCIEXYZ.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagCIEXYZ(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagCIEXYZ.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagCIEXYZ.__Internal));
            *(global::Sample.TagCIEXYZ.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCIEXYZ(global::Sample.TagCIEXYZ.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagCIEXYZ(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagCIEXYZ()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCIEXYZ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagCIEXYZ(global::Sample.TagCIEXYZ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCIEXYZ.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagCIEXYZ.__Internal*) __Instance) = *((global::Sample.TagCIEXYZ.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagCIEXYZ __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int CiexyzX
        {
            get
            {
                return ((global::Sample.TagCIEXYZ.__Internal*) __Instance)->ciexyzX;
            }

            set
            {
                ((global::Sample.TagCIEXYZ.__Internal*)__Instance)->ciexyzX = value;
            }
        }

        public int CiexyzY
        {
            get
            {
                return ((global::Sample.TagCIEXYZ.__Internal*) __Instance)->ciexyzY;
            }

            set
            {
                ((global::Sample.TagCIEXYZ.__Internal*)__Instance)->ciexyzY = value;
            }
        }

        public int CiexyzZ
        {
            get
            {
                return ((global::Sample.TagCIEXYZ.__Internal*) __Instance)->ciexyzZ;
            }

            set
            {
                ((global::Sample.TagCIEXYZ.__Internal*)__Instance)->ciexyzZ = value;
            }
        }
    }

    public unsafe partial class TagMCI_SYSINFO_PARMSA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwCallback;

            [FieldOffset(4)]
            internal global::System.IntPtr lpstrReturn;

            [FieldOffset(8)]
            internal uint dwRetSize;

            [FieldOffset(12)]
            internal uint dwNumber;

            [FieldOffset(16)]
            internal uint wDeviceType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMCI_SYSINFO_PARMSA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SYSINFO_PARMSA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMCI_SYSINFO_PARMSA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMCI_SYSINFO_PARMSA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SYSINFO_PARMSA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMCI_SYSINFO_PARMSA __CreateInstance(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMCI_SYSINFO_PARMSA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal));
            *(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMCI_SYSINFO_PARMSA(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMCI_SYSINFO_PARMSA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMCI_SYSINFO_PARMSA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMCI_SYSINFO_PARMSA(global::Sample.TagMCI_SYSINFO_PARMSA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMCI_SYSINFO_PARMSA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance) = *((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMCI_SYSINFO_PARMSA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwCallback
        {
            get
            {
                return ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance)->dwCallback;
            }

            set
            {
                ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*)__Instance)->dwCallback = value;
            }
        }

        public sbyte* LpstrReturn
        {
            get
            {
                return (sbyte*) ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance)->lpstrReturn;
            }

            set
            {
                ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*)__Instance)->lpstrReturn = (global::System.IntPtr) value;
            }
        }

        public uint DwRetSize
        {
            get
            {
                return ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance)->dwRetSize;
            }

            set
            {
                ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*)__Instance)->dwRetSize = value;
            }
        }

        public uint DwNumber
        {
            get
            {
                return ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance)->dwNumber;
            }

            set
            {
                ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*)__Instance)->dwNumber = value;
            }
        }

        public uint WDeviceType
        {
            get
            {
                return ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*) __Instance)->wDeviceType;
            }

            set
            {
                ((global::Sample.TagMCI_SYSINFO_PARMSA.__Internal*)__Instance)->wDeviceType = value;
            }
        }
    }

    public unsafe partial class PRINTPROCESSOR_INFO_1A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr pName;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PRINTPROCESSOR_INFO_1A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTPROCESSOR_INFO_1A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTPROCESSOR_INFO_1A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PRINTPROCESSOR_INFO_1A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PRINTPROCESSOR_INFO_1A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PRINTPROCESSOR_INFO_1A __CreateInstance(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PRINTPROCESSOR_INFO_1A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal));
            *(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PRINTPROCESSOR_INFO_1A(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PRINTPROCESSOR_INFO_1A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PRINTPROCESSOR_INFO_1A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PRINTPROCESSOR_INFO_1A(global::Sample.PRINTPROCESSOR_INFO_1A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTPROCESSOR_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PRINTPROCESSOR_INFO_1A.__Internal*) __Instance) = *((global::Sample.PRINTPROCESSOR_INFO_1A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PRINTPROCESSOR_INFO_1A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* PName
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTPROCESSOR_INFO_1A.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.PRINTPROCESSOR_INFO_1A.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagCABSTR : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cElems;

            [FieldOffset(4)]
            internal global::System.IntPtr pElems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagCABSTR@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCABSTR> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagCABSTR>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagCABSTR __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagCABSTR(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagCABSTR __CreateInstance(global::Sample.TagCABSTR.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagCABSTR(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagCABSTR.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagCABSTR.__Internal));
            *(global::Sample.TagCABSTR.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagCABSTR(global::Sample.TagCABSTR.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagCABSTR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagCABSTR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCABSTR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagCABSTR(global::Sample.TagCABSTR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagCABSTR.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagCABSTR.__Internal*) __Instance) = *((global::Sample.TagCABSTR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagCABSTR __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CElems
        {
            get
            {
                return ((global::Sample.TagCABSTR.__Internal*) __Instance)->cElems;
            }

            set
            {
                ((global::Sample.TagCABSTR.__Internal*)__Instance)->cElems = value;
            }
        }

        public ushort** PElems
        {
            get
            {
                return (ushort**) ((global::Sample.TagCABSTR.__Internal*) __Instance)->pElems;
            }

            set
            {
                ((global::Sample.TagCABSTR.__Internal*)__Instance)->pElems = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagMULTIKEYHELPW : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint mkSize;

            [FieldOffset(4)]
            internal ushort mkKeylist;

            [FieldOffset(6)]
            internal fixed ushort szKeyphrase[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMULTIKEYHELPW@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMULTIKEYHELPW> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMULTIKEYHELPW>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMULTIKEYHELPW __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMULTIKEYHELPW(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMULTIKEYHELPW __CreateInstance(global::Sample.TagMULTIKEYHELPW.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMULTIKEYHELPW(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMULTIKEYHELPW.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMULTIKEYHELPW.__Internal));
            *(global::Sample.TagMULTIKEYHELPW.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMULTIKEYHELPW(global::Sample.TagMULTIKEYHELPW.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMULTIKEYHELPW(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMULTIKEYHELPW()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMULTIKEYHELPW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMULTIKEYHELPW(global::Sample.TagMULTIKEYHELPW _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMULTIKEYHELPW.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMULTIKEYHELPW.__Internal*) __Instance) = *((global::Sample.TagMULTIKEYHELPW.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMULTIKEYHELPW __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MkSize
        {
            get
            {
                return ((global::Sample.TagMULTIKEYHELPW.__Internal*) __Instance)->mkSize;
            }

            set
            {
                ((global::Sample.TagMULTIKEYHELPW.__Internal*)__Instance)->mkSize = value;
            }
        }

        public ushort MkKeylist
        {
            get
            {
                return ((global::Sample.TagMULTIKEYHELPW.__Internal*) __Instance)->mkKeylist;
            }

            set
            {
                ((global::Sample.TagMULTIKEYHELPW.__Internal*)__Instance)->mkKeylist = value;
            }
        }

        public ushort[] SzKeyphrase
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.TagMULTIKEYHELPW.__Internal*) __Instance)->szKeyphrase != null)
                {
                    __value = new ushort[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.TagMULTIKEYHELPW.__Internal*) __Instance)->szKeyphrase[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.TagMULTIKEYHELPW.__Internal*)__Instance)->szKeyphrase[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TagHELPWININFOA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int wStructSize;

            [FieldOffset(4)]
            internal int x;

            [FieldOffset(8)]
            internal int y;

            [FieldOffset(12)]
            internal int dx;

            [FieldOffset(16)]
            internal int dy;

            [FieldOffset(20)]
            internal int wMax;

            [FieldOffset(24)]
            internal fixed sbyte rgchMember[2];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagHELPWININFOA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagHELPWININFOA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagHELPWININFOA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagHELPWININFOA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagHELPWININFOA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagHELPWININFOA __CreateInstance(global::Sample.TagHELPWININFOA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagHELPWININFOA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagHELPWININFOA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagHELPWININFOA.__Internal));
            *(global::Sample.TagHELPWININFOA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagHELPWININFOA(global::Sample.TagHELPWININFOA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagHELPWININFOA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagHELPWININFOA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagHELPWININFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagHELPWININFOA(global::Sample.TagHELPWININFOA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagHELPWININFOA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagHELPWININFOA.__Internal*) __Instance) = *((global::Sample.TagHELPWININFOA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagHELPWININFOA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int WStructSize
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->wStructSize;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->wStructSize = value;
            }
        }

        public int X
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->y = value;
            }
        }

        public int Dx
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->dx;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->dx = value;
            }
        }

        public int Dy
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->dy;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->dy = value;
            }
        }

        public int WMax
        {
            get
            {
                return ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->wMax;
            }

            set
            {
                ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->wMax = value;
            }
        }

        public sbyte[] RgchMember
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->rgchMember != null)
                {
                    __value = new sbyte[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::Sample.TagHELPWININFOA.__Internal*) __Instance)->rgchMember[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::Sample.TagHELPWININFOA.__Internal*)__Instance)->rgchMember[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class E30731EC1589AE832070BFAB4699C1350 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwType;

            [FieldOffset(4)]
            internal uint dwDeviceID;

            [FieldOffset(8)]
            internal ushort wMid;

            [FieldOffset(10)]
            internal ushort wPid;

            [FieldOffset(12)]
            internal uint vDriverVersion;

            [FieldOffset(16)]
            internal fixed ushort szPname[32];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E30731EC1589AE832070BFAB4699C1350@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E30731EC1589AE832070BFAB4699C1350> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E30731EC1589AE832070BFAB4699C1350>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E30731EC1589AE832070BFAB4699C1350 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E30731EC1589AE832070BFAB4699C1350(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E30731EC1589AE832070BFAB4699C1350 __CreateInstance(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E30731EC1589AE832070BFAB4699C1350(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal));
            *(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E30731EC1589AE832070BFAB4699C1350(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E30731EC1589AE832070BFAB4699C1350(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E30731EC1589AE832070BFAB4699C1350()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E30731EC1589AE832070BFAB4699C1350(global::Sample.E30731EC1589AE832070BFAB4699C1350 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance) = *((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E30731EC1589AE832070BFAB4699C1350 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwType
        {
            get
            {
                return ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->dwType;
            }

            set
            {
                ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->dwType = value;
            }
        }

        public uint DwDeviceID
        {
            get
            {
                return ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->dwDeviceID;
            }

            set
            {
                ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->dwDeviceID = value;
            }
        }

        public ushort WMid
        {
            get
            {
                return ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->wMid;
            }

            set
            {
                ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->wMid = value;
            }
        }

        public ushort WPid
        {
            get
            {
                return ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->wPid;
            }

            set
            {
                ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->wPid = value;
            }
        }

        public uint VDriverVersion
        {
            get
            {
                return ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->vDriverVersion;
            }

            set
            {
                ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->vDriverVersion = value;
            }
        }

        public ushort[] SzPname
        {
            get
            {
                ushort[] __value = null;
                if (((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->szPname != null)
                {
                    __value = new ushort[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*) __Instance)->szPname[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((global::Sample.E30731EC1589AE832070BFAB4699C1350.__Internal*)__Instance)->szPname[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TagRemHENHMETAFILE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cbData;

            [FieldOffset(4)]
            internal fixed sbyte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagRemHENHMETAFILE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHENHMETAFILE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagRemHENHMETAFILE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagRemHENHMETAFILE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHENHMETAFILE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagRemHENHMETAFILE __CreateInstance(global::Sample.TagRemHENHMETAFILE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagRemHENHMETAFILE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagRemHENHMETAFILE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHENHMETAFILE.__Internal));
            *(global::Sample.TagRemHENHMETAFILE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagRemHENHMETAFILE(global::Sample.TagRemHENHMETAFILE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagRemHENHMETAFILE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagRemHENHMETAFILE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHENHMETAFILE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagRemHENHMETAFILE(global::Sample.TagRemHENHMETAFILE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagRemHENHMETAFILE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagRemHENHMETAFILE.__Internal*) __Instance) = *((global::Sample.TagRemHENHMETAFILE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagRemHENHMETAFILE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CbData
        {
            get
            {
                return ((global::Sample.TagRemHENHMETAFILE.__Internal*) __Instance)->cbData;
            }

            set
            {
                ((global::Sample.TagRemHENHMETAFILE.__Internal*)__Instance)->cbData = value;
            }
        }

        public sbyte[] Data
        {
            get
            {
                sbyte[] __value = null;
                if (((global::Sample.TagRemHENHMETAFILE.__Internal*) __Instance)->data != null)
                {
                    __value = new sbyte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::Sample.TagRemHENHMETAFILE.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::Sample.TagRemHENHMETAFILE.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class TagSIZE : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int cx;

            [FieldOffset(4)]
            internal int cy;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagSIZE@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSIZE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSIZE>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagSIZE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagSIZE(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagSIZE __CreateInstance(global::Sample.TagSIZE.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagSIZE(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagSIZE.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagSIZE.__Internal));
            *(global::Sample.TagSIZE.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagSIZE(global::Sample.TagSIZE.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagSIZE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagSIZE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSIZE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagSIZE(global::Sample.TagSIZE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSIZE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagSIZE.__Internal*) __Instance) = *((global::Sample.TagSIZE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagSIZE __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Cx
        {
            get
            {
                return ((global::Sample.TagSIZE.__Internal*) __Instance)->cx;
            }

            set
            {
                ((global::Sample.TagSIZE.__Internal*)__Instance)->cx = value;
            }
        }

        public int Cy
        {
            get
            {
                return ((global::Sample.TagSIZE.__Internal*) __Instance)->cy;
            }

            set
            {
                ((global::Sample.TagSIZE.__Internal*)__Instance)->cy = value;
            }
        }
    }

    public unsafe partial class TagMEASUREITEMSTRUCT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint CtlType;

            [FieldOffset(4)]
            internal uint CtlID;

            [FieldOffset(8)]
            internal uint itemID;

            [FieldOffset(12)]
            internal uint itemWidth;

            [FieldOffset(16)]
            internal uint itemHeight;

            [FieldOffset(20)]
            internal uint itemData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagMEASUREITEMSTRUCT@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMEASUREITEMSTRUCT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagMEASUREITEMSTRUCT>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagMEASUREITEMSTRUCT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagMEASUREITEMSTRUCT(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagMEASUREITEMSTRUCT __CreateInstance(global::Sample.TagMEASUREITEMSTRUCT.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagMEASUREITEMSTRUCT(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagMEASUREITEMSTRUCT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagMEASUREITEMSTRUCT.__Internal));
            *(global::Sample.TagMEASUREITEMSTRUCT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagMEASUREITEMSTRUCT(global::Sample.TagMEASUREITEMSTRUCT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagMEASUREITEMSTRUCT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagMEASUREITEMSTRUCT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMEASUREITEMSTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagMEASUREITEMSTRUCT(global::Sample.TagMEASUREITEMSTRUCT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagMEASUREITEMSTRUCT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance) = *((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagMEASUREITEMSTRUCT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CtlType
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->CtlType;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->CtlType = value;
            }
        }

        public uint CtlID
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->CtlID;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->CtlID = value;
            }
        }

        public uint ItemID
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->itemID;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->itemID = value;
            }
        }

        public uint ItemWidth
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->itemWidth;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->itemWidth = value;
            }
        }

        public uint ItemHeight
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->itemHeight;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->itemHeight = value;
            }
        }

        public uint ItemData
        {
            get
            {
                return ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*) __Instance)->itemData;
            }

            set
            {
                ((global::Sample.TagMEASUREITEMSTRUCT.__Internal*)__Instance)->itemData = value;
            }
        }
    }

    public unsafe partial class DRVCONFIGINFOEX : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint dwDCISize;

            [FieldOffset(4)]
            internal global::System.IntPtr lpszDCISectionName;

            [FieldOffset(8)]
            internal global::System.IntPtr lpszDCIAliasName;

            [FieldOffset(12)]
            internal uint dnDevNode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0DRVCONFIGINFOEX@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DRVCONFIGINFOEX> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.DRVCONFIGINFOEX>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.DRVCONFIGINFOEX __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.DRVCONFIGINFOEX(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.DRVCONFIGINFOEX __CreateInstance(global::Sample.DRVCONFIGINFOEX.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.DRVCONFIGINFOEX(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.DRVCONFIGINFOEX.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.DRVCONFIGINFOEX.__Internal));
            *(global::Sample.DRVCONFIGINFOEX.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DRVCONFIGINFOEX(global::Sample.DRVCONFIGINFOEX.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DRVCONFIGINFOEX(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DRVCONFIGINFOEX()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DRVCONFIGINFOEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DRVCONFIGINFOEX(global::Sample.DRVCONFIGINFOEX _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.DRVCONFIGINFOEX.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.DRVCONFIGINFOEX.__Internal*) __Instance) = *((global::Sample.DRVCONFIGINFOEX.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.DRVCONFIGINFOEX __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint DwDCISize
        {
            get
            {
                return ((global::Sample.DRVCONFIGINFOEX.__Internal*) __Instance)->dwDCISize;
            }

            set
            {
                ((global::Sample.DRVCONFIGINFOEX.__Internal*)__Instance)->dwDCISize = value;
            }
        }

        public ushort* LpszDCISectionName
        {
            get
            {
                return (ushort*) ((global::Sample.DRVCONFIGINFOEX.__Internal*) __Instance)->lpszDCISectionName;
            }
        }

        public ushort* LpszDCIAliasName
        {
            get
            {
                return (ushort*) ((global::Sample.DRVCONFIGINFOEX.__Internal*) __Instance)->lpszDCIAliasName;
            }
        }

        public uint DnDevNode
        {
            get
            {
                return ((global::Sample.DRVCONFIGINFOEX.__Internal*) __Instance)->dnDevNode;
            }

            set
            {
                ((global::Sample.DRVCONFIGINFOEX.__Internal*)__Instance)->dnDevNode = value;
            }
        }
    }

    public unsafe partial class PRINTER_INFO_1A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Flags;

            [FieldOffset(4)]
            internal global::System.IntPtr pDescription;

            [FieldOffset(8)]
            internal global::System.IntPtr pName;

            [FieldOffset(12)]
            internal global::System.IntPtr pComment;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0_PRINTER_INFO_1A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_INFO_1A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.PRINTER_INFO_1A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.PRINTER_INFO_1A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_INFO_1A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.PRINTER_INFO_1A __CreateInstance(global::Sample.PRINTER_INFO_1A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.PRINTER_INFO_1A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.PRINTER_INFO_1A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_1A.__Internal));
            *(global::Sample.PRINTER_INFO_1A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PRINTER_INFO_1A(global::Sample.PRINTER_INFO_1A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PRINTER_INFO_1A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PRINTER_INFO_1A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public PRINTER_INFO_1A(global::Sample.PRINTER_INFO_1A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.PRINTER_INFO_1A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.PRINTER_INFO_1A.__Internal*) __Instance) = *((global::Sample.PRINTER_INFO_1A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.PRINTER_INFO_1A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Flags
        {
            get
            {
                return ((global::Sample.PRINTER_INFO_1A.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_1A.__Internal*)__Instance)->Flags = value;
            }
        }

        public sbyte* PDescription
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTER_INFO_1A.__Internal*) __Instance)->pDescription;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_1A.__Internal*)__Instance)->pDescription = (global::System.IntPtr) value;
            }
        }

        public sbyte* PName
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTER_INFO_1A.__Internal*) __Instance)->pName;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_1A.__Internal*)__Instance)->pName = (global::System.IntPtr) value;
            }
        }

        public sbyte* PComment
        {
            get
            {
                return (sbyte*) ((global::Sample.PRINTER_INFO_1A.__Internal*) __Instance)->pComment;
            }

            set
            {
                ((global::Sample.PRINTER_INFO_1A.__Internal*)__Instance)->pComment = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class TagOLEVERB : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int lVerb;

            [FieldOffset(4)]
            internal global::System.IntPtr lpszVerbName;

            [FieldOffset(8)]
            internal uint fuFlags;

            [FieldOffset(12)]
            internal uint grfAttribs;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagOLEVERB@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEVERB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagOLEVERB>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagOLEVERB __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEVERB(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagOLEVERB __CreateInstance(global::Sample.TagOLEVERB.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagOLEVERB(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagOLEVERB.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEVERB.__Internal));
            *(global::Sample.TagOLEVERB.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagOLEVERB(global::Sample.TagOLEVERB.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagOLEVERB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagOLEVERB()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEVERB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagOLEVERB(global::Sample.TagOLEVERB _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagOLEVERB.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagOLEVERB.__Internal*) __Instance) = *((global::Sample.TagOLEVERB.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagOLEVERB __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int LVerb
        {
            get
            {
                return ((global::Sample.TagOLEVERB.__Internal*) __Instance)->lVerb;
            }

            set
            {
                ((global::Sample.TagOLEVERB.__Internal*)__Instance)->lVerb = value;
            }
        }

        public ushort* LpszVerbName
        {
            get
            {
                return (ushort*) ((global::Sample.TagOLEVERB.__Internal*) __Instance)->lpszVerbName;
            }

            set
            {
                ((global::Sample.TagOLEVERB.__Internal*)__Instance)->lpszVerbName = (global::System.IntPtr) value;
            }
        }

        public uint FuFlags
        {
            get
            {
                return ((global::Sample.TagOLEVERB.__Internal*) __Instance)->fuFlags;
            }

            set
            {
                ((global::Sample.TagOLEVERB.__Internal*)__Instance)->fuFlags = value;
            }
        }

        public uint GrfAttribs
        {
            get
            {
                return ((global::Sample.TagOLEVERB.__Internal*) __Instance)->grfAttribs;
            }

            set
            {
                ((global::Sample.TagOLEVERB.__Internal*)__Instance)->grfAttribs = value;
            }
        }
    }

    public unsafe partial class E983F061E0B702DD8AE0B4B955735A6A3 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Lo;

            [FieldOffset(4)]
            internal int Hi;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E983F061E0B702DD8AE0B4B955735A6A3@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E983F061E0B702DD8AE0B4B955735A6A3> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E983F061E0B702DD8AE0B4B955735A6A3>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E983F061E0B702DD8AE0B4B955735A6A3 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E983F061E0B702DD8AE0B4B955735A6A3(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E983F061E0B702DD8AE0B4B955735A6A3 __CreateInstance(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E983F061E0B702DD8AE0B4B955735A6A3(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal));
            *(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E983F061E0B702DD8AE0B4B955735A6A3(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E983F061E0B702DD8AE0B4B955735A6A3(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E983F061E0B702DD8AE0B4B955735A6A3()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E983F061E0B702DD8AE0B4B955735A6A3(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*) __Instance) = *((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E983F061E0B702DD8AE0B4B955735A6A3 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Lo
        {
            get
            {
                return ((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*) __Instance)->Lo;
            }

            set
            {
                ((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*)__Instance)->Lo = value;
            }
        }

        public int Hi
        {
            get
            {
                return ((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*) __Instance)->Hi;
            }

            set
            {
                ((global::Sample.E983F061E0B702DD8AE0B4B955735A6A3.__Internal*)__Instance)->Hi = value;
            }
        }
    }

    public unsafe partial class TagSAFEARRAYBOUND : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint cElements;

            [FieldOffset(4)]
            internal int lLbound;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0tagSAFEARRAYBOUND@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSAFEARRAYBOUND> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.TagSAFEARRAYBOUND>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.TagSAFEARRAYBOUND __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.TagSAFEARRAYBOUND(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.TagSAFEARRAYBOUND __CreateInstance(global::Sample.TagSAFEARRAYBOUND.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.TagSAFEARRAYBOUND(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.TagSAFEARRAYBOUND.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.TagSAFEARRAYBOUND.__Internal));
            *(global::Sample.TagSAFEARRAYBOUND.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TagSAFEARRAYBOUND(global::Sample.TagSAFEARRAYBOUND.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TagSAFEARRAYBOUND(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public TagSAFEARRAYBOUND()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSAFEARRAYBOUND.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public TagSAFEARRAYBOUND(global::Sample.TagSAFEARRAYBOUND _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.TagSAFEARRAYBOUND.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.TagSAFEARRAYBOUND.__Internal*) __Instance) = *((global::Sample.TagSAFEARRAYBOUND.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.TagSAFEARRAYBOUND __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint CElements
        {
            get
            {
                return ((global::Sample.TagSAFEARRAYBOUND.__Internal*) __Instance)->cElements;
            }

            set
            {
                ((global::Sample.TagSAFEARRAYBOUND.__Internal*)__Instance)->cElements = value;
            }
        }

        public int LLbound
        {
            get
            {
                return ((global::Sample.TagSAFEARRAYBOUND.__Internal*) __Instance)->lLbound;
            }

            set
            {
                ((global::Sample.TagSAFEARRAYBOUND.__Internal*)__Instance)->lLbound = value;
            }
        }
    }

    public unsafe partial class EE2F13C0D8C7A5E44CBEA2DDC2BADB614 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ushort vt;

            [FieldOffset(2)]
            internal ushort wReserved1;

            [FieldOffset(4)]
            internal ushort wReserved2;

            [FieldOffset(6)]
            internal ushort wReserved3;

            [FieldOffset(8)]
            internal long llVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EE2F13C0D8C7A5E44CBEA2DDC2BADB614@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614 __CreateInstance(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal));
            *(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EE2F13C0D8C7A5E44CBEA2DDC2BADB614(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EE2F13C0D8C7A5E44CBEA2DDC2BADB614(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EE2F13C0D8C7A5E44CBEA2DDC2BADB614()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EE2F13C0D8C7A5E44CBEA2DDC2BADB614(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance) = *((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort Vt
        {
            get
            {
                return ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance)->vt;
            }

            set
            {
                ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*)__Instance)->vt = value;
            }
        }

        public ushort WReserved1
        {
            get
            {
                return ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance)->wReserved1;
            }

            set
            {
                ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*)__Instance)->wReserved1 = value;
            }
        }

        public ushort WReserved2
        {
            get
            {
                return ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance)->wReserved2;
            }

            set
            {
                ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*)__Instance)->wReserved2 = value;
            }
        }

        public ushort WReserved3
        {
            get
            {
                return ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance)->wReserved3;
            }

            set
            {
                ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*)__Instance)->wReserved3 = value;
            }
        }

        public long LlVal
        {
            get
            {
                return ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*) __Instance)->llVal;
            }

            set
            {
                ((global::Sample.EE2F13C0D8C7A5E44CBEA2DDC2BADB614.__Internal*)__Instance)->llVal = value;
            }
        }
    }

    public unsafe partial class E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 2)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal sbyte scale;

            [FieldOffset(1)]
            internal sbyte sign;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __CreateInstance(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal));
            *(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*) __Instance) = *((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte Scale
        {
            get
            {
                return ((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*) __Instance)->scale;
            }

            set
            {
                ((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*)__Instance)->scale = value;
            }
        }

        public sbyte Sign
        {
            get
            {
                return ((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*) __Instance)->sign;
            }

            set
            {
                ((global::Sample.E5CC4D6FD2BF4E5B80FE1FD714DCA0CFA.__Internal*)__Instance)->sign = value;
            }
        }
    }

    public unsafe partial class EA04CD8C0331024E133CCEC4B0AB36956 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint Lo32;

            [FieldOffset(4)]
            internal uint Mid32;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EA04CD8C0331024E133CCEC4B0AB36956@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EA04CD8C0331024E133CCEC4B0AB36956> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EA04CD8C0331024E133CCEC4B0AB36956>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EA04CD8C0331024E133CCEC4B0AB36956 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EA04CD8C0331024E133CCEC4B0AB36956(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EA04CD8C0331024E133CCEC4B0AB36956 __CreateInstance(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EA04CD8C0331024E133CCEC4B0AB36956(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal));
            *(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EA04CD8C0331024E133CCEC4B0AB36956(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EA04CD8C0331024E133CCEC4B0AB36956(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EA04CD8C0331024E133CCEC4B0AB36956()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EA04CD8C0331024E133CCEC4B0AB36956(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*) __Instance) = *((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EA04CD8C0331024E133CCEC4B0AB36956 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Lo32
        {
            get
            {
                return ((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*) __Instance)->Lo32;
            }

            set
            {
                ((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*)__Instance)->Lo32 = value;
            }
        }

        public uint Mid32
        {
            get
            {
                return ((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*) __Instance)->Mid32;
            }

            set
            {
                ((global::Sample.EA04CD8C0331024E133CCEC4B0AB36956.__Internal*)__Instance)->Mid32 = value;
            }
        }
    }

    public unsafe partial class EF28A51B4B40B0D33C72915D739D42B4B : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 9)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal sbyte bVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EF28A51B4B40B0D33C72915D739D42B4B@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EF28A51B4B40B0D33C72915D739D42B4B> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EF28A51B4B40B0D33C72915D739D42B4B>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EF28A51B4B40B0D33C72915D739D42B4B __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EF28A51B4B40B0D33C72915D739D42B4B(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EF28A51B4B40B0D33C72915D739D42B4B __CreateInstance(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EF28A51B4B40B0D33C72915D739D42B4B(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal));
            *(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EF28A51B4B40B0D33C72915D739D42B4B(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EF28A51B4B40B0D33C72915D739D42B4B(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EF28A51B4B40B0D33C72915D739D42B4B()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EF28A51B4B40B0D33C72915D739D42B4B(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) __Instance) = *((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EF28A51B4B40B0D33C72915D739D42B4B __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public sbyte BVal
        {
            get
            {
                return ((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*) __Instance)->bVal;
            }

            set
            {
                ((global::Sample.EF28A51B4B40B0D33C72915D739D42B4B.__Internal*)__Instance)->bVal = value;
            }
        }
    }

    public unsafe partial class E31126B8528A05AF3606C6D495FD178E8 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 10)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal short iVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E31126B8528A05AF3606C6D495FD178E8@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E31126B8528A05AF3606C6D495FD178E8> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E31126B8528A05AF3606C6D495FD178E8>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E31126B8528A05AF3606C6D495FD178E8 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E31126B8528A05AF3606C6D495FD178E8(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E31126B8528A05AF3606C6D495FD178E8 __CreateInstance(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E31126B8528A05AF3606C6D495FD178E8(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal));
            *(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E31126B8528A05AF3606C6D495FD178E8(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E31126B8528A05AF3606C6D495FD178E8(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E31126B8528A05AF3606C6D495FD178E8()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E31126B8528A05AF3606C6D495FD178E8(global::Sample.E31126B8528A05AF3606C6D495FD178E8 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) __Instance) = *((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E31126B8528A05AF3606C6D495FD178E8 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public short IVal
        {
            get
            {
                return ((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*) __Instance)->iVal;
            }

            set
            {
                ((global::Sample.E31126B8528A05AF3606C6D495FD178E8.__Internal*)__Instance)->iVal = value;
            }
        }
    }

    public unsafe partial class E50230A970D9734D4E9774CFC619DF0F6 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal float fltVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E50230A970D9734D4E9774CFC619DF0F6@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E50230A970D9734D4E9774CFC619DF0F6> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E50230A970D9734D4E9774CFC619DF0F6>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E50230A970D9734D4E9774CFC619DF0F6 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E50230A970D9734D4E9774CFC619DF0F6(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E50230A970D9734D4E9774CFC619DF0F6 __CreateInstance(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E50230A970D9734D4E9774CFC619DF0F6(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal));
            *(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E50230A970D9734D4E9774CFC619DF0F6(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E50230A970D9734D4E9774CFC619DF0F6(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E50230A970D9734D4E9774CFC619DF0F6()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E50230A970D9734D4E9774CFC619DF0F6(global::Sample.E50230A970D9734D4E9774CFC619DF0F6 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) __Instance) = *((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E50230A970D9734D4E9774CFC619DF0F6 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public float FltVal
        {
            get
            {
                return ((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*) __Instance)->fltVal;
            }

            set
            {
                ((global::Sample.E50230A970D9734D4E9774CFC619DF0F6.__Internal*)__Instance)->fltVal = value;
            }
        }
    }

    public unsafe partial class E4C0EC2258454B893CE739DAE89D8DB7B : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal fixed byte dblVal[64];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E4C0EC2258454B893CE739DAE89D8DB7B@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B __CreateInstance(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal));
            *(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E4C0EC2258454B893CE739DAE89D8DB7B(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E4C0EC2258454B893CE739DAE89D8DB7B(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E4C0EC2258454B893CE739DAE89D8DB7B()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E4C0EC2258454B893CE739DAE89D8DB7B(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*) __Instance) = *((global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E4C0EC2258454B893CE739DAE89D8DB7B.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class E6DB36323059316E675433BB10D285009 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 10)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal short boolVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E6DB36323059316E675433BB10D285009@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E6DB36323059316E675433BB10D285009> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E6DB36323059316E675433BB10D285009>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E6DB36323059316E675433BB10D285009 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E6DB36323059316E675433BB10D285009(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E6DB36323059316E675433BB10D285009 __CreateInstance(global::Sample.E6DB36323059316E675433BB10D285009.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E6DB36323059316E675433BB10D285009(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E6DB36323059316E675433BB10D285009.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E6DB36323059316E675433BB10D285009.__Internal));
            *(global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E6DB36323059316E675433BB10D285009(global::Sample.E6DB36323059316E675433BB10D285009.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E6DB36323059316E675433BB10D285009(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E6DB36323059316E675433BB10D285009()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E6DB36323059316E675433BB10D285009.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E6DB36323059316E675433BB10D285009(global::Sample.E6DB36323059316E675433BB10D285009 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E6DB36323059316E675433BB10D285009.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) __Instance) = *((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E6DB36323059316E675433BB10D285009 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public short BoolVal
        {
            get
            {
                return ((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*) __Instance)->boolVal;
            }

            set
            {
                ((global::Sample.E6DB36323059316E675433BB10D285009.__Internal*)__Instance)->boolVal = value;
            }
        }
    }

    public unsafe partial class E8E3C8731874D1B3BC66617C4DD3163A6 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal int scode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E8E3C8731874D1B3BC66617C4DD3163A6@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6 __CreateInstance(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal));
            *(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E8E3C8731874D1B3BC66617C4DD3163A6(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E8E3C8731874D1B3BC66617C4DD3163A6(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E8E3C8731874D1B3BC66617C4DD3163A6()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E8E3C8731874D1B3BC66617C4DD3163A6(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) __Instance) = *((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public int Scode
        {
            get
            {
                return ((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*) __Instance)->scode;
            }

            set
            {
                ((global::Sample.E8E3C8731874D1B3BC66617C4DD3163A6.__Internal*)__Instance)->scode = value;
            }
        }
    }

    public unsafe partial class EE94952165EEA9EEA990FEB33603E1B19 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal fixed byte date[64];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EE94952165EEA9EEA990FEB33603E1B19@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE94952165EEA9EEA990FEB33603E1B19> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE94952165EEA9EEA990FEB33603E1B19>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EE94952165EEA9EEA990FEB33603E1B19 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EE94952165EEA9EEA990FEB33603E1B19(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EE94952165EEA9EEA990FEB33603E1B19 __CreateInstance(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EE94952165EEA9EEA990FEB33603E1B19(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal));
            *(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EE94952165EEA9EEA990FEB33603E1B19(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EE94952165EEA9EEA990FEB33603E1B19(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EE94952165EEA9EEA990FEB33603E1B19()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EE94952165EEA9EEA990FEB33603E1B19(global::Sample.EE94952165EEA9EEA990FEB33603E1B19 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*) __Instance) = *((global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EE94952165EEA9EEA990FEB33603E1B19 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EE94952165EEA9EEA990FEB33603E1B19.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class EC854646156F6772BF5D6F8470C9CCFAF : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr bstrVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EC854646156F6772BF5D6F8470C9CCFAF@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EC854646156F6772BF5D6F8470C9CCFAF> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EC854646156F6772BF5D6F8470C9CCFAF>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EC854646156F6772BF5D6F8470C9CCFAF __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EC854646156F6772BF5D6F8470C9CCFAF(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EC854646156F6772BF5D6F8470C9CCFAF __CreateInstance(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EC854646156F6772BF5D6F8470C9CCFAF(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal));
            *(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EC854646156F6772BF5D6F8470C9CCFAF(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EC854646156F6772BF5D6F8470C9CCFAF(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EC854646156F6772BF5D6F8470C9CCFAF()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EC854646156F6772BF5D6F8470C9CCFAF(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) __Instance) = *((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EC854646156F6772BF5D6F8470C9CCFAF __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public ushort* BstrVal
        {
            get
            {
                return (ushort*) ((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*) __Instance)->bstrVal;
            }

            set
            {
                ((global::Sample.EC854646156F6772BF5D6F8470C9CCFAF.__Internal*)__Instance)->bstrVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class E166B1F81F6EA96F97683A65F38FB1A59 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pbVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E166B1F81F6EA96F97683A65F38FB1A59@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E166B1F81F6EA96F97683A65F38FB1A59> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E166B1F81F6EA96F97683A65F38FB1A59>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E166B1F81F6EA96F97683A65F38FB1A59 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E166B1F81F6EA96F97683A65F38FB1A59(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E166B1F81F6EA96F97683A65F38FB1A59 __CreateInstance(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E166B1F81F6EA96F97683A65F38FB1A59(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal));
            *(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E166B1F81F6EA96F97683A65F38FB1A59(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E166B1F81F6EA96F97683A65F38FB1A59(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E166B1F81F6EA96F97683A65F38FB1A59()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E166B1F81F6EA96F97683A65F38FB1A59(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) __Instance) = *((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E166B1F81F6EA96F97683A65F38FB1A59 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public sbyte* PbVal
        {
            get
            {
                return (sbyte*) ((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*) __Instance)->pbVal;
            }

            set
            {
                ((global::Sample.E166B1F81F6EA96F97683A65F38FB1A59.__Internal*)__Instance)->pbVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class E76732A64405C0E287FCB302687644550 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr piVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E76732A64405C0E287FCB302687644550@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E76732A64405C0E287FCB302687644550> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E76732A64405C0E287FCB302687644550>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E76732A64405C0E287FCB302687644550 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E76732A64405C0E287FCB302687644550(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E76732A64405C0E287FCB302687644550 __CreateInstance(global::Sample.E76732A64405C0E287FCB302687644550.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E76732A64405C0E287FCB302687644550(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E76732A64405C0E287FCB302687644550.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E76732A64405C0E287FCB302687644550.__Internal));
            *(global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E76732A64405C0E287FCB302687644550(global::Sample.E76732A64405C0E287FCB302687644550.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E76732A64405C0E287FCB302687644550(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E76732A64405C0E287FCB302687644550()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E76732A64405C0E287FCB302687644550.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E76732A64405C0E287FCB302687644550(global::Sample.E76732A64405C0E287FCB302687644550 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E76732A64405C0E287FCB302687644550.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) __Instance) = *((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E76732A64405C0E287FCB302687644550 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public short* PiVal
        {
            get
            {
                return (short*) ((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*) __Instance)->piVal;
            }

            set
            {
                ((global::Sample.E76732A64405C0E287FCB302687644550.__Internal*)__Instance)->piVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class EE5FC128E66C26C95254032BA69D36E74 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr plVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EE5FC128E66C26C95254032BA69D36E74@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE5FC128E66C26C95254032BA69D36E74> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE5FC128E66C26C95254032BA69D36E74>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EE5FC128E66C26C95254032BA69D36E74 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EE5FC128E66C26C95254032BA69D36E74(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EE5FC128E66C26C95254032BA69D36E74 __CreateInstance(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EE5FC128E66C26C95254032BA69D36E74(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal));
            *(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EE5FC128E66C26C95254032BA69D36E74(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EE5FC128E66C26C95254032BA69D36E74(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EE5FC128E66C26C95254032BA69D36E74()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EE5FC128E66C26C95254032BA69D36E74(global::Sample.EE5FC128E66C26C95254032BA69D36E74 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) __Instance) = *((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EE5FC128E66C26C95254032BA69D36E74 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public int* PlVal
        {
            get
            {
                return (int*) ((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*) __Instance)->plVal;
            }

            set
            {
                ((global::Sample.EE5FC128E66C26C95254032BA69D36E74.__Internal*)__Instance)->plVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class EE9CDCC48CD0BB58E8F361AA17BFDA76E : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pllVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EE9CDCC48CD0BB58E8F361AA17BFDA76E@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E __CreateInstance(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal));
            *(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EE9CDCC48CD0BB58E8F361AA17BFDA76E(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EE9CDCC48CD0BB58E8F361AA17BFDA76E(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EE9CDCC48CD0BB58E8F361AA17BFDA76E()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EE9CDCC48CD0BB58E8F361AA17BFDA76E(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) __Instance) = *((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public long* PllVal
        {
            get
            {
                return (long*) ((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*) __Instance)->pllVal;
            }

            set
            {
                ((global::Sample.EE9CDCC48CD0BB58E8F361AA17BFDA76E.__Internal*)__Instance)->pllVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class EBF8CC88CDF129BD6E4FA4ABA13F521AD : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pfltVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EBF8CC88CDF129BD6E4FA4ABA13F521AD@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD __CreateInstance(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal));
            *(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EBF8CC88CDF129BD6E4FA4ABA13F521AD(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EBF8CC88CDF129BD6E4FA4ABA13F521AD(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EBF8CC88CDF129BD6E4FA4ABA13F521AD()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EBF8CC88CDF129BD6E4FA4ABA13F521AD(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) __Instance) = *((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public float* PfltVal
        {
            get
            {
                return (float*) ((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*) __Instance)->pfltVal;
            }

            set
            {
                ((global::Sample.EBF8CC88CDF129BD6E4FA4ABA13F521AD.__Internal*)__Instance)->pfltVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class E2CABE618CF1C2625A4479554E4967E0A : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pdblVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0E2CABE618CF1C2625A4479554E4967E0A@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E2CABE618CF1C2625A4479554E4967E0A> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.E2CABE618CF1C2625A4479554E4967E0A>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.E2CABE618CF1C2625A4479554E4967E0A __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.E2CABE618CF1C2625A4479554E4967E0A(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.E2CABE618CF1C2625A4479554E4967E0A __CreateInstance(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.E2CABE618CF1C2625A4479554E4967E0A(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal));
            *(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private E2CABE618CF1C2625A4479554E4967E0A(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected E2CABE618CF1C2625A4479554E4967E0A(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public E2CABE618CF1C2625A4479554E4967E0A()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public E2CABE618CF1C2625A4479554E4967E0A(global::Sample.E2CABE618CF1C2625A4479554E4967E0A _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*) __Instance) = *((global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.E2CABE618CF1C2625A4479554E4967E0A __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.E2CABE618CF1C2625A4479554E4967E0A.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class EAAA92DA1D6E1B0E8462F69216B62027C : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pboolVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EAAA92DA1D6E1B0E8462F69216B62027C@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C __CreateInstance(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal));
            *(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EAAA92DA1D6E1B0E8462F69216B62027C(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EAAA92DA1D6E1B0E8462F69216B62027C(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EAAA92DA1D6E1B0E8462F69216B62027C()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EAAA92DA1D6E1B0E8462F69216B62027C(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) __Instance) = *((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public short* PboolVal
        {
            get
            {
                return (short*) ((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*) __Instance)->pboolVal;
            }

            set
            {
                ((global::Sample.EAAA92DA1D6E1B0E8462F69216B62027C.__Internal*)__Instance)->pboolVal = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class EF7167AE7A8ABA03C094C204FB1564A28 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte gap0[8];

            [FieldOffset(8)]
            internal global::System.IntPtr pscode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Sample", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0EF7167AE7A8ABA03C094C204FB1564A28@@QAE@ABU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EF7167AE7A8ABA03C094C204FB1564A28> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Sample.EF7167AE7A8ABA03C094C204FB1564A28>();

        protected bool __ownsNativeInstance;

        internal static global::Sample.EF7167AE7A8ABA03C094C204FB1564A28 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Sample.EF7167AE7A8ABA03C094C204FB1564A28(native.ToPointer(), skipVTables);
        }

        internal static global::Sample.EF7167AE7A8ABA03C094C204FB1564A28 __CreateInstance(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal native, bool skipVTables = false)
        {
            return new global::Sample.EF7167AE7A8ABA03C094C204FB1564A28(native, skipVTables);
        }

        private static void* __CopyValue(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal));
            *(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EF7167AE7A8ABA03C094C204FB1564A28(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EF7167AE7A8ABA03C094C204FB1564A28(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EF7167AE7A8ABA03C094C204FB1564A28()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public EF7167AE7A8ABA03C094C204FB1564A28(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) __Instance) = *((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::Sample.EF7167AE7A8ABA03C094C204FB1564A28 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Gap0
        {
            get
            {
                byte[] __value = null;
                if (((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) __Instance)->gap0 != null)
                {
                    __value = new byte[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = ((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) __Instance)->gap0[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*)__Instance)->gap0[i] = value[i];
                }
            }
        }

        public int* Pscode
        {
            get
            {
                return (int*) ((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*) __Instance)->pscode;
            }

            set
            {
                ((global::Sample.EF7167AE7A8ABA03C094C204FB1564A28.__Internal*)__Instance)->pscode = (global::System.IntPtr) value;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_uint(uint _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate void Action_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_voidPtrPtr(global::System.IntPtr This, global::System.IntPtr riid, void** ppvObject);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate uint Func_uint_IntPtr(global::System.IntPtr This);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr(global::System.IntPtr This, global::System.IntPtr pMessage, global::System.IntPtr riid);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_uintPtr(global::System.IntPtr This, global::System.IntPtr pMessage, uint* pStatus);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_IntPtr(global::System.IntPtr This, global::System.IntPtr pMessage);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr_uintPtr_voidPtrPtr(global::System.IntPtr This, uint* pdwDestContext, void** ppvDestContext);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate int Func_int_IntPtr(global::System.IntPtr This);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.StdCall)]
        public unsafe delegate void Action_uint_ushortPtrPtr(uint _0, ushort** _1);
    }
}
